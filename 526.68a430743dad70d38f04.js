(()=>{"use strict";var e,r,t={4526:(e,r,t)=>{var n={w:800,h:400,lInputCodes:["ArrowLeft"],rInputCodes:["ArrowRight"],xOffs:[-.3,-.1,.1,.3],ts:1/60,sinLim:.4,sinStep:.03,sinDecay:.01,velLim:4,velDecay:.01,groundHalfWidth:100,groundFlatCenterHalfWidth:1,groundDetailInterval:.2,get nTerrainPts(){return this.groundHalfWidth/this.groundDetailInterval*2+1},wallH:.9,wallW:.5,slopeDecay:.9,slopeLim:.4,slopeDiffMag:.125,slopeDiffDecay:1.1,slopeDiffLim:.2,get barMax(){var e="vel"==this.targetType?this.velLim:this.sinLim;return.45*this.w/e},barHeight:25,get scoreDenomEps(){return this.sinLim},crashSinLimit:.8,maxTorque:1,nWorkers:8,multiplier:2,epLen:800,twitchinesses:[0,.1,.05,.025,.01,.005,.0025,null],cmaSigma:.5,targetType:"vel"},i=Float32Array.from([1.097368597984314,-.4921252429485321,-2.4285199642181396,1.9147231578826904,1.4103649854660034,-1.0730559825897217,3.633850336074829,.969073474407196,1.72327721118927,3.862189769744873,-.5683848857879639,.4833804965019226,1.621141791343689,-1.7951841354370117,.28255704045295715,.8373199105262756,-1.491740107536316,1.680241346359253,4.32080602645874,-6.2230939865112305,3.8894057273864746,-.43056386709213257,-1.0381842851638794,1.206999659538269,-2.442864418029785,-3.2872400283813477,4.1724443435668945,-1.3102113008499146,2.0718746185302734,-2.012195348739624,-.09232735633850098,-2.3299849033355713,-1.3458508253097534,1.57430899143219,1.585335373878479,-4.818405628204346,-.5162748098373413,-.35466793179512024,.6563999056816101,.5765581130981445,3.2163033485412598,-2.673863410949707,-2.775988817214966,.3102789521217346,2.8213186264038086,-2.6345112323760986,.41489309072494507,.5273040533065796,2.8084323406219482,-.22201833128929138,-1.8847272396087646,2.1349411010742188,3.9124855995178223,.23571348190307617,-.4009905755519867,-2.32651686668396,-5.905391693115234,-3.277113199234009,-3.1946818828582764,.6040287613868713,1.5398304462432861,-1.7137975692749023,-2.5994322299957275,.7596493363380432,2.0505306720733643,-1.0719929933547974,-.12434184551239014,-.21520830690860748,-2.977525234222412,-2.916106700897217,-2.0895442962646484,.6780237555503845,-1.1381938457489014,-.3976782262325287,-8.091259002685547,-.8609429597854614,2.272367000579834,-.44986462593078613,-1.9860502481460571,-2.037736654281616,1.3788461685180664,-.946772575378418,-2.512946128845215,1.2120083570480347,-.8112329840660095,-.2584746479988098,-.8203612565994263,-1.7425763607025146,-2.4738595485687256,.20930416882038116,-3.1742286682128906,-.1539025902748108,2.706810474395752,-1.630825400352478,.03723296895623207,-2.7679619789123535,-1.1558122634887695,-.16676628589630127,-.11495263129472733,-.3647719621658325,-1.2723920345306396,-.8320516347885132,.0584125891327858,-.20485924184322357,-.6998800039291382,-.7748422622680664,.03306061774492264,.05045829713344574,-.7898354530334473,-.3644859194755554,-1.9912363290786743,.30128753185272217,.4223995506763458,-3.72501277923584,-6.310052394866943,3.808600425720215,1.4358415603637695,-2.62609601020813,-2.87255597114563,2.104060649871826,-3.1228067874908447,.46431323885917664,1.5147188901901245,1.0571037530899048,.053630534559488297,.8355461359024048,-2.3932297229766846,-1.0719527006149292,-1.0285042524337769,4.927562236785889,-4.36212682723999,1.996174693107605,2.3710286617279053,-.3524213433265686,-.06643331795930862,-.9069985747337341,2.0232365131378174,.6794627904891968,-3.7015702724456787,-1.2146440744400024,2.636486291885376,3.430572748184204,.665721595287323,.35096776485443115,-4.536441802978516,1.5776478052139282,3.518752098083496,4.304330348968506,.34464845061302185,.7764376401901245,.8761256337165833,3.0202441215515137,-1.0507209300994873,-.6082743406295776,-1.6540871858596802,2.939337968826294,-.17868749797344208,2.395843505859375,-.22536619007587433,-5.117509841918945,1.9952406883239746,-.9335593581199646,-.7380295395851135,.8094670176506042,.8877607583999634,-1.979039192199707,1.1599781513214111,-2.73085355758667,3.2037062644958496,.7695357799530029,1.7714511156082153,-2.932318925857544,-1.0461864471435547,3.496929407119751,3.517202138900757,2.6925926208496094,.33698439598083496,-.7475488185882568,.16617265343666077,-.07216118276119232,-2.731569766998291,2.3597419261932373,.14207404851913452,.34206706285476685,5.10419225692749,2.5803232192993164,.5957708358764648,.19110116362571716,.9374128580093384,1.2445136308670044,3.4148755073547363,-2.150707244873047,-2.19406795501709,-2.1235013008117676,-1.156686544418335,1.1939444541931152,3.0110416412353516,-.7731320261955261,-2.8795650005340576,2.6769773960113525,2.0949344635009766,-2.073817491531372,3.4075050354003906,1.9652248620986938,-1.1932811737060547,-2.3039934635162354,-2.7437469959259033,-1.7810425758361816,1.5841933488845825,2.8032116889953613,.25412386655807495,-1.4644629955291748,4.183811187744141,-.17973998188972473,2.7961342334747314,1.39539635181427,.34437960386276245,-1.1173146963119507,.40626052021980286,-1.5824397802352905,.14563427865505219,-2.399414539337158,6.656028747558594,.8279803395271301,-.7896231412887573,-2.388155460357666,-.5894807577133179,-1.5486451387405396,-.9272681474685669,-2.5805861949920654,.18140041828155518,-1.4993616342544556,.6692470908164978,-3.4452054500579834,-1.1278798580169678,-5.746531963348389,.692906379699707,.38156548142433167,1.763306736946106,-4.294862747192383,.6706625819206238,-.4210456311702728,-2.863720178604126,-.9124757647514343,2.075263023376465,-3.9785890579223633,.2882373631000519,.4847204089164734,-6.575814723968506,-6.198582649230957,.43105143308639526,-5.662414073944092,-4.541703701019287,-6.71414041519165,-5.687849044799805,-9.647754669189453,-2.682098865509033,-2.0994865894317627,2.992748737335205,-6.269527435302734,2.764437198638916,5.571993350982666,.817680835723877,3.074885845184326,-2.727198600769043,9.613213539123535,4.820910930633545,-4.828794956207275,-6.644251823425293]),o=t(969);function a(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,i,o,a,l=[],s=!0,u=!1;try{if(o=(t=t.call(e)).next,0===r){if(Object(t)!==t)return;s=!1}else for(;!(s=(n=o.call(t)).done)&&(l.push(n.value),l.length!==r);s=!0);}catch(e){u=!0,i=e}finally{try{if(!s&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(u)throw i}}return l}}(e,r)||l(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,r){if(e){if("string"==typeof e)return s(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?s(e,r):void 0}}function s(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}var u,c=!1;function f(e){for(var r=function(e){for(var r=!1,t=new Float32Array(e.popsize*e.n_dim),n=0;n<e.popsize;n++){var i=e.ask();if(i.constructor!==Float32Array){r=!0;break}for(var o=0;o<i.length;o++)t[n*i.length+o]=i[o]}if(!r)return t;console.log("ask failed"),console.log(e)}(e),t=function(){var e,r=[],t=function(e,r){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=l(e))){t&&(e=t);var n=0,i=function(){};return{s:i,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==t.return||t.return()}finally{if(s)throw o}}}}(n.twitchinesses);try{for(t.s();!(e=t.n()).done;){var i=e.value;r.push(p(i))}}catch(e){t.e(e)}finally{t.f()}return r}(),i=r.length/n.nWorkers,o=0,a=[],s=0;s<n.nWorkers;s++)a.push({targets:t,solutions:r.slice(o,o+i)}),o+=i;postMessage(["targetsSolutions",a])}function p(e){var r,t,i,o,l=new Float32Array(n.epLen).fill(0),s=new Float32Array(n.epLen).fill(0),u=!1,c=!1;null!=e&&e>0&&(Math.random()<.5?c=!0:u=!0);for(var f=1;f<n.epLen;f++){if(null===e)c=!0,u=!1;else if(Math.random()<e){var p=Math.random();p<.7?u==c?Math.random()<.5?(u=!0,c=!1):(u=!1,c=!0):c?(u=!0,c=!1):(u=!1,c=!0):p<.9?(u=!1,c=!1):Math.random()<.5?u=!0:c=!0}var m=a((r=u,t=c,i=void 0,o=void 0,i=l[f-1],o=s[f-1],r&&t||(0!=i&&(Math.abs(i)<n.sinDecay?i=0:i-=Math.sign(i)*n.sinDecay),r?(i-=n.sinStep)<-n.sinLim&&(i=-n.sinLim):t&&(i+=n.sinStep)>n.sinLim&&(i=n.sinLim),0!=o&&(Math.abs(o)<n.velDecay?o=0:o-=Math.sign(o)*n.velDecay),(o+=.102*i)>n.velLim?o=n.velLim:o<-n.velLim&&(o=-n.velLim)),[i,o]),2);l[f]=m[0],s[f]=m[1]}return"sin"===n.targetType?l:s}onmessage=function(e){var r,t,p,m,h=a(e.data,2),v=h[0],y=h[1];if("init_info"!=v||c){if("solutionsScores"==v){var d=y.map((function(e){return e.score}));u.tell(y),console.log("mean:  ".concat(d.reduce((function(e,r){return e+r}))/d.length)),console.log("min:  ".concat(Math.min.apply(Math,function(e){if(Array.isArray(e))return s(e)}(m=d)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(m)||l(m)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()))),postMessage(["cmaMeanWts",u.mean.slice()]),f(u)}}else r=function(e){var r=(0,o.V)(e),t=n.nWorkers*Math.ceil(n.multiplier*r/n.nWorkers),i=t*n.twitchinesses.length;return{cmaPopSize:t,totalPopSize:i,simulationPopSize:i/n.nWorkers}}(y.n_dim),t=r.cmaPopSize,r.totalPopSize,r.simulationPopSize,p=i.slice(),u=new o.k(p,n.cmaSigma,t,void 0,void 0),c=!0,f(u)}}},n={};function i(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={exports:{}};return t[e](o,o.exports,i),o.exports}i.m=t,i.x=()=>{var e=i.O(void 0,[969],(()=>i(4526)));return i.O(e)},e=[],i.O=(r,t,n,o)=>{if(!t){var a=1/0;for(c=0;c<e.length;c++){for(var[t,n,o]=e[c],l=!0,s=0;s<t.length;s++)(!1&o||a>=o)&&Object.keys(i.O).every((e=>i.O[e](t[s])))?t.splice(s--,1):(l=!1,o<a&&(a=o));if(l){e.splice(c--,1);var u=n();void 0!==u&&(r=u)}}return r}o=o||0;for(var c=e.length;c>0&&e[c-1][2]>o;c--)e[c]=e[c-1];e[c]=[t,n,o]},i.d=(e,r)=>{for(var t in r)i.o(r,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((r,t)=>(i.f[t](e,r),r)),[])),i.u=e=>e+".8d125f38796dd1b15ad3.js",i.miniCssF=e=>{},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var r=i.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");if(t.length)for(var n=t.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=t[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={526:1};i.f.i=(r,t)=>{e[r]||importScripts(i.p+i.u(r))};var r=self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[],t=r.push.bind(r);r.push=r=>{var[n,o,a]=r;for(var l in o)i.o(o,l)&&(i.m[l]=o[l]);for(a&&a(i);n.length;)e[n.pop()]=1;t(r)}})(),r=i.x,i.x=()=>i.e(969).then(r),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,