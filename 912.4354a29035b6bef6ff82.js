(()=>{var t,e,r={106:(t,e,r)=>{"use strict";var i=r(3942),s={w:800,h:400,lInputCodes:["ArrowLeft"],rInputCodes:["ArrowRight"],xOffs:[-.3,-.1,.1,.3],ts:1/60,sinLim:.4,sinStep:.03,sinDecay:.01,velLim:4,velDecay:.01,groundHalfWidth:100,groundFlatCenterHalfWidth:1,groundDetailInterval:.2,get nTerrainPts(){return this.groundHalfWidth/this.groundDetailInterval*2+1},wallH:.9,wallW:.5,slopeDecay:.9,slopeLim:.4,slopeDiffMag:.125,slopeDiffDecay:1.1,slopeDiffLim:.2,get barMax(){var t="vel"==this.targetType?this.velLim:this.sinLim;return.45*this.w/t},barHeight:25,get scoreDenomEps(){return this.sinLim},crashSinLimit:.8,maxTorque:1,nWorkers:8,multiplier:2,epLen:800,twitchinesses:[0,.1,.05,.025,.01,.005,.0025,null],cmaSigma:.5,targetType:"vel"};function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function a(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=c(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var i=0,s=function(){};return{s,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,a=!0,o=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){o=!0,n=t},f:function(){try{a||null==r.return||r.return()}finally{if(o)throw n}}}}function o(t,e,r){if(h())return Reflect.construct.apply(null,arguments);var i=[null];i.push.apply(i,e);var s=new(t.bind.apply(t,i));return r&&l(s,r.prototype),s}function h(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(h=function(){return!!t})()}function l(t,e){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},l(t,e)}function u(t){return function(t){if(Array.isArray(t))return f(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||c(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(t,e){if(t){if("string"==typeof t)return f(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(t,e):void 0}}function f(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,i=new Array(e);r<e;r++)i[r]=t[r];return i}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function y(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,d(i.key),i)}}function v(t,e,r){return e&&y(t.prototype,e),r&&y(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function d(t){var e=function(t,e){if("object"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,"string");if("object"!=n(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==n(e)?e:String(e)}var g=function(){function t(e,r,i,n){p(this,t),this.population=n,console.assert(2==e.length,"Tippy requires 2d wheelPos"),this.wheelR=.25,this.wheelPosInit=[e[0],e[1]-this.wheelR],this.chassisH=1,this.chassisW=.3,this.axleOffsetY=.1;var h=new i.b2BodyDef;h.set_type(i.b2_dynamicBody),h.set_position(o(i.b2Vec2,u(this.wheelPosInit))),this.wheelBody=r.CreateBody(h);var l=new i.b2CircleShape;l.set_m_radius(this.wheelR);var c=new i.b2FixtureDef;c.set_shape(l),c.set_density(.5),c.set_friction(.9),c.set_restitution(.1);var f=c.get_filter();f.set_categoryBits(2),f.set_maskBits(1),c.set_filter(f);var y=i.castObject(this.wheelBody.CreateFixture(c),i.b2Fixture);y.partType="wheel",y.spot=this,this.wheelMass=this.wheelBody.GetMass();var v=.5*this.chassisW,d=.5*this.chassisH,g=.2*this.chassisW,w=.35*this.chassisH;this.chassisVertices=[[+v,-d],[-v,-d],[-v,+w],[-g,+d],[+g,+d],[+v,+w]];var b,m=[],S=a(this.chassisVertices);try{for(S.s();!(b=S.n()).done;){var _=b.value;m.push(new i.b2Vec2(_[0]+this.wheelPosInit[0],_[1]+this.wheelPosInit[1]))}}catch(t){S.e(t)}finally{S.f()}this.chassisPosInit=[this.wheelPosInit[0],this.wheelPosInit[1]-.5*this.chassisH+this.axleOffsetY];var P=new i.b2BodyDef;P.set_type(i.b2_dynamicBody),P.set_position(o(i.b2Vec2,u(this.chassisPosInit))),this.chassisBody=r.CreateBody(P);var A=this.b2CreatePolygonShape(m,i),x=new i.b2FixtureDef,B=x.get_filter();B.set_categoryBits(2),B.set_maskBits(1),x.set_filter(B),x.set_density(2),x.set_shape(A);var k=i.castObject(this.chassisBody.CreateFixture(x),i.b2Fixture);k.partType="chassis",k.spot=this,this.chassisMass=this.chassisBody.GetMass();var C=new i.b2RevoluteJointDef;C.Initialize(this.wheelBody,this.chassisBody,o(i.b2Vec2,u(this.wheelPosInit))),C.set_enableMotor(!0),C.set_maxMotorTorque(s.maxTorque),this.axle=i.castObject(r.CreateJoint(C),i.b2RevoluteJoint),this.inputDim=this.getInputs(0).length,this.shapes=[this.inputDim,12,8,1],this.n_dim=0,this.weightCount=0,this.biasCount=0;for(var O=0;O<this.shapes.length-1;O++){var I=this.shapes[O],T=this.shapes[O+1];this.n_dim+=(I+1)*T,this.weightCount+=I*T,this.biasCount+=T}this.reset(i)}return v(t,[{key:"b2CreatePolygonShape",value:function(t,e){for(var r=new e.b2PolygonShape,i=e._malloc(8*t.length),s=0,n=0;n<t.length;n++)e.HEAPF32[i+s>>2]=t[n].get_x(),e.HEAPF32[i+(s+4)>>2]=t[n].get_y(),s+=8;var a=e.wrapPointer(i,e.b2Vec2);return r.Set(a,t.length),r}},{key:"setWts",value:function(t){this.flatWts=t;var e=0;this.weights=[];for(var r=0;r<this.shapes.length-1;r++){var i=this.shapes[r],s=this.shapes[r+1],n=Float32Array.from(this.flatWts.slice(e,e+i*s));this.weights.push(new w(n,i,s)),e+=i*s}this.biases=[];for(var a=0;a<this.shapes.length-1;a++){var o=this.shapes[a+1],h=Float32Array.from(this.flatWts.slice(e,e+1*o));this.biases.push(new w(h,1,o)),e+=1*o}}},{key:"reset",value:function(t){this.chassisBody.SetTransform(o(t.b2Vec2,u(this.chassisPosInit)),0),this.chassisBody.SetLinearVelocity(new t.b2Vec2(0,0)),this.chassisBody.SetAngularVelocity(0),this.chassisBody.SetAwake(1),this.wheelBody.SetTransform(o(t.b2Vec2,u(this.wheelPosInit)),0),this.wheelBody.SetLinearVelocity(new t.b2Vec2(0,0)),this.wheelBody.SetAngularVelocity(0),this.wheelBody.SetAwake(1),this.targetSqErrSum=0,this.targetPrev=null,this.prevOutput=0,this.outputDiffSqSum=0,this.prevWheelVelX=0,this.wheelAccX=0,this.prevChassisVelX=0,this.chassisAccX=0,this.driftXSqSum=0,this.crashStepCount=0}},{key:"updateTargetScore",value:function(t,e){var r=t-e,i=r*r;Math.abs(t),s.scoreDenomEps,this.targetSqErrSum+="vel"===s.targetType?i:100*i}},{key:"setSpeed",value:function(t){this.axle.SetMotorSpeed(t)}},{key:"getInputs",value:function(t){var e;this.reverse=0!=t?Math.sign(t):1,e=null!=this.inputDim?new Float32Array(this.inputDim):[];var r=0,i=this.wheelBody.GetPosition(),n=i.get_x(),o=i.get_y();this.lidarYs=[];var h,l=a(s.xOffs);try{for(l.s();!(h=l.n()).done;){var u=h.value,c=S(n+this.reverse*u,this.population.terrainPts)-o-this.wheelR;this.lidarYs.push(c),e[r]=c,r++}}catch(t){l.e(t)}finally{l.f()}var f=Math.sin(this.chassisBody.GetAngle());e[r]=this.reverse*f,r++,Math.abs(f)>s.crashSinLimit&&this.crashStepCount++;var p=this.chassisBody.GetLinearVelocity().get_x();this.chassisAccX=p-this.prevChassisVelX,this.prevChassisVelX=p,0==t&&(this.driftXSqSum+=this.chassisAccX*this.chassisAccX);var y=this.chassisBody.GetAngularVelocity();e[r]=this.reverse*y,r++;var v=this.wheelBody.GetLinearVelocity(),d=v.get_x();this.wheelAccX=d-this.prevWheelVelX,this.prevWheelVelX=d,e[r]=this.reverse*d,e[++r]=v.get_y(),r++;var g=this.wheelBody.GetAngularVelocity();e[r]=this.reverse*g,r++;var w=this.axle.GetReactionForce(60);return e[r]=.01*this.reverse*w.get_x(),e[++r]=.01*w.get_y(),e[++r]=this.reverse*t,r++,null!==this.targetPrev&&("sin"===s.targetType?this.updateTargetScore(this.targetPrev,f):this.updateTargetScore(this.targetPrev,d)),this.targetPrev=t,e}},{key:"update",value:function(t){var e=this.getInputs(t),r=new w(e,1,e.length).mul(this.weights[0]).add(this.biases[0]).leakyElu().mul(this.weights[1]).add(this.biases[1]).leakyElu().mul(this.weights[2]).add(this.biases[2]).data[0],i=this.reverse*r;this.setSpeed(i);var s=i-this.prevOutput;this.outputDiffSqSum+=s*s,this.prevOutput=i}},{key:"drawPositionData",get:function(){var t=this.wheelBody.GetPosition(),e=this.chassisBody.GetPosition();return{wheelPosCurrent:[t.get_x(),t.get_y()],wheelAngleCurrent:this.wheelBody.GetAngle(),chassisPosCurrent:[e.get_x(),e.get_y()],chassisAngleCurrent:this.chassisBody.GetAngle()}}},{key:"corrData",get:function(){return[Math.sin(this.chassisBody.GetAngle()),this.wheelAccX,this.chassisAccX]}}]),t}(),w=function(){function t(e,r,i){p(this,t),this.data=e,this.m=r,this.n=i}return v(t,[{key:"mul",value:function(e){for(var r=this.data,i=e.data,s=this.m,n=this.n,a=e.n,o=new Float32Array(new ArrayBuffer(4*s*a)),h=0;h<a;h++)for(var l=0;l<s;l++){for(var u=0,c=0;c<n;c++)u+=r[l*n+c]*i[c*a+h];o[l*a+h]=u}return new t(o,s,a)}},{key:"add",value:function(e){for(var r=this.data,i=e.data,s=r.length,n=new Float32Array(new ArrayBuffer(4*s)),a=0;a<s;a++)n[a]=r[a]+i[a];return new t(n,this.m,this.n)}},{key:"relu",value:function(){for(var e=this.data.length,r=this.data.slice(),i=0;i<e;i++)r[i]=Math.max(0,r[i]);return new t(r,this.m,this.n)}},{key:"leakyRelu",value:function(){for(var e=this.data.length,r=this.data.slice(),i=0;i<e;i++)r[i]=Math.max(.1*r[i],r[i]);return new t(r,this.m,this.n)}},{key:"elu",value:function(){for(var e=this.data.length,r=this.data.slice(),i=0;i<e;i++)r[i]<0&&(r[i]=Math.expm1(r[i]));return new t(r,this.m,this.n)}},{key:"leakyElu",value:function(){for(var e=this.data.length,r=this.data.slice(),i=0;i<e;i++)r[i]<0&&(r[i]=Math.expm1(r[i])+.1*r[i]);return new t(r,this.m,this.n)}}]),t}(),b=function(){function t(e,r,i,n){p(this,t),this.wheelPosInit=e.slice();var a=new n.b2Vec2(0,9.81);this.world=new n.b2World(a),this.b2=n,this.terrainPts=i;for(var o,h=this.world.CreateBody(new n.b2BodyDef),l=[],u=0;u<s.nTerrainPts;u++){var c=i[u+1]-i[u],f=c==o;o=c,f&&u!=s.nTerrainPts-1||l.push([m(u),i[u]])}for(var y=l.length-1;y>=1;y--){var v=new n.b2EdgeShape;v.SetTwoSided(new n.b2Vec2(l[y][0],l[y][1]),new n.b2Vec2(l[y-1][0],l[y-1][1]));var d=new n.b2FixtureDef;d.set_shape(v),d.set_friction(.9),d.set_restitution(.1),n.castObject(h.CreateFixture(d),n.b2Fixture)}for(var g=0,w=[0,s.nTerrainPts-1];g<w.length;g++){var b=w[g],S=[m(b),i[b]],_=S[0],P=S[1],A=new n.b2EdgeShape;A.SetTwoSided(new n.b2Vec2(_,P),new n.b2Vec2(_,P-s.wallH));var x=new n.b2FixtureDef;x.set_shape(A),x.set_friction(.9),x.set_restitution(.1),n.castObject(h.CreateFixture(x),n.b2Fixture)}this.tippys=[],this.addTippys(r),this.n_dim=this.tippys[0].n_dim}return v(t,[{key:"reset",value:function(){var t,e=a(this.tippys);try{for(e.s();!(t=e.n()).done;)t.value.reset(this.b2)}catch(t){e.e(t)}finally{e.f()}}},{key:"addTippys",value:function(t){for(var e=0;e<t;e++)this.tippys.push(new g(this.wheelPosInit,this.world,this.b2,this))}},{key:"setWts",value:function(t){var e,r=0,i=a(this.tippys);try{for(i.s();!(e=i.n()).done;)e.value.setWts(t.slice(r,r+this.n_dim)),r+=this.n_dim}catch(t){i.e(t)}finally{i.f()}}},{key:"train",value:function(t){var e=t.targets,r=t.solutions,i=r.length/this.n_dim;this.tippys.length<i*e.length&&this.addTippys(i*e.length-this.tippys.length);for(var n=0,o=0;o<i;o++){for(var h=0;h<e.length;h++){var l=this.tippys[o*e.length+h];l.setWts(r.slice(n,n+this.n_dim)),l.targetIdx=h}n+=this.n_dim}this.reset();for(var u=0;u<e[0].length;u++){var c,f=a(this.tippys);try{for(f.s();!(c=f.n()).done;){var p=c.value;p.update(e[p.targetIdx][u])}}catch(t){f.e(t)}finally{f.f()}this.world.Step(s.ts,8,3)}for(var y=[],v=0;v<i;v++){var d,g=this.tippys[v*e.length],w=g.flatWts,b=0,m=a(g.weights);try{for(m.s();!(d=m.n()).done;){var S,_=a(d.value.data);try{for(_.s();!(S=_.n()).done;){var P=S.value;b+=P*P}}catch(t){_.e(t)}finally{_.f()}}}catch(t){m.e(t)}finally{m.f()}b/=g.weightCount;var A,x=0,B=a(g.biases);try{for(B.s();!(A=B.n()).done;){var k,C=a(A.value.data);try{for(C.s();!(k=C.n()).done;){var O=k.value;x+=O*O}}catch(t){C.e(t)}finally{C.f()}}}catch(t){B.e(t)}finally{B.f()}x/=g.biasCount;for(var I=[],T=0;T<e.length;T++){var D=this.tippys[v*e.length+T],V=D.targetSqErrSum/s.epLen,j=D.crashStepCount/s.epLen,M=D.driftXSqSum/s.epLen;I.push({mse:V,crashedRatio:j,driftX:M})}y.push({solution:w,wtsNorm:b,biasNorm:x,taskScores:I})}return y}},{key:"update",value:function(t){for(var e=0;e<this.tippys.length;e++)this.tippys[e].update(t[e]);this.world.Step(s.ts,8,3)}},{key:"draw",value:function(t,e){var r,i=a(this.tippys);try{for(i.s();!(r=i.n()).done;)r.value.draw(t,e)}catch(t){i.e(t)}finally{i.f()}}}]),t}();function m(t){return(t-(s.nTerrainPts-1)/2)*s.groundDetailInterval}function S(t,e){var r=(t=Math.min(Math.max(t,-s.groundHalfWidth),s.groundHalfWidth))/s.groundDetailInterval,i=(s.nTerrainPts-1)/2,n=[Math.floor(r),Math.ceil(r)],a=n.map((function(t){return s.groundDetailInterval*t})),o=n.map((function(t){return e[t+i]}));if(a[1]==a[0])return o[0];var h=(o[1]-o[0])/(a[1]-a[0])*(t-a[0]);return o[0]+h}function _(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,i=new Array(e);r<e;r++)i[r]=t[r];return i}var P=null;onmessage=function(t){var e,r,s=(e=t.data,r=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var i,s,n,a,o=[],h=!0,l=!1;try{if(n=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;h=!1}else for(;!(h=(i=n.call(r)).done)&&(o.push(i.value),o.length!==e);h=!0);}catch(t){l=!0,s=t}finally{try{if(!h&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw s}}return o}}(e,r)||function(t,e){if(t){if("string"==typeof t)return _(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=s[0],a=s[1];if("terrainPts"==n)(0,i.A)().then((function(t){P=new b([0,0],1,a,t)}));else if("targetsSolutions"==n){var o=P.train(a);postMessage(["solutionsScores",o])}}},358:()=>{},1582:()=>{}},i={};function s(t){var e=i[t];if(void 0!==e)return e.exports;var n=i[t]={exports:{}};return r[t](n,n.exports,s),n.exports}s.m=r,s.x=()=>{var t=s.O(void 0,[942],(()=>s(106)));return s.O(t)},t=[],s.O=(e,r,i,n)=>{if(!r){var a=1/0;for(u=0;u<t.length;u++){for(var[r,i,n]=t[u],o=!0,h=0;h<r.length;h++)(!1&n||a>=n)&&Object.keys(s.O).every((t=>s.O[t](r[h])))?r.splice(h--,1):(o=!1,n<a&&(a=n));if(o){t.splice(u--,1);var l=i();void 0!==l&&(e=l)}}return e}n=n||0;for(var u=t.length;u>0&&t[u-1][2]>n;u--)t[u]=t[u-1];t[u]=[r,i,n]},s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.f={},s.e=t=>Promise.all(Object.keys(s.f).reduce(((e,r)=>(s.f[r](t,e),e)),[])),s.u=t=>t+".88acf90ed3186db51cc3.js",s.miniCssF=t=>{},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var e=s.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&(!t||!/^http(s?):/.test(t));)t=r[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t})(),(()=>{s.b=self.location+"";var t={912:1};s.f.i=(e,r)=>{t[e]||importScripts(s.p+s.u(e))};var e=self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[],r=e.push.bind(e);e.push=e=>{var[i,n,a]=e;for(var o in n)s.o(n,o)&&(s.m[o]=n[o]);for(a&&a(s);i.length;)t[i.pop()]=1;r(e)}})(),e=s.x,s.x=()=>s.e(942).then(e),s.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b0I5TSxFQUFFbUIsRUFBSSxDQUFDb04sRUFBU0ksS0FFL0J3QixFQUFnQjVCLElBRWxCaUIsY0FBYzFDLEVBQW9COUYsRUFBSThGLEVBQW9COEIsRUFBRUwsR0FFOUQsRUFHRCxJQUFJNkIsRUFBcUJGLEtBQXdDLGtDQUFJQSxLQUF3QyxtQ0FBSyxHQUM5R0csRUFBNkJELEVBQW1CdlEsS0FBS3lRLEtBQUtGLEdBQzlEQSxFQUFtQnZRLEtBdkJDc0csSUFDbkIsSUFBS29ILEVBQVVnRCxFQUFhQyxHQUFXckssRUFDdkMsSUFBSSxJQUFJNEcsS0FBWXdELEVBQ2hCekQsRUFBb0JzQixFQUFFbUMsRUFBYXhELEtBQ3JDRCxFQUFvQjFMLEVBQUUyTCxHQUFZd0QsRUFBWXhELElBSWhELElBREd5RCxHQUFTQSxFQUFRMUQsR0FDZFMsRUFBUzdRLFFBQ2R5VCxFQUFnQjVDLEVBQVNrRCxPQUFTLEVBQ25DSixFQUEyQmxLLEVBQUssQyxLWm5CN0J0TSxFQUFPaVQsRUFBb0JsRSxFQUMvQmtFLEVBQW9CbEUsRUFBSSxJQUNoQmtFLEVBQW9CL00sRUFBRSxLQUFLMk0sS0FBSzdTLEdhRGRpVCxFQUFvQmxFLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9ydW50aW1lL3N0YXJ0dXAgY2h1bmsgZGVwZW5kZW5jaWVzIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS8uL3NyYy9wYWdlcy90aXBweS9nbG9iYWxzLmpzIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS8uL3NyYy9wYWdlcy90aXBweS90aXBweS5qcyIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvLi9zcmMvcGFnZXMvdGlwcHkvd29ya2Vycy9zaW11bGF0aW9uLXdvcmtlci5qcyIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9ydW50aW1lL2ltcG9ydFNjcmlwdHMgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsInZhciBuZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy54O1xuX193ZWJwYWNrX3JlcXVpcmVfXy54ID0gKCkgPT4ge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKDk0MikudGhlbihuZXh0KTtcbn07IiwiZXhwb3J0IGNvbnN0IGdsb2JhbHMgPSB7XG4gIHc6IDgwMCxcbiAgaDogNDAwLFxuICBsSW5wdXRDb2RlczogW1wiQXJyb3dMZWZ0XCJdLFxuICBySW5wdXRDb2RlczogW1wiQXJyb3dSaWdodFwiXSxcbiAgeE9mZnM6IFstMC4zLCAtMC4xLCAwLjEsIDAuM10sXG4gIHRzOiAxLjAgLyA2MCxcbiAgLy8gc2luTGltOiAwLjMsXG4gIHNpbkxpbTogMC40LFxuICAvLyBkaXJlY3Rpb25TdGVwOiAwLjAyLFxuICBzaW5TdGVwOiAwLjAzLFxuICBzaW5EZWNheTogMC4wMSxcbiAgdmVsTGltOiA0LFxuICB2ZWxEZWNheTogMC4wMSxcbiAgZ3JvdW5kSGFsZldpZHRoOiAxMDAsXG4gIGdyb3VuZEZsYXRDZW50ZXJIYWxmV2lkdGg6IDEsXG4gIGdyb3VuZERldGFpbEludGVydmFsOiAwLjIsXG4gIC8vIG5UZXJyYWluUHRzOiAyICogKHRoaXMuZ3JvdW5kSGFsZldpZHRoIC8gdGhpcy5ncm91bmREZXRhaWxJbnRlcnZhbCkgKyAxLFxuICBnZXQgblRlcnJhaW5QdHMoKSB7XG4gICAgcmV0dXJuIDIgKiAodGhpcy5ncm91bmRIYWxmV2lkdGggLyB0aGlzLmdyb3VuZERldGFpbEludGVydmFsKSArIDFcbiAgfSxcbiAgd2FsbEg6IDAuOSxcbiAgd2FsbFc6IDAuNSxcbiAgLy8gc2xvcGVNYWc6IDAuMSxcbiAgc2xvcGVEZWNheTogMC45LFxuICBzbG9wZUxpbTogMC40LFxuICBzbG9wZURpZmZNYWc6IDAuMTI1LFxuICBzbG9wZURpZmZEZWNheTogMS4xLFxuICBzbG9wZURpZmZMaW06IDAuMixcbiAgZ2V0IGJhck1heCgpIHtcbiAgICBjb25zdCBsaW0gPSB0aGlzLnRhcmdldFR5cGUgPT0gXCJ2ZWxcIiA/IHRoaXMudmVsTGltIDogdGhpcy5zaW5MaW1cbiAgICByZXR1cm4gKDAuNSAqIDAuOSAqIHRoaXMudykgLyBsaW1cbiAgfSxcbiAgYmFySGVpZ2h0OiAyNSxcbiAgLy8gc2NvcmVEZW5vbUVwczogMC4wMSxcbiAgLy8gc2NvcmVEZW5vbUVwczogMC4xLFxuICBnZXQgc2NvcmVEZW5vbUVwcygpIHtcbiAgICByZXR1cm4gdGhpcy5zaW5MaW1cbiAgfSxcbiAgY3Jhc2hTaW5MaW1pdDogMC44LFxuICBtYXhUb3JxdWU6IDEuMCxcbiAgbldvcmtlcnM6IDgsXG4gIG11bHRpcGxpZXI6IDIsXG4gIGVwTGVuOiA4MDAsXG4gIHR3aXRjaGluZXNzZXM6IFswLCAwLjEsIDAuMDUsIDAuMDI1LCAwLjAxLCAwLjAwNSwgMC4wMDI1LCBudWxsXSxcbiAgY21hU2lnbWE6IDAuNSxcbiAgLy8gdGFyZ2V0VHlwZTogXCJzaW5cIixcbiAgdGFyZ2V0VHlwZTogXCJ2ZWxcIixcbn1cbiIsImltcG9ydCB7IGdsb2JhbHMgfSBmcm9tIFwiLi9nbG9iYWxzLmpzXCJcbmltcG9ydCB7IHJhbmRfbm9ybWFsIH0gZnJvbSBcIi4uLy4uL2pzL3JhbmQtbm9ybWFsLmpzXCJcblxuY2xhc3MgVGlwcHkge1xuICBjb25zdHJ1Y3Rvcih3aGVlbFBvc0luaXQsIHdvcmxkLCBiMiwgcG9wdWxhdGlvbikge1xuICAgIHRoaXMucG9wdWxhdGlvbiA9IHBvcHVsYXRpb25cbiAgICBjb25zb2xlLmFzc2VydCh3aGVlbFBvc0luaXQubGVuZ3RoID09IDIsIFwiVGlwcHkgcmVxdWlyZXMgMmQgd2hlZWxQb3NcIilcbiAgICAvLyB0aGlzLndoZWVsUG9zSW5pdCA9IHdoZWVsUG9zSW5pdC5zbGljZSgpXG4gICAgdGhpcy53aGVlbFIgPSAwLjI1XG4gICAgdGhpcy53aGVlbFBvc0luaXQgPSBbd2hlZWxQb3NJbml0WzBdLCB3aGVlbFBvc0luaXRbMV0gLSB0aGlzLndoZWVsUl1cbiAgICBjb25zdCB3aGVlbEZyaWN0aW9uID0gMC45LFxuICAgICAgd2hlZWxEZW5zaXR5ID0gMC41LFxuICAgICAgd2hlZWxSZXN0aXR1dGlvbiA9IDAuMSxcbiAgICAgIGNoYXNzaXNEZW5zaXR5ID0gMi4wXG4gICAgdGhpcy5jaGFzc2lzSCA9IDEuMFxuICAgIHRoaXMuY2hhc3Npc1cgPSAwLjNcbiAgICB0aGlzLmF4bGVPZmZzZXRZID0gMC4xXG5cbiAgICAvLyBjcmVhdGUgd2hlZWxcbiAgICB7XG4gICAgICBjb25zdCBiZCA9IG5ldyBiMi5iMkJvZHlEZWYoKVxuICAgICAgYmQuc2V0X3R5cGUoYjIuYjJfZHluYW1pY0JvZHkpXG4gICAgICBiZC5zZXRfcG9zaXRpb24obmV3IGIyLmIyVmVjMiguLi50aGlzLndoZWVsUG9zSW5pdCkpXG4gICAgICB0aGlzLndoZWVsQm9keSA9IHdvcmxkLkNyZWF0ZUJvZHkoYmQpXG5cbiAgICAgIGNvbnN0IHNoYXBlID0gbmV3IGIyLmIyQ2lyY2xlU2hhcGUoKVxuICAgICAgc2hhcGUuc2V0X21fcmFkaXVzKHRoaXMud2hlZWxSKVxuXG4gICAgICBjb25zdCBmZCA9IG5ldyBiMi5iMkZpeHR1cmVEZWYoKVxuICAgICAgZmQuc2V0X3NoYXBlKHNoYXBlKVxuICAgICAgZmQuc2V0X2RlbnNpdHkod2hlZWxEZW5zaXR5KVxuICAgICAgZmQuc2V0X2ZyaWN0aW9uKHdoZWVsRnJpY3Rpb24pXG4gICAgICBmZC5zZXRfcmVzdGl0dXRpb24od2hlZWxSZXN0aXR1dGlvbilcblxuICAgICAgY29uc3QgZmlsdGVyID0gZmQuZ2V0X2ZpbHRlcigpXG4gICAgICBmaWx0ZXIuc2V0X2NhdGVnb3J5Qml0cygweDAwMDIpXG4gICAgICBmaWx0ZXIuc2V0X21hc2tCaXRzKDB4MDAwMSlcbiAgICAgIGZkLnNldF9maWx0ZXIoZmlsdGVyKVxuICAgICAgY29uc3QgZml4dHVyZSA9IGIyLmNhc3RPYmplY3QoXG4gICAgICAgIHRoaXMud2hlZWxCb2R5LkNyZWF0ZUZpeHR1cmUoZmQpLFxuICAgICAgICBiMi5iMkZpeHR1cmVcbiAgICAgIClcbiAgICAgIGZpeHR1cmUucGFydFR5cGUgPSBcIndoZWVsXCJcbiAgICAgIGZpeHR1cmUuc3BvdCA9IHRoaXNcblxuICAgICAgdGhpcy53aGVlbE1hc3MgPSB0aGlzLndoZWVsQm9keS5HZXRNYXNzKClcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgY2hhc3Npc1xuICAgIHtcbiAgICAgIGNvbnN0IGVkZ2VYID0gMC41ICogdGhpcy5jaGFzc2lzVyxcbiAgICAgICAgZWRnZVkgPSAwLjUgKiB0aGlzLmNoYXNzaXNILFxuICAgICAgICBjdXRvdXRYID0gMC4yICogdGhpcy5jaGFzc2lzVyxcbiAgICAgICAgY3V0b3V0WSA9IDAuMzUgKiB0aGlzLmNoYXNzaXNIXG5cbiAgICAgIHRoaXMuY2hhc3Npc1ZlcnRpY2VzID0gW1xuICAgICAgICBbK2VkZ2VYLCAtZWRnZVldLFxuICAgICAgICBbLWVkZ2VYLCAtZWRnZVldLFxuICAgICAgICBbLWVkZ2VYLCArY3V0b3V0WV0sXG4gICAgICAgIFstY3V0b3V0WCwgK2VkZ2VZXSxcbiAgICAgICAgWytjdXRvdXRYLCArZWRnZVldLFxuICAgICAgICBbK2VkZ2VYLCArY3V0b3V0WV0sXG4gICAgICBdXG5cbiAgICAgIGNvbnN0IGIyQ2hhc3Npc1ZlcnRpY2VzID0gW11cbiAgICAgIGZvciAobGV0IHZlcnRleCBvZiB0aGlzLmNoYXNzaXNWZXJ0aWNlcykge1xuICAgICAgICBiMkNoYXNzaXNWZXJ0aWNlcy5wdXNoKFxuICAgICAgICAgIG5ldyBiMi5iMlZlYzIoXG4gICAgICAgICAgICB2ZXJ0ZXhbMF0gKyB0aGlzLndoZWVsUG9zSW5pdFswXSxcbiAgICAgICAgICAgIHZlcnRleFsxXSArIHRoaXMud2hlZWxQb3NJbml0WzFdXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hhc3Npc1Bvc0luaXQgPSBbXG4gICAgICAgIHRoaXMud2hlZWxQb3NJbml0WzBdLFxuICAgICAgICB0aGlzLndoZWVsUG9zSW5pdFsxXSAtIDAuNSAqIHRoaXMuY2hhc3Npc0ggKyB0aGlzLmF4bGVPZmZzZXRZLFxuICAgICAgXVxuICAgICAgY29uc3QgYmQgPSBuZXcgYjIuYjJCb2R5RGVmKClcbiAgICAgIGJkLnNldF90eXBlKGIyLmIyX2R5bmFtaWNCb2R5KVxuICAgICAgYmQuc2V0X3Bvc2l0aW9uKG5ldyBiMi5iMlZlYzIoLi4udGhpcy5jaGFzc2lzUG9zSW5pdCkpXG4gICAgICAvLyBiZC5zZXRfbGluZWFyRGFtcGluZygwLjEpXG4gICAgICAvLyBiZC5zZXRfYW5ndWxhckRhbXBpbmcoMC4xKVxuICAgICAgdGhpcy5jaGFzc2lzQm9keSA9IHdvcmxkLkNyZWF0ZUJvZHkoYmQpXG4gICAgICBjb25zdCBzaGFwZSA9IHRoaXMuYjJDcmVhdGVQb2x5Z29uU2hhcGUoYjJDaGFzc2lzVmVydGljZXMsIGIyKVxuICAgICAgY29uc3QgZmQgPSBuZXcgYjIuYjJGaXh0dXJlRGVmKClcbiAgICAgIGNvbnN0IGZpbHRlciA9IGZkLmdldF9maWx0ZXIoKVxuICAgICAgZmlsdGVyLnNldF9jYXRlZ29yeUJpdHMoMHgwMDAyKVxuICAgICAgZmlsdGVyLnNldF9tYXNrQml0cygweDAwMDEpXG4gICAgICBmZC5zZXRfZmlsdGVyKGZpbHRlcilcbiAgICAgIGZkLnNldF9kZW5zaXR5KGNoYXNzaXNEZW5zaXR5KVxuICAgICAgZmQuc2V0X3NoYXBlKHNoYXBlKVxuICAgICAgLy8gZmQuc2V0X2ZyaWN0aW9uKDAuMylcbiAgICAgIC8vIGZkLnNldF9yZXN0aXR1dGlvbigwLjEpXG4gICAgICBjb25zdCBmaXh0dXJlID0gYjIuY2FzdE9iamVjdChcbiAgICAgICAgdGhpcy5jaGFzc2lzQm9keS5DcmVhdGVGaXh0dXJlKGZkKSxcbiAgICAgICAgYjIuYjJGaXh0dXJlXG4gICAgICApXG4gICAgICBmaXh0dXJlLnBhcnRUeXBlID0gXCJjaGFzc2lzXCJcbiAgICAgIGZpeHR1cmUuc3BvdCA9IHRoaXNcbiAgICAgIHRoaXMuY2hhc3Npc01hc3MgPSB0aGlzLmNoYXNzaXNCb2R5LkdldE1hc3MoKVxuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBqb2ludFxuICAgIHtcbiAgICAgIGNvbnN0IGpkID0gbmV3IGIyLmIyUmV2b2x1dGVKb2ludERlZigpXG4gICAgICBqZC5Jbml0aWFsaXplKFxuICAgICAgICB0aGlzLndoZWVsQm9keSxcbiAgICAgICAgdGhpcy5jaGFzc2lzQm9keSxcbiAgICAgICAgbmV3IGIyLmIyVmVjMiguLi50aGlzLndoZWVsUG9zSW5pdClcbiAgICAgIClcblxuICAgICAgamQuc2V0X2VuYWJsZU1vdG9yKHRydWUpXG4gICAgICBqZC5zZXRfbWF4TW90b3JUb3JxdWUoZ2xvYmFscy5tYXhUb3JxdWUpXG4gICAgICB0aGlzLmF4bGUgPSBiMi5jYXN0T2JqZWN0KHdvcmxkLkNyZWF0ZUpvaW50KGpkKSwgYjIuYjJSZXZvbHV0ZUpvaW50KVxuICAgIH1cblxuICAgIHRoaXMuaW5wdXREaW0gPSB0aGlzLmdldElucHV0cygwKS5sZW5ndGhcbiAgICAvLyAvLyB0aGlzLnNoYXBlcyA9IFt0aGlzLmlucHV0RGltLCAxNiwgOCwgNF1cbiAgICAvLyAvLyB0aGlzLnNoYXBlcyA9IFt0aGlzLmlucHV0RGltLCAyMCwgMTAsIDRdXG4gICAgdGhpcy5zaGFwZXMgPSBbdGhpcy5pbnB1dERpbSwgMTIsIDgsIDFdXG5cbiAgICB0aGlzLm5fZGltID0gMFxuICAgIHRoaXMud2VpZ2h0Q291bnQgPSAwXG4gICAgdGhpcy5iaWFzQ291bnQgPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNoYXBlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGNvbnN0IG4gPSB0aGlzLnNoYXBlc1tpXSxcbiAgICAgICAgbSA9IHRoaXMuc2hhcGVzW2kgKyAxXVxuICAgICAgdGhpcy5uX2RpbSArPSAobiArIDEpICogbVxuICAgICAgdGhpcy53ZWlnaHRDb3VudCArPSBuICogbVxuICAgICAgdGhpcy5iaWFzQ291bnQgKz0gbVxuICAgIH1cblxuICAgIHRoaXMucmVzZXQoYjIpXG4gIH1cblxuICBiMkNyZWF0ZVBvbHlnb25TaGFwZSh2ZXJ0aWNlcywgYjIpIHtcbiAgICBjb25zdCBzaGFwZSA9IG5ldyBiMi5iMlBvbHlnb25TaGFwZSgpXG4gICAgY29uc3QgYnVmZmVyID0gYjIuX21hbGxvYyh2ZXJ0aWNlcy5sZW5ndGggKiA4KVxuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgYjIuSEVBUEYzMlsoYnVmZmVyICsgb2Zmc2V0KSA+PiAyXSA9IHZlcnRpY2VzW2ldLmdldF94KClcbiAgICAgIGIyLkhFQVBGMzJbKGJ1ZmZlciArIChvZmZzZXQgKyA0KSkgPj4gMl0gPSB2ZXJ0aWNlc1tpXS5nZXRfeSgpXG4gICAgICBvZmZzZXQgKz0gOFxuICAgIH1cbiAgICBjb25zdCBwdHJfd3JhcHBlZCA9IGIyLndyYXBQb2ludGVyKGJ1ZmZlciwgYjIuYjJWZWMyKVxuICAgIHNoYXBlLlNldChwdHJfd3JhcHBlZCwgdmVydGljZXMubGVuZ3RoKVxuICAgIHJldHVybiBzaGFwZVxuICB9XG5cbiAgc2V0V3RzKGZsYXRXdHMpIHtcbiAgICAvLyB0aGlzLmZsYXRXdHMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMubl9kaW0pLm1hcCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KVxuICAgIHRoaXMuZmxhdFd0cyA9IGZsYXRXdHNcbiAgICBsZXQgZmxhdFd0SWR4ID0gMFxuICAgIHRoaXMud2VpZ2h0cyA9IFtdXG4gICAgLy8gdGhpcy53ZWlnaHRDb3VudCA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2hhcGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgY29uc3QgbiA9IHRoaXMuc2hhcGVzW2ldLFxuICAgICAgICBtID0gdGhpcy5zaGFwZXNbaSArIDFdLFxuICAgICAgICBuZXdXZWlnaHQgPSBGbG9hdDMyQXJyYXkuZnJvbShcbiAgICAgICAgICB0aGlzLmZsYXRXdHMuc2xpY2UoZmxhdFd0SWR4LCBmbGF0V3RJZHggKyBuICogbSlcbiAgICAgICAgKVxuICAgICAgLy8gdGhpcy53ZWlnaHRDb3VudCArPSBuZXdXZWlnaHQubGVuZ3RoXG4gICAgICB0aGlzLndlaWdodHMucHVzaChuZXcgTWF0cml4KG5ld1dlaWdodCwgbiwgbSkpXG4gICAgICBmbGF0V3RJZHggKz0gbiAqIG1cbiAgICB9XG4gICAgdGhpcy5iaWFzZXMgPSBbXVxuICAgIC8vIHRoaXMuYmlhc0NvdW50ID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaGFwZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBjb25zdCBuID0gMSxcbiAgICAgICAgbSA9IHRoaXMuc2hhcGVzW2kgKyAxXSxcbiAgICAgICAgbmV3QmlhcyA9IEZsb2F0MzJBcnJheS5mcm9tKFxuICAgICAgICAgIHRoaXMuZmxhdFd0cy5zbGljZShmbGF0V3RJZHgsIGZsYXRXdElkeCArIG4gKiBtKVxuICAgICAgICApXG4gICAgICAvLyB0aGlzLmJpYXNDb3VudCArPSBuZXdCaWFzLmxlbmd0aFxuICAgICAgdGhpcy5iaWFzZXMucHVzaChuZXcgTWF0cml4KG5ld0JpYXMsIG4sIG0pKVxuICAgICAgZmxhdFd0SWR4ICs9IG4gKiBtXG4gICAgfVxuICB9XG5cbiAgcmVzZXQoYjIpIHtcbiAgICB0aGlzLmNoYXNzaXNCb2R5LlNldFRyYW5zZm9ybShuZXcgYjIuYjJWZWMyKC4uLnRoaXMuY2hhc3Npc1Bvc0luaXQpLCAwKVxuICAgIHRoaXMuY2hhc3Npc0JvZHkuU2V0TGluZWFyVmVsb2NpdHkobmV3IGIyLmIyVmVjMigwLCAwKSlcbiAgICB0aGlzLmNoYXNzaXNCb2R5LlNldEFuZ3VsYXJWZWxvY2l0eSgwKVxuICAgIHRoaXMuY2hhc3Npc0JvZHkuU2V0QXdha2UoMSlcblxuICAgIHRoaXMud2hlZWxCb2R5LlNldFRyYW5zZm9ybShuZXcgYjIuYjJWZWMyKC4uLnRoaXMud2hlZWxQb3NJbml0KSwgMClcbiAgICB0aGlzLndoZWVsQm9keS5TZXRMaW5lYXJWZWxvY2l0eShuZXcgYjIuYjJWZWMyKDAsIDApKVxuICAgIHRoaXMud2hlZWxCb2R5LlNldEFuZ3VsYXJWZWxvY2l0eSgwKVxuICAgIHRoaXMud2hlZWxCb2R5LlNldEF3YWtlKDEpXG5cbiAgICB0aGlzLnRhcmdldFNxRXJyU3VtID0gMFxuICAgIHRoaXMudGFyZ2V0UHJldiA9IG51bGxcblxuICAgIHRoaXMucHJldk91dHB1dCA9IDBcbiAgICB0aGlzLm91dHB1dERpZmZTcVN1bSA9IDBcblxuICAgIHRoaXMucHJldldoZWVsVmVsWCA9IDBcbiAgICB0aGlzLndoZWVsQWNjWCA9IDBcbiAgICB0aGlzLnByZXZDaGFzc2lzVmVsWCA9IDBcbiAgICB0aGlzLmNoYXNzaXNBY2NYID0gMFxuXG4gICAgdGhpcy5kcmlmdFhTcVN1bSA9IDBcbiAgICB0aGlzLmNyYXNoU3RlcENvdW50ID0gMFxuICB9XG5cbiAgdXBkYXRlVGFyZ2V0U2NvcmUodGFyZ2V0LCBjdXJyZW50KSB7XG4gICAgY29uc3QgZGlmZiA9IHRhcmdldCAtIGN1cnJlbnQsXG4gICAgICBkaWZmU3EgPSBkaWZmICogZGlmZixcbiAgICAgIGRlbm9tID0gTWF0aC5hYnModGFyZ2V0KSArIGdsb2JhbHMuc2NvcmVEZW5vbUVwc1xuICAgIC8vIHRoaXMudGFyZ2V0U3FFcnJTdW0gKz0gZGlmZlNxIC8gZGVub21cbiAgICB0aGlzLnRhcmdldFNxRXJyU3VtICs9IGdsb2JhbHMudGFyZ2V0VHlwZSA9PT0gXCJ2ZWxcIiA/IGRpZmZTcSA6IDFlMiAqIGRpZmZTcVxuICB9XG5cbiAgc2V0U3BlZWQoc3BlZWQpIHtcbiAgICB0aGlzLmF4bGUuU2V0TW90b3JTcGVlZChzcGVlZClcbiAgfVxuXG4gIGdldElucHV0cyh0YXJnZXQpIHtcbiAgICB0aGlzLnJldmVyc2UgPSB0YXJnZXQgIT0gMCA/IE1hdGguc2lnbih0YXJnZXQpIDogMVxuICAgIGxldCBpbnB1dHNcbiAgICBpZiAodGhpcy5pbnB1dERpbSAhPSBudWxsKSB7XG4gICAgICBpbnB1dHMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuaW5wdXREaW0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0cyA9IFtdXG4gICAgfVxuICAgIGxldCBpID0gMFxuICAgIC8vIGVsZXZhdGlvblxuICAgIGNvbnN0IHdoZWVsUG9zID0gdGhpcy53aGVlbEJvZHkuR2V0UG9zaXRpb24oKSxcbiAgICAgIHdoZWVsWCA9IHdoZWVsUG9zLmdldF94KCksXG4gICAgICB3aGVlbFkgPSB3aGVlbFBvcy5nZXRfeSgpXG4gICAgLy8gICBpbnRlcnBZID0gaW50ZXJwVGVycmFpblkod2hlZWxYLCB0aGlzLnBvcHVsYXRpb24udGVycmFpblB0cylcbiAgICAvLyB0aGlzLnlDbGVhcmFuY2UgPSBpbnRlcnBZIC0gd2hlZWxZIC0gdGhpcy53aGVlbFJcbiAgICAvLyBpbnB1dHNbaV0gPSB0aGlzLnlDbGVhcmFuY2VcbiAgICAvLyBpKytcbiAgICB0aGlzLmxpZGFyWXMgPSBbXVxuICAgIGZvciAobGV0IHhPZmYgb2YgZ2xvYmFscy54T2Zmcykge1xuICAgICAgY29uc3QgbGlkYXJZID1cbiAgICAgICAgaW50ZXJwVGVycmFpblkoXG4gICAgICAgICAgd2hlZWxYICsgdGhpcy5yZXZlcnNlICogeE9mZixcbiAgICAgICAgICB0aGlzLnBvcHVsYXRpb24udGVycmFpblB0c1xuICAgICAgICApIC1cbiAgICAgICAgd2hlZWxZIC1cbiAgICAgICAgdGhpcy53aGVlbFJcbiAgICAgIHRoaXMubGlkYXJZcy5wdXNoKGxpZGFyWSlcbiAgICAgIGlucHV0c1tpXSA9IGxpZGFyWVxuICAgICAgaSsrXG4gICAgfVxuXG4gICAgLy8gY2hhc3Npc1NpblxuICAgIGNvbnN0IGNoYXNzaXNTaW4gPSBNYXRoLnNpbih0aGlzLmNoYXNzaXNCb2R5LkdldEFuZ2xlKCkpXG4gICAgaW5wdXRzW2ldID0gdGhpcy5yZXZlcnNlICogY2hhc3Npc1NpblxuICAgIGkrK1xuICAgIGlmIChNYXRoLmFicyhjaGFzc2lzU2luKSA+IGdsb2JhbHMuY3Jhc2hTaW5MaW1pdCkge1xuICAgICAgdGhpcy5jcmFzaFN0ZXBDb3VudCsrXG4gICAgfVxuICAgIC8vIGNoYXNzaXNWZWxYLCBjaGFzc2lzVmVsWVxuICAgIGNvbnN0IGNoYXNzaXNWZWwgPSB0aGlzLmNoYXNzaXNCb2R5LkdldExpbmVhclZlbG9jaXR5KCksXG4gICAgICBjaGFzc2lzVmVsWCA9IGNoYXNzaXNWZWwuZ2V0X3goKVxuICAgIHRoaXMuY2hhc3Npc0FjY1ggPSBjaGFzc2lzVmVsWCAtIHRoaXMucHJldkNoYXNzaXNWZWxYXG4gICAgdGhpcy5wcmV2Q2hhc3Npc1ZlbFggPSBjaGFzc2lzVmVsWFxuICAgIC8vIGlucHV0c1tpXSA9IHRoaXMucmV2ZXJzZSAqIGNoYXNzaXNWZWwuZ2V0X3goKVxuICAgIC8vIGkrK1xuICAgIC8vIGlucHV0c1tpXSA9IGNoYXNzaXNWZWwuZ2V0X3koKVxuICAgIC8vIGkrK1xuICAgIC8vIGNoYXNzaXNBbmdWZWxcbiAgICBpZiAodGFyZ2V0ID09IDApIHtcbiAgICAgIHRoaXMuZHJpZnRYU3FTdW0gKz0gdGhpcy5jaGFzc2lzQWNjWCAqIHRoaXMuY2hhc3Npc0FjY1hcbiAgICB9XG4gICAgY29uc3QgY2hhc3Npc0FuZ1ZlbCA9IHRoaXMuY2hhc3Npc0JvZHkuR2V0QW5ndWxhclZlbG9jaXR5KClcbiAgICBpbnB1dHNbaV0gPSB0aGlzLnJldmVyc2UgKiBjaGFzc2lzQW5nVmVsXG4gICAgaSsrXG4gICAgLy8gd2hlZWxWZWxYLCB3aGVlbFZlbFlcbiAgICBjb25zdCB3aGVlbFZlbCA9IHRoaXMud2hlZWxCb2R5LkdldExpbmVhclZlbG9jaXR5KCksXG4gICAgICB3aGVlbFZlbFggPSB3aGVlbFZlbC5nZXRfeCgpXG4gICAgdGhpcy53aGVlbEFjY1ggPSB3aGVlbFZlbFggLSB0aGlzLnByZXZXaGVlbFZlbFhcbiAgICB0aGlzLnByZXZXaGVlbFZlbFggPSB3aGVlbFZlbFhcbiAgICBpbnB1dHNbaV0gPSB0aGlzLnJldmVyc2UgKiB3aGVlbFZlbFhcbiAgICBpKytcbiAgICBpbnB1dHNbaV0gPSB3aGVlbFZlbC5nZXRfeSgpXG4gICAgaSsrXG4gICAgLy8gd2hlZWxBbmdWZWxcbiAgICBjb25zdCB3aGVlbEFuZ1ZlbCA9IHRoaXMud2hlZWxCb2R5LkdldEFuZ3VsYXJWZWxvY2l0eSgpXG4gICAgaW5wdXRzW2ldID0gdGhpcy5yZXZlcnNlICogd2hlZWxBbmdWZWxcbiAgICBpKytcbiAgICBjb25zdCBheGxlUnhuID0gdGhpcy5heGxlLkdldFJlYWN0aW9uRm9yY2UoNjApXG4gICAgaW5wdXRzW2ldID0gMWUtMiAqIHRoaXMucmV2ZXJzZSAqIGF4bGVSeG4uZ2V0X3goKVxuICAgIGkrK1xuICAgIGlucHV0c1tpXSA9IDFlLTIgKiBheGxlUnhuLmdldF95KClcbiAgICBpKytcbiAgICAvLyB0YXJnZXRcbiAgICBpbnB1dHNbaV0gPSB0aGlzLnJldmVyc2UgKiB0YXJnZXRcbiAgICBpKytcblxuICAgIGlmICh0aGlzLnRhcmdldFByZXYgIT09IG51bGwpIHtcbiAgICAgIGlmIChnbG9iYWxzLnRhcmdldFR5cGUgPT09IFwic2luXCIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXRTY29yZSh0aGlzLnRhcmdldFByZXYsIGNoYXNzaXNTaW4pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldFNjb3JlKHRoaXMudGFyZ2V0UHJldiwgd2hlZWxWZWxYKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRhcmdldFByZXYgPSB0YXJnZXRcblxuICAgIHJldHVybiBpbnB1dHNcbiAgfVxuXG4gIHVwZGF0ZSh0YXJnZXQpIHtcbiAgICBjb25zdCBpbnB1dHNBcnJheSA9IHRoaXMuZ2V0SW5wdXRzKHRhcmdldClcbiAgICBjb25zdCBpbnB1dHNNYXRyaXggPSBuZXcgTWF0cml4KGlucHV0c0FycmF5LCAxLCBpbnB1dHNBcnJheS5sZW5ndGgpXG4gICAgY29uc3Qgb3V0cHV0UmF3ID0gaW5wdXRzTWF0cml4XG4gICAgICAvLyBjb25zdCBzcGVlZHMgPSBpbnB1dHNcbiAgICAgIC5tdWwodGhpcy53ZWlnaHRzWzBdKVxuICAgICAgLmFkZCh0aGlzLmJpYXNlc1swXSlcbiAgICAgIC8vIC5yZWx1KClcbiAgICAgIC8vIC5sZWFreVJlbHUoKVxuICAgICAgLmxlYWt5RWx1KClcbiAgICAgIC5tdWwodGhpcy53ZWlnaHRzWzFdKVxuICAgICAgLmFkZCh0aGlzLmJpYXNlc1sxXSlcbiAgICAgIC8vIC5yZWx1KClcbiAgICAgIC8vIC5sZWFreVJlbHUoKVxuICAgICAgLmxlYWt5RWx1KClcbiAgICAgIC5tdWwodGhpcy53ZWlnaHRzWzJdKVxuICAgICAgLmFkZCh0aGlzLmJpYXNlc1syXSkuZGF0YVswXVxuXG4gICAgLy8gY29uc3QgcmV2ZXJzZSA9IHRhcmdldCAhPSAwID8gTWF0aC5zaWduKHRhcmdldCkgOiAxLFxuICAgIGNvbnN0IG91dHB1dCA9IHRoaXMucmV2ZXJzZSAqIG91dHB1dFJhd1xuICAgIHRoaXMuc2V0U3BlZWQob3V0cHV0KVxuXG4gICAgY29uc3Qgb3V0cHV0RGlmZiA9IG91dHB1dCAtIHRoaXMucHJldk91dHB1dFxuICAgIHRoaXMub3V0cHV0RGlmZlNxU3VtICs9IG91dHB1dERpZmYgKiBvdXRwdXREaWZmXG4gICAgdGhpcy5wcmV2T3V0cHV0ID0gb3V0cHV0XG4gIH1cblxuICBnZXQgZHJhd1Bvc2l0aW9uRGF0YSgpIHtcbiAgICAvLyByZXR1cm4ge1xuICAgIC8vICAgd2hlZWxQb3NDdXJyZW50OiB0aGlzLndoZWVsQm9keS5HZXRQb3NpdGlvbigpLFxuICAgIC8vICAgd2hlZWxBbmdsZUN1cnJlbnQ6IHRoaXMud2hlZWxCb2R5LkdldEFuZ2xlKCksXG4gICAgLy8gICBjaGFzc2lzUG9zQ3VycmVudDogdGhpcy5jaGFzc2lzQm9keS5HZXRQb3NpdGlvbigpLFxuICAgIC8vICAgY2hhc3Npc0FuZ2xlQ3VycmVudDogdGhpcy5jaGFzc2lzQm9keS5HZXRBbmdsZSgpLFxuICAgIC8vIH1cbiAgICBjb25zdCB3aGVlbFBvcyA9IHRoaXMud2hlZWxCb2R5LkdldFBvc2l0aW9uKCksXG4gICAgICBjaGFzc2lzUG9zID0gdGhpcy5jaGFzc2lzQm9keS5HZXRQb3NpdGlvbigpXG4gICAgcmV0dXJuIHtcbiAgICAgIHdoZWVsUG9zQ3VycmVudDogW3doZWVsUG9zLmdldF94KCksIHdoZWVsUG9zLmdldF95KCldLFxuICAgICAgd2hlZWxBbmdsZUN1cnJlbnQ6IHRoaXMud2hlZWxCb2R5LkdldEFuZ2xlKCksXG4gICAgICBjaGFzc2lzUG9zQ3VycmVudDogW2NoYXNzaXNQb3MuZ2V0X3goKSwgY2hhc3Npc1Bvcy5nZXRfeSgpXSxcbiAgICAgIGNoYXNzaXNBbmdsZUN1cnJlbnQ6IHRoaXMuY2hhc3Npc0JvZHkuR2V0QW5nbGUoKSxcbiAgICB9XG4gIH1cblxuICBnZXQgY29yckRhdGEoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIE1hdGguc2luKHRoaXMuY2hhc3Npc0JvZHkuR2V0QW5nbGUoKSksXG4gICAgICB0aGlzLndoZWVsQWNjWCxcbiAgICAgIHRoaXMuY2hhc3Npc0FjY1gsXG4gICAgXVxuICB9XG5cbiAgLy8gc2xlZXAoKSB7XG4gIC8vICAgZm9yIChsZXQgYm9keSBvZiBbXG4gIC8vICAgICB0aGlzLmNoYXNzaXNCb2R5LFxuICAvLyAgICAgdGhpcy51cHBlckZvcmVsZWdCb2R5LFxuICAvLyAgICAgdGhpcy5sb3dlckZvcmVsZWdCb2R5LFxuICAvLyAgICAgdGhpcy51cHBlckhpbmRsZWdCb2R5LFxuICAvLyAgICAgdGhpcy5sb3dlckhpbmRsZWdCb2R5LFxuICAvLyAgIF0pIHtcbiAgLy8gICAgIGJvZHkuU2V0QXdha2UoMClcbiAgLy8gICAgIC8vIGJvZHkuU2V0RW5hYmxlZCgwKVxuICAvLyAgIH1cbiAgLy8gfVxufVxuXG5jbGFzcyBNYXRyaXgge1xuICBjb25zdHJ1Y3RvcihkYXRhLCBtLCBuKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YVxuICAgIHRoaXMubSA9IG1cbiAgICB0aGlzLm4gPSBuXG4gIH1cblxuICBtdWwob3RoZXIpIHtcbiAgICBjb25zdCBhID0gdGhpcy5kYXRhLFxuICAgICAgYiA9IG90aGVyLmRhdGEsXG4gICAgICBtID0gdGhpcy5tLFxuICAgICAgbiA9IHRoaXMubixcbiAgICAgIHAgPSBvdGhlci5uLFxuICAgICAgYyA9IG5ldyBGbG9hdDMyQXJyYXkobmV3IEFycmF5QnVmZmVyKDQgKiBtICogcCkpXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwOyBqKyspIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgIGxldCBzdW0gPSAwXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICAgICAgc3VtICs9IGFbaSAqIG4gKyBrXSAqIGJbayAqIHAgKyBqXVxuICAgICAgICB9XG4gICAgICAgIGNbaSAqIHAgKyBqXSA9IHN1bVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdHJpeChjLCBtLCBwKVxuICB9XG5cbiAgYWRkKG90aGVyKSB7XG4gICAgY29uc3QgYSA9IHRoaXMuZGF0YSxcbiAgICAgIGIgPSBvdGhlci5kYXRhLFxuICAgICAgbCA9IGEubGVuZ3RoLFxuICAgICAgYyA9IG5ldyBGbG9hdDMyQXJyYXkobmV3IEFycmF5QnVmZmVyKDQgKiBsKSlcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY1tpXSA9IGFbaV0gKyBiW2ldXG4gICAgfVxuICAgIHJldHVybiBuZXcgTWF0cml4KGMsIHRoaXMubSwgdGhpcy5uKVxuICB9XG5cbiAgcmVsdSgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5kYXRhLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IE1hdGgubWF4KDAsIHJlc3VsdFtpXSlcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgocmVzdWx0LCB0aGlzLm0sIHRoaXMubilcbiAgfVxuXG4gIGxlYWt5UmVsdSgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5kYXRhLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IE1hdGgubWF4KDAuMSAqIHJlc3VsdFtpXSwgcmVzdWx0W2ldKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdHJpeChyZXN1bHQsIHRoaXMubSwgdGhpcy5uKVxuICB9XG5cbiAgZWx1KCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLmRhdGEubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gdGhpcy5kYXRhLnNsaWNlKClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgaWYgKHJlc3VsdFtpXSA8IDApIHtcbiAgICAgICAgcmVzdWx0W2ldID0gTWF0aC5leHBtMShyZXN1bHRbaV0pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTWF0cml4KHJlc3VsdCwgdGhpcy5tLCB0aGlzLm4pXG4gIH1cblxuICBsZWFreUVsdSgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5kYXRhLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgIGlmIChyZXN1bHRbaV0gPCAwKSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IE1hdGguZXhwbTEocmVzdWx0W2ldKSArIDAuMSAqIHJlc3VsdFtpXVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdHJpeChyZXN1bHQsIHRoaXMubSwgdGhpcy5uKVxuICB9XG59XG5cbmZ1bmN0aW9uIHZlY3Rvck5vcm1zKHZlY3RvcnMpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheSh2ZWN0b3JzLmxlbmd0aCkuZmlsbCgwKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB2ZWN0b3IgPSB2ZWN0b3JzW2ldLmRhdGFcbiAgICBmb3IgKGxldCB4IG9mIHZlY3Rvcikge1xuICAgICAgcmVzdWx0W2ldICs9IHggKiB4XG4gICAgfVxuICAgIC8vIHJlc3VsdFtpXSA9IE1hdGguc3FydChyZXN1bHRbaV0pXG4gICAgcmVzdWx0W2ldIC89IHZlY3Rvci5sZW5ndGhcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHJvd05vcm1UaGluZ3kobWF0KSB7XG4gIC8vIG06IHJvdyBjb3VudCwgbjogY29sdW1uIGNvdW50XG4gIGNvbnN0IHJvd0NvdW50ID0gbWF0Lm0sXG4gICAgY29sQ291bnQgPSBtYXQublxuICBsZXQgc3VtQWxsID0gMFxuICBjb25zdCByb3dTdW1zID0gbmV3IEZsb2F0MzJBcnJheShyb3dDb3VudCkuZmlsbCgwKSxcbiAgICBjb2xTdW1zID0gbmV3IEZsb2F0MzJBcnJheShjb2xDb3VudCkuZmlsbCgwKVxuICAvLyByb3cgaWR4XG4gIGZvciAobGV0IHJvd0lkeCA9IDA7IHJvd0lkeCA8IHJvd0NvdW50OyByb3dJZHgrKykge1xuICAgIC8vIGNvbCBpZHhcbiAgICBmb3IgKGxldCBjb2xJZHggPSAwOyBjb2xJZHggPCBjb2xDb3VudDsgY29sSWR4KyspIHtcbiAgICAgIGNvbnN0IHZhbCA9IG1hdC5kYXRhW3Jvd0lkeCAqIGNvbENvdW50ICsgY29sSWR4XSxcbiAgICAgICAgdmFsU3EgPSB2YWwgKiB2YWxcbiAgICAgIC8vIHJvd1N1bXNbcm93SWR4XSArPSBNYXRoLmFicyh2YWwpXG4gICAgICByb3dTdW1zW3Jvd0lkeF0gKz0gdmFsU3FcbiAgICAgIC8vIGNvbFN1bXNbY29sSWR4XSArPSBNYXRoLmFicyh2YWwpXG4gICAgICBjb2xTdW1zW2NvbElkeF0gKz0gdmFsU3FcbiAgICAgIHN1bUFsbCArPSB2YWxTcVxuICAgIH1cbiAgfVxuICBzdW1BbGwgLz0gcm93Q291bnQgKiBjb2xDb3VudFxuICBsZXQgc3VtUm93cyA9IDBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dDb3VudDsgaSsrKSB7XG4gICAgY29uc3QgdmFsID0gcm93U3Vtc1tpXSAvIGNvbENvdW50XG4gICAgc3VtUm93cyArPSB2YWwgKiB2YWxcbiAgfVxuICBzdW1Sb3dzIC89IHJvd0NvdW50XG4gIGxldCBzdW1Db2xzID0gMFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbENvdW50OyBpKyspIHtcbiAgICBjb25zdCB2YWwgPSBjb2xTdW1zW2ldIC8gcm93Q291bnRcbiAgICBzdW1Db2xzICs9IHZhbCAqIHZhbFxuICB9XG4gIHN1bUNvbHMgLz0gY29sQ291bnRcblxuICAvLyByZXR1cm4gc3VtQWxsICsgMC4xICogc3VtUm93cyArIDEuMCAqIHN1bUNvbHNcbiAgcmV0dXJuIHN1bUFsbFxufVxuXG5leHBvcnQgY2xhc3MgUG9wdWxhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHdoZWVsUG9zSW5pdCwgblRpcHB5cywgdGVycmFpblB0cywgYjIpIHtcbiAgICB0aGlzLndoZWVsUG9zSW5pdCA9IHdoZWVsUG9zSW5pdC5zbGljZSgpXG5cbiAgICB7XG4gICAgICBjb25zdCBncmF2aXR5ID0gbmV3IGIyLmIyVmVjMigwLCA5LjgxKVxuICAgICAgdGhpcy53b3JsZCA9IG5ldyBiMi5iMldvcmxkKGdyYXZpdHkpXG4gICAgfVxuXG4gICAgdGhpcy5iMiA9IGIyXG4gICAgdGhpcy50ZXJyYWluUHRzID0gdGVycmFpblB0c1xuXG4gICAgLy8gYWRkIGdyb3VuZFxuICAgIHtcbiAgICAgIGNvbnN0IGdyb3VuZEJvZHkgPSB0aGlzLndvcmxkLkNyZWF0ZUJvZHkobmV3IGIyLmIyQm9keURlZigpKVxuXG4gICAgICBjb25zdCB0ZXJyYWluUHRzRmlsdGVyZWQgPSBbXVxuICAgICAgbGV0IHlEaWZmUHJldlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnbG9iYWxzLm5UZXJyYWluUHRzOyBpKyspIHtcbiAgICAgICAgY29uc3QgeURpZmZDdXJyID0gdGVycmFpblB0c1tpICsgMV0gLSB0ZXJyYWluUHRzW2ldLFxuICAgICAgICAgIHNhbWVTbG9wZSA9IHlEaWZmQ3VyciA9PSB5RGlmZlByZXZcbiAgICAgICAgeURpZmZQcmV2ID0geURpZmZDdXJyXG4gICAgICAgIGlmIChzYW1lU2xvcGUgJiYgaSAhPSBnbG9iYWxzLm5UZXJyYWluUHRzIC0gMSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgdGVycmFpblB0c0ZpbHRlcmVkLnB1c2goW3RlcnJhaW5JZHhUb1hQb3MoaSksIHRlcnJhaW5QdHNbaV1dKVxuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2codGVycmFpblB0c0ZpbHRlcmVkLmxlbmd0aCwgZ2xvYmFscy5uVGVycmFpblB0cylcbiAgICAgIC8vIHJldmVyc2VkIGxvb3AgZm9yIENDVyB3aW5kaW5nIG9yZGVyIChCb3gyRClcbiAgICAgIGZvciAobGV0IGkgPSB0ZXJyYWluUHRzRmlsdGVyZWQubGVuZ3RoIC0gMTsgaSA+PSAxOyBpLS0pIHtcbiAgICAgICAgY29uc3QgZWRnZVNoYXBlID0gbmV3IGIyLmIyRWRnZVNoYXBlKClcbiAgICAgICAgZWRnZVNoYXBlLlNldFR3b1NpZGVkKFxuICAgICAgICAgIG5ldyBiMi5iMlZlYzIodGVycmFpblB0c0ZpbHRlcmVkW2ldWzBdLCB0ZXJyYWluUHRzRmlsdGVyZWRbaV1bMV0pLFxuICAgICAgICAgIG5ldyBiMi5iMlZlYzIoXG4gICAgICAgICAgICB0ZXJyYWluUHRzRmlsdGVyZWRbaSAtIDFdWzBdLFxuICAgICAgICAgICAgdGVycmFpblB0c0ZpbHRlcmVkW2kgLSAxXVsxXVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBncm91bmRGRCA9IG5ldyBiMi5iMkZpeHR1cmVEZWYoKVxuICAgICAgICBncm91bmRGRC5zZXRfc2hhcGUoZWRnZVNoYXBlKVxuICAgICAgICBncm91bmRGRC5zZXRfZnJpY3Rpb24oMC45KVxuICAgICAgICBncm91bmRGRC5zZXRfcmVzdGl0dXRpb24oMC4xKVxuICAgICAgICBjb25zdCBncm91bmRGaXh0dXJlID0gYjIuY2FzdE9iamVjdChcbiAgICAgICAgICBncm91bmRCb2R5LkNyZWF0ZUZpeHR1cmUoZ3JvdW5kRkQpLFxuICAgICAgICAgIGIyLmIyRml4dHVyZVxuICAgICAgICApXG4gICAgICB9XG4gICAgICAvLyBhZGQgd2FsbHNcbiAgICAgIGZvciAoY29uc3QgaWR4IG9mIFswLCBnbG9iYWxzLm5UZXJyYWluUHRzIC0gMV0pIHtcbiAgICAgICAgY29uc3QgW3gsIHldID0gW3RlcnJhaW5JZHhUb1hQb3MoaWR4KSwgdGVycmFpblB0c1tpZHhdXVxuICAgICAgICBjb25zdCBlZGdlU2hhcGUgPSBuZXcgYjIuYjJFZGdlU2hhcGUoKVxuICAgICAgICBlZGdlU2hhcGUuU2V0VHdvU2lkZWQoXG4gICAgICAgICAgbmV3IGIyLmIyVmVjMih4LCB5KSxcbiAgICAgICAgICBuZXcgYjIuYjJWZWMyKHgsIHkgLSBnbG9iYWxzLndhbGxIKVxuICAgICAgICApXG4gICAgICAgIGNvbnN0IGdyb3VuZEZEID0gbmV3IGIyLmIyRml4dHVyZURlZigpXG4gICAgICAgIGdyb3VuZEZELnNldF9zaGFwZShlZGdlU2hhcGUpXG4gICAgICAgIGdyb3VuZEZELnNldF9mcmljdGlvbigwLjkpXG4gICAgICAgIGdyb3VuZEZELnNldF9yZXN0aXR1dGlvbigwLjEpXG4gICAgICAgIGNvbnN0IGdyb3VuZEZpeHR1cmUgPSBiMi5jYXN0T2JqZWN0KFxuICAgICAgICAgIGdyb3VuZEJvZHkuQ3JlYXRlRml4dHVyZShncm91bmRGRCksXG4gICAgICAgICAgYjIuYjJGaXh0dXJlXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50aXBweXMgPSBbXVxuICAgIHRoaXMuYWRkVGlwcHlzKG5UaXBweXMpXG4gICAgdGhpcy5uX2RpbSA9IHRoaXMudGlwcHlzWzBdLm5fZGltXG4gIH1cblxuICByZXNldCgpIHtcbiAgICBmb3IgKGxldCB0aXBweSBvZiB0aGlzLnRpcHB5cykge1xuICAgICAgdGlwcHkucmVzZXQodGhpcy5iMilcbiAgICB9XG4gIH1cblxuICBhZGRUaXBweXMoblRpcHB5cykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgblRpcHB5czsgaSsrKSB7XG4gICAgICB0aGlzLnRpcHB5cy5wdXNoKG5ldyBUaXBweSh0aGlzLndoZWVsUG9zSW5pdCwgdGhpcy53b3JsZCwgdGhpcy5iMiwgdGhpcykpXG4gICAgfVxuICB9XG5cbiAgc2V0V3RzKGZsYXRXdHMpIHtcbiAgICBsZXQgZmxhdFd0c0lkeCA9IDBcbiAgICBmb3IgKGxldCB0aXBweSBvZiB0aGlzLnRpcHB5cykge1xuICAgICAgdGlwcHkuc2V0V3RzKGZsYXRXdHMuc2xpY2UoZmxhdFd0c0lkeCwgZmxhdFd0c0lkeCArIHRoaXMubl9kaW0pKVxuICAgICAgZmxhdFd0c0lkeCArPSB0aGlzLm5fZGltXG4gICAgfVxuICB9XG5cbiAgdHJhaW4oeyB0YXJnZXRzLCBzb2x1dGlvbnMgfSkge1xuICAgIC8vIGFzc2lnbiBzb2x1dGlvbiBhbmQgdGFyZ2V0IHRvIGVhY2ggdGlwcHlcbiAgICBjb25zdCBuU29sdXRpb25zID0gc29sdXRpb25zLmxlbmd0aCAvIHRoaXMubl9kaW1cbiAgICBpZiAodGhpcy50aXBweXMubGVuZ3RoIDwgblNvbHV0aW9ucyAqIHRhcmdldHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFkZFRpcHB5cyhuU29sdXRpb25zICogdGFyZ2V0cy5sZW5ndGggLSB0aGlzLnRpcHB5cy5sZW5ndGgpXG4gICAgfVxuICAgIGxldCBmbGF0V3RzSWR4ID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgblNvbHV0aW9uczsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRhcmdldHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgdGlwcHkgPSB0aGlzLnRpcHB5c1tpICogdGFyZ2V0cy5sZW5ndGggKyBqXVxuICAgICAgICB0aXBweS5zZXRXdHMoc29sdXRpb25zLnNsaWNlKGZsYXRXdHNJZHgsIGZsYXRXdHNJZHggKyB0aGlzLm5fZGltKSlcbiAgICAgICAgdGlwcHkudGFyZ2V0SWR4ID0galxuICAgICAgfVxuICAgICAgZmxhdFd0c0lkeCArPSB0aGlzLm5fZGltXG4gICAgfVxuICAgIC8vIHNpbXVsYXRlIHVzaW5nIG9uZSB0YXJnZXQgcGVyIHNvbHV0aW9uXG4gICAgdGhpcy5yZXNldCgpXG4gICAgZm9yIChsZXQgc3RlcCA9IDA7IHN0ZXAgPCB0YXJnZXRzWzBdLmxlbmd0aDsgc3RlcCsrKSB7XG4gICAgICBmb3IgKGxldCB0aXBweSBvZiB0aGlzLnRpcHB5cykge1xuICAgICAgICB0aXBweS51cGRhdGUodGFyZ2V0c1t0aXBweS50YXJnZXRJZHhdW3N0ZXBdKVxuICAgICAgfVxuICAgICAgdGhpcy53b3JsZC5TdGVwKGdsb2JhbHMudHMsIDgsIDMpXG4gICAgfVxuICAgIC8vIHNjb3JlIHNvbHV0aW9ucyBhZnRlciBzaW11bGF0aW9uXG4gICAgY29uc3Qgc29sdXRpb25zU2NvcmVzID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5Tb2x1dGlvbnM7IGkrKykge1xuICAgICAgY29uc3QgdGlwcHkwID0gdGhpcy50aXBweXNbaSAqIHRhcmdldHMubGVuZ3RoXSxcbiAgICAgICAgc29sdXRpb24gPSB0aXBweTAuZmxhdFd0c1xuICAgICAgbGV0IHd0c05vcm0gPSAwXG4gICAgICBmb3IgKGxldCB3dExheWVyIG9mIHRpcHB5MC53ZWlnaHRzKSB7XG4gICAgICAgIGZvciAobGV0IHd0IG9mIHd0TGF5ZXIuZGF0YSkge1xuICAgICAgICAgIHd0c05vcm0gKz0gd3QgKiB3dFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3dHNOb3JtIC89IHRpcHB5MC53ZWlnaHRDb3VudFxuICAgICAgbGV0IGJpYXNOb3JtID0gMFxuICAgICAgZm9yIChsZXQgYmlhc0xheWVyIG9mIHRpcHB5MC5iaWFzZXMpIHtcbiAgICAgICAgZm9yIChsZXQgYmlhcyBvZiBiaWFzTGF5ZXIuZGF0YSkge1xuICAgICAgICAgIGJpYXNOb3JtICs9IGJpYXMgKiBiaWFzXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJpYXNOb3JtIC89IHRpcHB5MC5iaWFzQ291bnRcbiAgICAgIGNvbnN0IHRhc2tTY29yZXMgPSBbXVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0YXJnZXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IHRhc2tUaXBweSA9IHRoaXMudGlwcHlzW2kgKiB0YXJnZXRzLmxlbmd0aCArIGpdLFxuICAgICAgICAgIG1zZSA9IHRhc2tUaXBweS50YXJnZXRTcUVyclN1bSAvIGdsb2JhbHMuZXBMZW4sXG4gICAgICAgICAgY3Jhc2hlZFJhdGlvID0gdGFza1RpcHB5LmNyYXNoU3RlcENvdW50IC8gZ2xvYmFscy5lcExlbixcbiAgICAgICAgICBkcmlmdFggPSB0YXNrVGlwcHkuZHJpZnRYU3FTdW0gLyBnbG9iYWxzLmVwTGVuXG4gICAgICAgIHRhc2tTY29yZXMucHVzaCh7IG1zZSwgY3Jhc2hlZFJhdGlvLCBkcmlmdFggfSlcbiAgICAgIH1cbiAgICAgIC8vIHNvbHV0aW9uc1Njb3Jlcy5wdXNoKHsgc29sdXRpb24sIHNjb3JlIH0pXG4gICAgICBzb2x1dGlvbnNTY29yZXMucHVzaCh7IHNvbHV0aW9uLCB3dHNOb3JtLCBiaWFzTm9ybSwgdGFza1Njb3JlcyB9KVxuICAgIH1cbiAgICByZXR1cm4gc29sdXRpb25zU2NvcmVzXG4gIH1cblxuICB1cGRhdGUodGFyZ2V0cykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50aXBweXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRpcHB5ID0gdGhpcy50aXBweXNbaV1cbiAgICAgIHRpcHB5LnVwZGF0ZSh0YXJnZXRzW2ldKVxuICAgIH1cbiAgICB0aGlzLndvcmxkLlN0ZXAoZ2xvYmFscy50cywgOCwgMylcbiAgfVxuXG4gIGRyYXcoc2NhbGUsIGNlbnRlcikge1xuICAgIGZvciAobGV0IHRpcHB5IG9mIHRoaXMudGlwcHlzKSB7XG4gICAgICB0aXBweS5kcmF3KHNjYWxlLCBjZW50ZXIpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVEaXJlY3Rpb24obGQsIHJkLCBfdGFyZ2V0U2luLCBfdGFyZ2V0VmVsKSB7XG4gIC8vIG5vIGNoYW5nZSBpZiBib3RoIGtleXMgZG93blxuICBsZXQgdGFyZ2V0U2luID0gX3RhcmdldFNpbixcbiAgICB0YXJnZXRWZWwgPSBfdGFyZ2V0VmVsXG4gIGlmIChsZCAmJiByZCkge1xuICAgIHJldHVybiBbdGFyZ2V0U2luLCB0YXJnZXRWZWxdXG4gIH1cbiAgLy8gZGVjYXkgc2luIHRvd2FyZCB6ZXJvXG4gIGlmICh0YXJnZXRTaW4gIT0gMCkge1xuICAgIGlmIChNYXRoLmFicyh0YXJnZXRTaW4pIDwgZ2xvYmFscy5zaW5EZWNheSkge1xuICAgICAgdGFyZ2V0U2luID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRTaW4gLT0gTWF0aC5zaWduKHRhcmdldFNpbikgKiBnbG9iYWxzLnNpbkRlY2F5XG4gICAgfVxuICB9XG4gIC8vIGNoYW5nZSBpZiBvbmx5IG9uZSBrZXlcbiAgLy8gYW5kIGxpbWl0IG91dHB1dFxuICBpZiAobGQpIHtcbiAgICB0YXJnZXRTaW4gLT0gZ2xvYmFscy5zaW5TdGVwXG4gICAgaWYgKHRhcmdldFNpbiA8IC1nbG9iYWxzLnNpbkxpbSkge1xuICAgICAgdGFyZ2V0U2luID0gLWdsb2JhbHMuc2luTGltXG4gICAgfVxuICB9IGVsc2UgaWYgKHJkKSB7XG4gICAgdGFyZ2V0U2luICs9IGdsb2JhbHMuc2luU3RlcFxuICAgIGlmICh0YXJnZXRTaW4gPiBnbG9iYWxzLnNpbkxpbSkge1xuICAgICAgdGFyZ2V0U2luID0gZ2xvYmFscy5zaW5MaW1cbiAgICB9XG4gIH1cbiAgLy8gZGVjYXkgdmVsIHRvd2FyZCB6ZXJvXG4gIGlmICh0YXJnZXRWZWwgIT0gMCkge1xuICAgIGlmIChNYXRoLmFicyh0YXJnZXRWZWwpIDwgZ2xvYmFscy52ZWxEZWNheSkge1xuICAgICAgdGFyZ2V0VmVsID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRWZWwgLT0gTWF0aC5zaWduKHRhcmdldFZlbCkgKiBnbG9iYWxzLnZlbERlY2F5XG4gICAgfVxuICB9XG5cbiAgdGFyZ2V0VmVsICs9IDAuMTAyICogdGFyZ2V0U2luXG4gIGlmICh0YXJnZXRWZWwgPiBnbG9iYWxzLnZlbExpbSkge1xuICAgIHRhcmdldFZlbCA9IGdsb2JhbHMudmVsTGltXG4gIH0gZWxzZSBpZiAodGFyZ2V0VmVsIDwgLWdsb2JhbHMudmVsTGltKSB7XG4gICAgdGFyZ2V0VmVsID0gLWdsb2JhbHMudmVsTGltXG4gIH1cbiAgLy8gLy8gdXBkYXRlIHRlc3QgdHJpZ29ub21ldHJ5XG4gIC8vIGlmICh0YXJnZXRTaW4gIT0gdGFyZ2V0RGlyZWN0aW9uQmVmb3JlKSB7XG4gIC8vICAgdGFyZ2V0QW5nbGUgPSBNYXRoLmFzaW4odGFyZ2V0U2luKVxuICAvLyAgIHRhcmdldENvcyA9IE1hdGguY29zKHRhcmdldEFuZ2xlKVxuICAvLyB9XG4gIHJldHVybiBbdGFyZ2V0U2luLCB0YXJnZXRWZWxdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVRlcnJhaW5QdHMoKSB7XG4gIGZ1bmN0aW9uIHRlcnJhaW5MUk9iamVjdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2xvcGVEaWZmOiAwLFxuICAgICAgc2xvcGU6IDAsXG4gICAgICB5OiAwLFxuICAgICAgeDogZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbCxcbiAgICAgIHhJZHg6IDEsXG4gICAgICAvLyByYW5kVmFsczogcmFuZF9ub3JtYWwoZ2xvYmFscy5ncm91bmRIYWxmV2lkdGggLyBnbG9iYWxzLmdyb3VuZERldGFpbEludGVydmFsIC0gMSksXG4gICAgICAvLyBpZHg6IDAsXG4gICAgICB5czogW10sXG4gICAgICB1cGRhdGVTbG9wZSgpIHtcbiAgICAgICAgaWYgKHRoaXMueCA8PSBnbG9iYWxzLmdyb3VuZEZsYXRDZW50ZXJIYWxmV2lkdGgpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnNsb3BlRGlmZiArPSBnbG9iYWxzLnNsb3BlRGlmZk1hZyAqIHRoaXMucmFuZFZhbHNbdGhpcy5pZHhdXG4gICAgICAgIHRoaXMuc2xvcGVEaWZmICs9IGdsb2JhbHMuc2xvcGVEaWZmTWFnICogcmFuZF9ub3JtYWwoMSlbMF1cbiAgICAgICAgLy8gdGhpcy5pZHgrK1xuICAgICAgICB0aGlzLnNsb3BlRGlmZiAqPSBnbG9iYWxzLnNsb3BlRGlmZkRlY2F5XG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnNsb3BlRGlmZikgPiBnbG9iYWxzLnNsb3BlRGlmZkxpbSkge1xuICAgICAgICAgIHRoaXMuc2xvcGVEaWZmID0gTWF0aC5taW4oXG4gICAgICAgICAgICBNYXRoLm1heCh0aGlzLnNsb3BlRGlmZiwgLWdsb2JhbHMuc2xvcGVEaWZmTGltKSxcbiAgICAgICAgICAgIGdsb2JhbHMuc2xvcGVEaWZmTGltXG4gICAgICAgICAgKVxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2xvcGUgZGlmZiBidW1wXCIpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldlNsb3BlID0gdGhpcy5zbG9wZVxuICAgICAgICB0aGlzLnNsb3BlICs9IHRoaXMuc2xvcGVEaWZmXG4gICAgICAgIHRoaXMuc2xvcGUgKj0gZ2xvYmFscy5zbG9wZURlY2F5XG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnNsb3BlKSA+IGdsb2JhbHMuc2xvcGVMaW0pIHtcbiAgICAgICAgICB0aGlzLnNsb3BlID0gTWF0aC5taW4oXG4gICAgICAgICAgICBNYXRoLm1heCh0aGlzLnNsb3BlLCAtZ2xvYmFscy5zbG9wZUxpbSksXG4gICAgICAgICAgICBnbG9iYWxzLnNsb3BlTGltXG4gICAgICAgICAgKVxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2xvcGUgYnVtcFwiKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2xvcGVEaWZmID0gdGhpcy5zbG9wZSAtIHByZXZTbG9wZVxuICAgICAgfSxcbiAgICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTbG9wZSgpXG4gICAgICAgIHRoaXMueSArPSB0aGlzLnNsb3BlICogZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbFxuICAgICAgICB0aGlzLnlzLnB1c2godGhpcy55KVxuICAgICAgICAvLyBwcmV2ZW50IGZsb2F0aW5nIHBvaW50IGRyaWZ0XG4gICAgICAgIHRoaXMueElkeCsrXG4gICAgICAgIHRoaXMueCA9IGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwgKiB0aGlzLnhJZHhcbiAgICAgIH0sXG4gICAgfVxuICB9XG4gIGNvbnN0IGxlZnRPYmogPSB0ZXJyYWluTFJPYmplY3QoKSxcbiAgICByaWdodE9iaiA9IHRlcnJhaW5MUk9iamVjdCgpXG5cbiAgZm9yIChcbiAgICBsZXQgXyA9IDA7XG4gICAgXyA8IGdsb2JhbHMuZ3JvdW5kSGFsZldpZHRoIC8gZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbDtcbiAgICBfKytcbiAgKSB7XG4gICAgbGVmdE9iai51cGRhdGUoKVxuICAgIHJpZ2h0T2JqLnVwZGF0ZSgpXG4gIH1cbiAgbGVmdE9iai55cy5yZXZlcnNlKClcblxuICByZXR1cm4gbGVmdE9iai55cy5jb25jYXQoWzBdKS5jb25jYXQocmlnaHRPYmoueXMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB4UG9zVG9UZXJyYWluSWR4KHgpIHtcbiAgeCA9IE1hdGgubWluKE1hdGgubWF4KHgsIC1nbG9iYWxzLmdyb3VuZEhhbGZXaWR0aCksIGdsb2JhbHMuZ3JvdW5kSGFsZldpZHRoKVxuICByZXR1cm4gKFxuICAgIE1hdGgucm91bmQoeCAvIGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwpICsgKGdsb2JhbHMublRlcnJhaW5QdHMgLSAxKSAvIDJcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVycmFpbklkeFRvWFBvcyhpZHgpIHtcbiAgcmV0dXJuIChpZHggLSAoZ2xvYmFscy5uVGVycmFpblB0cyAtIDEpIC8gMikgKiBnbG9iYWxzLmdyb3VuZERldGFpbEludGVydmFsXG59XG5cbmZ1bmN0aW9uIGludGVycFRlcnJhaW5ZKHgsIHRlcnJhaW5QdHMpIHtcbiAgeCA9IE1hdGgubWluKE1hdGgubWF4KHgsIC1nbG9iYWxzLmdyb3VuZEhhbGZXaWR0aCksIGdsb2JhbHMuZ3JvdW5kSGFsZldpZHRoKVxuICBjb25zdCB4U2NhbGVkID0geCAvIGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwsXG4gICAgaWR4T2Zmc2V0ID0gKGdsb2JhbHMublRlcnJhaW5QdHMgLSAxKSAvIDIsXG4gICAgY2xpcHBlZCA9IFtNYXRoLmZsb29yKHhTY2FsZWQpLCBNYXRoLmNlaWwoeFNjYWxlZCldLFxuICAgIHhzID0gY2xpcHBlZC5tYXAoKHYpID0+IGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwgKiB2KSxcbiAgICB5cyA9IGNsaXBwZWQubWFwKCh2KSA9PiB0ZXJyYWluUHRzW3YgKyBpZHhPZmZzZXRdKVxuXG4gIGlmICh4c1sxXSA9PSB4c1swXSkge1xuICAgIHJldHVybiB5c1swXVxuICB9XG4gIGNvbnN0IHNsb3BlID0gKHlzWzFdIC0geXNbMF0pIC8gKHhzWzFdIC0geHNbMF0pLFxuICAgIHhEaWZmID0geCAtIHhzWzBdLFxuICAgIHlEaWZmID0gc2xvcGUgKiB4RGlmZlxuICByZXR1cm4geXNbMF0gKyB5RGlmZlxufVxuIiwiLy8gaW1wb3J0U2NyaXB0cyhcIi4uL0JveDJELWpzL0JveDJEX3YyLjMuMV9taW4uanNcIiwgXCIuLi9nbG9iYWxzLmpzXCIsIFwiLi4vdGlwcHkuanNcIilcblxuaW1wb3J0IEJveDJERmFjdG9yeSBmcm9tIFwiYm94MmQtd2FzbS9kaXN0L2VzL0JveDJEXCJcbmltcG9ydCB7IGdsb2JhbHMgfSBmcm9tIFwiLi8uLi9nbG9iYWxzLmpzXCJcbmltcG9ydCB7IFBvcHVsYXRpb24gfSBmcm9tIFwiLi8uLi90aXBweS5qc1wiXG5cbmxldCBwb3B1bGF0aW9uID0gbnVsbFxuXG5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICBjb25zdCBbaW5mbywgbXNnXSA9IGUuZGF0YVxuICBpZiAoaW5mbyA9PSBcInRlcnJhaW5QdHNcIikge1xuICAgIEJveDJERmFjdG9yeSgpLnRoZW4oKGIyKSA9PiB7XG4gICAgICBwb3B1bGF0aW9uID0gbmV3IFBvcHVsYXRpb24oWzAsIDBdLCAxLCBtc2csIGIyKVxuICAgIH0pXG4gIH0gZWxzZSBpZiAoaW5mbyA9PSBcInRhcmdldHNTb2x1dGlvbnNcIikge1xuICAgIGNvbnN0IHNvbHV0aW9uc1Njb3JlcyA9IHBvcHVsYXRpb24udHJhaW4obXNnKVxuICAgIHBvc3RNZXNzYWdlKFtcInNvbHV0aW9uc1Njb3Jlc1wiLCBzb2x1dGlvbnNTY29yZXNdKVxuICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIHRoZSBzdGFydHVwIGZ1bmN0aW9uXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnggPSAoKSA9PiB7XG5cdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuXHQvLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcblx0dmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbOTQyXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oMTA2KSkpXG5cdF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cdHJldHVybiBfX3dlYnBhY2tfZXhwb3J0c19fO1xufTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rcyBhbmQgc2libGluZyBjaHVua3MgZm9yIHRoZSBlbnRyeXBvaW50XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBcImM1NDdiZGUzMGYzNGJmODVlYjQ0XCIgKyBcIi5qc1wiO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3MgYW5kIHNpYmxpbmcgY2h1bmtzIGZvciB0aGUgZW50cnlwb2ludFxuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IHNlbGYubG9jYXRpb24gKyBcIlwiO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGNodW5rc1xuLy8gXCIxXCIgbWVhbnMgXCJhbHJlYWR5IGxvYWRlZFwiXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ5MTI6IDFcbn07XG5cbi8vIGltcG9ydFNjcmlwdHMgY2h1bmsgbG9hZGluZ1xudmFyIGluc3RhbGxDaHVuayA9IChkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0d2hpbGUoY2h1bmtJZHMubGVuZ3RoKVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkcy5wb3AoKV0gPSAxO1xuXHRwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaSA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHQvLyBcIjFcIiBpcyB0aGUgc2lnbmFsIGZvciBcImFscmVhZHkgbG9hZGVkXCJcblx0aWYoIWluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRpbXBvcnRTY3JpcHRzKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKSk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua3RpcHB5X3Byb2plY3Rfd2Vic2l0ZVwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt0aXBweV9wcm9qZWN0X3dlYnNpdGVcIl0gfHwgW107XG52YXIgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24gPSBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IGluc3RhbGxDaHVuaztcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdCIsIi8vIHJ1biBzdGFydHVwXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18ueCgpO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibmV4dCIsImdsb2JhbHMiLCJ3IiwiaCIsImxJbnB1dENvZGVzIiwicklucHV0Q29kZXMiLCJ4T2ZmcyIsInRzIiwic2luTGltIiwic2luU3RlcCIsInNpbkRlY2F5IiwidmVsTGltIiwidmVsRGVjYXkiLCJncm91bmRIYWxmV2lkdGgiLCJncm91bmRGbGF0Q2VudGVySGFsZldpZHRoIiwiZ3JvdW5kRGV0YWlsSW50ZXJ2YWwiLCJuVGVycmFpblB0cyIsInRoaXMiLCJ3YWxsSCIsIndhbGxXIiwic2xvcGVEZWNheSIsInNsb3BlTGltIiwic2xvcGVEaWZmTWFnIiwic2xvcGVEaWZmRGVjYXkiLCJzbG9wZURpZmZMaW0iLCJiYXJNYXgiLCJsaW0iLCJ0YXJnZXRUeXBlIiwiYmFySGVpZ2h0Iiwic2NvcmVEZW5vbUVwcyIsImNyYXNoU2luTGltaXQiLCJtYXhUb3JxdWUiLCJuV29ya2VycyIsIm11bHRpcGxpZXIiLCJlcExlbiIsInR3aXRjaGluZXNzZXMiLCJjbWFTaWdtYSIsIlRpcHB5Iiwid2hlZWxQb3NJbml0Iiwid29ybGQiLCJiMiIsInBvcHVsYXRpb24iLCJfY2xhc3NDYWxsQ2hlY2siLCJjb25zb2xlIiwiYXNzZXJ0IiwibGVuZ3RoIiwid2hlZWxSIiwiY2hhc3Npc0giLCJjaGFzc2lzVyIsImF4bGVPZmZzZXRZIiwiYmQiLCJiMkJvZHlEZWYiLCJzZXRfdHlwZSIsImIyX2R5bmFtaWNCb2R5Iiwic2V0X3Bvc2l0aW9uIiwiX2NvbnN0cnVjdCIsImIyVmVjMiIsIl90b0NvbnN1bWFibGVBcnJheSIsIndoZWVsQm9keSIsIkNyZWF0ZUJvZHkiLCJzaGFwZSIsImIyQ2lyY2xlU2hhcGUiLCJzZXRfbV9yYWRpdXMiLCJmZCIsImIyRml4dHVyZURlZiIsInNldF9zaGFwZSIsInNldF9kZW5zaXR5Iiwic2V0X2ZyaWN0aW9uIiwic2V0X3Jlc3RpdHV0aW9uIiwiZmlsdGVyIiwiZ2V0X2ZpbHRlciIsInNldF9jYXRlZ29yeUJpdHMiLCJzZXRfbWFza0JpdHMiLCJzZXRfZmlsdGVyIiwiZml4dHVyZSIsImNhc3RPYmplY3QiLCJDcmVhdGVGaXh0dXJlIiwiYjJGaXh0dXJlIiwicGFydFR5cGUiLCJzcG90Iiwid2hlZWxNYXNzIiwiR2V0TWFzcyIsImVkZ2VYIiwiZWRnZVkiLCJjdXRvdXRYIiwiY3V0b3V0WSIsImNoYXNzaXNWZXJ0aWNlcyIsIl9zdGVwIiwiYjJDaGFzc2lzVmVydGljZXMiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsInMiLCJuIiwiZG9uZSIsInZlcnRleCIsInZhbHVlIiwicHVzaCIsImVyciIsImUiLCJmIiwiY2hhc3Npc1Bvc0luaXQiLCJjaGFzc2lzQm9keSIsImIyQ3JlYXRlUG9seWdvblNoYXBlIiwiY2hhc3Npc01hc3MiLCJqZCIsImIyUmV2b2x1dGVKb2ludERlZiIsIkluaXRpYWxpemUiLCJzZXRfZW5hYmxlTW90b3IiLCJzZXRfbWF4TW90b3JUb3JxdWUiLCJheGxlIiwiQ3JlYXRlSm9pbnQiLCJiMlJldm9sdXRlSm9pbnQiLCJpbnB1dERpbSIsImdldElucHV0cyIsInNoYXBlcyIsIm5fZGltIiwid2VpZ2h0Q291bnQiLCJiaWFzQ291bnQiLCJpIiwibSIsInJlc2V0IiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmVydGljZXMiLCJiMlBvbHlnb25TaGFwZSIsImJ1ZmZlciIsIl9tYWxsb2MiLCJvZmZzZXQiLCJIRUFQRjMyIiwiZ2V0X3giLCJnZXRfeSIsInB0cl93cmFwcGVkIiwid3JhcFBvaW50ZXIiLCJTZXQiLCJmbGF0V3RzIiwiZmxhdFd0SWR4Iiwid2VpZ2h0cyIsIm5ld1dlaWdodCIsIkZsb2F0MzJBcnJheSIsImZyb20iLCJzbGljZSIsIk1hdHJpeCIsImJpYXNlcyIsIm5ld0JpYXMiLCJTZXRUcmFuc2Zvcm0iLCJTZXRMaW5lYXJWZWxvY2l0eSIsIlNldEFuZ3VsYXJWZWxvY2l0eSIsIlNldEF3YWtlIiwidGFyZ2V0U3FFcnJTdW0iLCJ0YXJnZXRQcmV2IiwicHJldk91dHB1dCIsIm91dHB1dERpZmZTcVN1bSIsInByZXZXaGVlbFZlbFgiLCJ3aGVlbEFjY1giLCJwcmV2Q2hhc3Npc1ZlbFgiLCJjaGFzc2lzQWNjWCIsImRyaWZ0WFNxU3VtIiwiY3Jhc2hTdGVwQ291bnQiLCJ0YXJnZXQiLCJjdXJyZW50IiwiZGlmZiIsImRpZmZTcSIsIk1hdGgiLCJhYnMiLCJzcGVlZCIsIlNldE1vdG9yU3BlZWQiLCJpbnB1dHMiLCJyZXZlcnNlIiwic2lnbiIsIndoZWVsUG9zIiwiR2V0UG9zaXRpb24iLCJ3aGVlbFgiLCJ3aGVlbFkiLCJsaWRhcllzIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsInhPZmYiLCJsaWRhclkiLCJpbnRlcnBUZXJyYWluWSIsInRlcnJhaW5QdHMiLCJjaGFzc2lzU2luIiwic2luIiwiR2V0QW5nbGUiLCJjaGFzc2lzVmVsWCIsIkdldExpbmVhclZlbG9jaXR5IiwiY2hhc3Npc0FuZ1ZlbCIsIkdldEFuZ3VsYXJWZWxvY2l0eSIsIndoZWVsVmVsIiwid2hlZWxWZWxYIiwid2hlZWxBbmdWZWwiLCJheGxlUnhuIiwiR2V0UmVhY3Rpb25Gb3JjZSIsInVwZGF0ZVRhcmdldFNjb3JlIiwiaW5wdXRzQXJyYXkiLCJvdXRwdXRSYXciLCJtdWwiLCJhZGQiLCJsZWFreUVsdSIsImRhdGEiLCJvdXRwdXQiLCJzZXRTcGVlZCIsIm91dHB1dERpZmYiLCJnZXQiLCJjaGFzc2lzUG9zIiwid2hlZWxQb3NDdXJyZW50Iiwid2hlZWxBbmdsZUN1cnJlbnQiLCJjaGFzc2lzUG9zQ3VycmVudCIsImNoYXNzaXNBbmdsZUN1cnJlbnQiLCJvdGhlciIsImEiLCJiIiwicCIsImMiLCJBcnJheUJ1ZmZlciIsImoiLCJzdW0iLCJrIiwibCIsInJlc3VsdCIsIm1heCIsImV4cG0xIiwiUG9wdWxhdGlvbiIsIm5UaXBweXMiLCJncmF2aXR5IiwiYjJXb3JsZCIsInlEaWZmUHJldiIsImdyb3VuZEJvZHkiLCJ0ZXJyYWluUHRzRmlsdGVyZWQiLCJ5RGlmZkN1cnIiLCJzYW1lU2xvcGUiLCJ0ZXJyYWluSWR4VG9YUG9zIiwiZWRnZVNoYXBlIiwiYjJFZGdlU2hhcGUiLCJTZXRUd29TaWRlZCIsImdyb3VuZEZEIiwiX2k0IiwiX2FyciIsImlkeCIsIl9yZWYiLCJ4IiwieSIsInRpcHB5cyIsImFkZFRpcHB5cyIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJfc3RlcDUiLCJmbGF0V3RzSWR4IiwiX2l0ZXJhdG9yNSIsInNldFd0cyIsIl9yZWYyIiwidGFyZ2V0cyIsInNvbHV0aW9ucyIsIm5Tb2x1dGlvbnMiLCJ0aXBweSIsInRhcmdldElkeCIsInN0ZXAiLCJfc3RlcDYiLCJfaXRlcmF0b3I2IiwidXBkYXRlIiwiU3RlcCIsInNvbHV0aW9uc1Njb3JlcyIsIl9zdGVwNyIsInRpcHB5MCIsInNvbHV0aW9uIiwid3RzTm9ybSIsIl9pdGVyYXRvcjciLCJfc3RlcDkiLCJfaXRlcmF0b3I5Iiwid3QiLCJfc3RlcDgiLCJiaWFzTm9ybSIsIl9pdGVyYXRvcjgiLCJfc3RlcDEwIiwiX2l0ZXJhdG9yMTAiLCJiaWFzIiwidGFza1Njb3JlcyIsInRhc2tUaXBweSIsIm1zZSIsImNyYXNoZWRSYXRpbyIsImRyaWZ0WCIsInNjYWxlIiwiY2VudGVyIiwiX3N0ZXAxMSIsIl9pdGVyYXRvcjExIiwiZHJhdyIsInhTY2FsZWQiLCJtaW4iLCJpZHhPZmZzZXQiLCJjbGlwcGVkIiwiZmxvb3IiLCJjZWlsIiwieHMiLCJtYXAiLCJ2IiwieXMiLCJ5RGlmZiIsIm9ubWVzc2FnZSIsIl9lJGRhdGEiLCJpbmZvIiwibXNnIiwiQm94MkRGYWN0b3J5IiwidGhlbiIsInRyYWluIiwicG9zdE1lc3NhZ2UiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fd2VicGFja19leHBvcnRzX18iLCJPIiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJmdWxmaWxsZWQiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJzcGxpY2UiLCJyIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJtaW5pQ3NzRiIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGVzdCIsIkVycm9yIiwicmVwbGFjZSIsInNlbGYiLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImJpbmQiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJwb3AiXSwic291cmNlUm9vdCI6IiJ9