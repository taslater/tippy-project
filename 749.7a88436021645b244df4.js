"use strict";(self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[]).push([[749],{4749:(t,i,e)=>{e.d(i,{Y:()=>c,S:()=>_});var r=e(4703);function s(t,i){return function(t){if(Array.isArray(t))return t}(t)||function(t,i){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var r,s,n=[],a=!0,h=!1;try{for(e=e.call(t);!(a=(r=e.next()).done)&&(n.push(r.value),!i||n.length!==i);a=!0);}catch(t){h=!0,s=t}finally{try{a||null==e.return||e.return()}finally{if(h)throw s}}return n}}(t,i)||function(t,i){if(t){if("string"==typeof t)return n(t,i);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?n(t,i):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,i){(null==i||i>t.length)&&(i=t.length);for(var e=0,r=new Array(i);e<i;e++)r[e]=t[e];return r}function a(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}function h(t,i){for(var e=0;e<i.length;e++){var r=i[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,i,e){return i&&h(t.prototype,i),e&&h(t,e),t}var u=1e8,f=1e16,m=Math.fround(977e-6),c=function(){function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,n=arguments.length>4?arguments[4]:void 0;a(this,t),console.assert(i.length>1,"mean array length must be greater than 1."),console.assert(i.every((function(t){return Math.abs(t)<1e32})),"all mean value magnitudes must be less than 1e32."),this.mean=i,this.n_dim=i.length,null==r&&(r=4+Math.floor(3*Math.log(this.n_dim))),console.assert(r>0,"popsize must be non-zero positive value."),this.popsize=r,this.mu=Math.floor(r/2),console.assert(e>0,"sigma must be non-zero positive value");for(var h=new Float32Array(this.popsize),o=0;o<this.popsize;o++)h[o]=Math.log((r+1)/2)-Math.log(o+1);function u(t){return Math.pow(t.reduce((function(t,i){return t+i})),2)/t.map((function(t){return t*t})).reduce((function(t,i){return t+i}))}this.mu_eff=u(h.slice(0,this.mu));var f=u(h.slice(this.mu)),m=2;this.c1=m/(Math.pow(this.n_dim+1.3,2)+this.mu_eff),this.cmu=Math.min(1-this.c1-1e-8,m*(this.mu_eff-2+1/this.mu_eff)/(Math.pow(this.n_dim+2,2)+m*this.mu_eff/2)),console.assert(this.c1<=1-this.cmu,"invalid learning rate for the rank-one update"),console.assert(this.cmu<=1-this.c1,"invalid learning rate for the rank-Î¼ update");var c=Math.min(1+this.c1/this.cmu,1+2*f/(this.mu_eff+2),(1-this.c1-this.cmu)/(this.n_dim*this.cmu)),l=h.filter((function(t){return t>0})).reduce((function(t,i){return t+i})),v=Math.abs(h.filter((function(t){return t<0})).reduce((function(t,i){return t+i})));this.weights=h.map((function(t){return t>=0?1/l*t:c/v*t})),this.cm=1,this.c_sigma=(this.mu_eff+2)/(this.n_dim+this.mu_eff+5),this.d_sigma=1+2*Math.max(0,Math.sqrt((this.mu_eff-1)/(this.n_dim+1))-1)+this.c_sigma,console.assert(this.c_sigma<1,"invalid learning rate for cumulation for the step-size control"),this.cc=(4+this.mu_eff/this.n_dim)/(this.n_dim+4+2*this.mu_eff/this.n_dim),console.assert(this.cc<=1,"invalid learning rate for cumulation for the rank-one update"),this.chi_n=Math.sqrt(this.n_dim)*(1-1/(4*this.n_dim)+1/(21*Math.pow(this.n_dim,2))),this.p_sigma=new Float32Array(this.n_dim).fill(0),this.pc=new Float32Array(this.n_dim).fill(0),null==s?this.C=d(this.n_dim):(console.assert(s.shape==(n_dim,n_dim),"Invalid shape of covariance matrix"),this.C=s),this.sigma=e,this.g=0,this.needs_decomp=!0,null!=n&&(this.rng=n)}return o(t,[{key:"_eigen_decomposition",value:function(){if(!this.needs_decomp)return!0;this.C.avgSymmeric();var t=function(t){var i=!0,e=s(function(t){if(!(t instanceof l))return console.error("tred2 requires a SqMatrix"),null;var i,e,r,s,n,a,h,o,u,f=t.copy(),m=f.dim,c=new Float32Array(m).fill(0),d=new Float32Array(m).fill(0);for(i=m-1;i>=1;i--){if(h=0,u=0,(s=i-1)>0){for(r=0;r<=s;r++)u+=Math.abs(f.get(r,i));if(0==u)d[i]=f.get(s,i);else{for(r=0;r<=s;r++){var v=f.get(r,i)/u;f.set(r,i,v),h+=v*v}for(n=f.get(s,i),a=-Math.sign(n)*Math.abs(Math.sqrt(h)),d[i]=u*a,h-=n*a,f.set(s,i,n-a),n=0,e=0;e<=s;e++){for(f.set(i,e,f.get(e,i)/h),a=0,r=0;r<=e;r++)a+=f.get(r,e)*f.get(r,i);for(r=e+1;r<=s;r++)a+=f.get(e,r)*f.get(r,i);d[e]=a/h,n+=d[e]*f.get(e,i)}for(o=n/(h+h),e=0;e<=s;e++){n=f.get(e,i),a=d[e]-o*n,d[e]=a;for(var _=0;_<=e;_++)f.set(_,e,f.get(_,e)-n*d[_]-a*f.get(_,i))}}}else d[i]=f.get(s,i);c[i]=h}for(c[0]=0,d[0]=0,i=0;i<m;i++){if(s=i-1,0!=c[i])for(e=0;e<=s;e++){for(a=0,r=0;r<=s;r++)a+=f.get(r,i)*f.get(e,r);for(r=0;r<=s;r++)f.set(e,r,f.get(e,r)-a*f.get(i,r))}for(c[i]=f.get(i,i),f.set(i,i,1),e=0;e<=s;e++)f.set(e,i,0),f.set(i,e,0)}return[f,c,d,!0]}(t),4),r=e[0],n=e[1],a=e[2];if(!e[3])return{eig_vals:o,eig_vecs:u,eig_sym_success:i=!1};var h=s(function(t,i,e){var r,s,n,a,h,o,u,f,c,l,d,_,g=!0,p=e.dim;for(r=1;r<p;r++)i[r-1]=i[r];for(a=0;a<p;a++){for(s=0;s<30;){var y=!1;for(h=a;h<p-1;h++){var M=Math.fround(Math.abs(t[h])+Math.abs(t[h+1]));if(Math.abs(i[h])<=m*M){y=!0;break}}if(y||(h=p-1),h==a)break;s++,d=v(c=(t[a+1]-t[a])/(2*i[a]),1),c=t[h]-t[a]+i[a]/(c+Math.sign(c)*Math.abs(d)),_=1,u=1,l=0;var w=!1;for(r=h-1;r>=a;r--){if(f=_*i[r],o=u*i[r],d=v(f,c),i[r+1]=d,0==d){t[r+1]-=l,i[h]=0,w=!0;break}for(_=f/d,u=c/d,c=t[r+1]-l,l=_*(d=(t[r]-c)*_+2*u*o),t[r+1]=c+l,c=u*d-o,n=0;n<p;n++)f=e.get(r+1,n),e.set(r+1,n,_*e.get(r,n)+u*f),e.set(r,n,u*e.get(r,n)-_*f)}w||(t[a]-=l,i[a]=c,i[h]=0)}if(s>20)return console.log("iter",s),[t,e,g=!1]}return[t,e,g]}(n,a,r),3),o=h[0],u=h[1];return h[2]?{eig_vals:o,eig_vecs:u=u.transpose(),eig_sym_success:i}:{eig_vals:o,eig_vecs:u,eig_sym_success:i=!1}}(this.C);if(!t.eig_sym_success)return!1;var i=t.eig_vals.map((function(t){return t<0?1e-8:t}));this.D=i.map((function(t){return Math.sqrt(t)})),this.B=t.eig_vecs.copy();for(var e=this.B.copy(),r=0;r<this.n_dim;r++)for(var n=0;n<this.n_dim;n++)e.set(r,n,e.get(r,n)*i[n]);this.C=e.mulMat(this.B.transpose()),this.BD=this.B.copy();for(var a=0;a<this.n_dim;a++)for(var h=0;h<this.n_dim;h++)this.BD.set(a,h,this.BD.get(a,h)*this.D[h]);return this.needs_decomp=!1,!0}},{key:"_sample_solution",value:function(){if(!this._eigen_decomposition())return!1;for(var t=null==this.rng?(0,r.V)(this.n_dim):this.rng.get(this.n_dim),i=this.BD.mulVec(t),e=new Float32Array(this.n_dim),s=0;s<this.n_dim;s++){var n=this.mean[s]+this.sigma*i[s];n=Math.min(Math.max(n,-f),f),e[s]=n}return e}},{key:"ask",value:function(){return this._sample_solution()}},{key:"tell",value:function(t){if(this.g++,t.sort((function(t,i){return t.score-i.score})),!this._eigen_decomposition())return!1;this.needs_decomp=!0;for(var i=[],e=0;e<this.popsize;e++)for(var r=t[e].solution,s=0;s<this.n_dim;s++)i.push((r[s]-this.mean[s])/this.sigma);for(var n=new Float32Array(this.n_dim).fill(0),a=0;a<this.mu;a++)for(var h=0;h<this.n_dim;h++)n[h]+=i[a*this.n_dim+h]*this.weights[a];for(var o=0;o<this.n_dim;o++)this.mean[o]+=this.cm*this.sigma*n[o],this.mean[o]>u?(console.log("mean too high"),this.mean[o]=u):this.mean[o]<-1e8&&(console.log("mean too low"),this.mean[o]=-1e8);for(var f=this.B.copy(),m=0;m<this.n_dim;m++)for(var c=0;c<this.n_dim;c++)f.set(m,c,f.get(m,c)/this.D[c]);for(var l=f.mulMat(this.B.transpose()),d=l.mulVec(n),v=1-this.c_sigma,_=Math.sqrt(this.c_sigma*(2-this.c_sigma)*this.mu_eff),g=0;g<this.n_dim;g++)this.p_sigma[g]=v*this.p_sigma[g]+_*d[g];var p=Math.sqrt(this.p_sigma.map((function(t){return t*t})).reduce((function(t,i){return t+i})));this.sigma*=Math.exp(this.c_sigma/this.d_sigma*(p/this.chi_n-1)),this.sigma=Math.min(this.sigma,1e8);var y=p/Math.sqrt(1-Math.pow(1-this.c_sigma,2*(this.g+1)))<(1.4+2/(this.n_dim+1))*this.chi_n?1:0;v=1-this.cc,_=y*Math.sqrt(this.cc*(2-this.cc)*this.mu_eff);for(var M=0;M<this.n_dim;M++)this.pc[M]=v*this.pc[M]+_*n[M];for(var w=new Float32Array(this.n_dim*this.popsize),b=0;b<this.n_dim;b++)for(var k=0;k<this.popsize;k++){for(var A=0,F=0;F<this.n_dim;F++)A+=l.get(b,F)*i[k*this.n_dim+F];w[b*this.popsize+k]=A}for(var q=[],z=0;z<this.popsize;z++){for(var C=0,S=0;S<this.n_dim;S++){var B=w[S*this.popsize+z];C+=B*B}q.push(this.n_dim/(Math.abs(C)+1e-8))}for(var x=[],D=0;D<this.popsize;D++){var j=this.weights[D]>=0?1:q[D];x.push(this.weights[D]*j)}for(var I=(1-y)*this.cc*(2-this.cc),V=new Float32Array(this.n_dim*this.n_dim),O=0;O<this.n_dim;O++)for(var E=O;E<this.n_dim;E++)V[O*this.n_dim+E]=this.pc[O]*this.pc[E];for(var P=new Float32Array(this.n_dim*this.n_dim).fill(0),T=0;T<this.popsize;T++)for(var U=0;U<this.n_dim;U++)for(var Y=U;Y<this.n_dim;Y++)P[U*this.n_dim+Y]+=x[T]*i[T*this.n_dim+U]*i[T*this.n_dim+Y];var $=this.weights.reduce((function(t,i){return t+i}));v=1+this.c1*I-this.c1-this.cmu*$;for(var G=0;G<this.n_dim;G++)for(var H=G;H<this.n_dim;H++){var J=G*this.n_dim+H;this.C.data[J]=v*this.C.data[J]+this.c1*V[J]+this.cmu*P[J]}for(var K=0;K<this.n_dim;K++)for(var L=K+1;L<this.n_dim;L++)this.C.set(L,K,this.C.get(K,L));return!0}}]),t}(),l=function(){function t(i){a(this,t);var e=Math.sqrt(i.length);this.dim=e,this.data=Float32Array.from(i)}return o(t,[{key:"get",value:function(t,i){return this.data[t*this.dim+i]}},{key:"set",value:function(t,i,e){this.data[t*this.dim+i]=e}},{key:"addMat",value:function(i){if(!(i instanceof t))return console.error("Must add with SqMatrix."),null;for(var e=this.data.slice(),r=0;r<e.length;r++)e[r]+=i.data[r];return new t(e)}},{key:"mulVec",value:function(t){for(var i=new Float32Array(this.dim).fill(0),e=0;e<this.dim;e++)for(var r=0;r<this.dim;r++)i[e]+=this.get(e,r)*t[r];return i}},{key:"mulMat",value:function(i){for(var e=this.data,r=i.data,s=this.dim,n=this.dim,a=i.dim,h=new Float32Array(s*a),o=0;o<a;o++)for(var u=0;u<s;u++){for(var f=0,m=0;m<n;m++)f+=e[u*n+m]*r[m*a+o];h[u*a+o]=f}return new t(h)}},{key:"transpose",value:function(){for(var i=new t(new Float32Array(this.dim*this.dim)),e=0;e<this.dim;e++)for(var r=0;r<this.dim;r++)i.set(e,r,this.get(r,e));return i}},{key:"avgSymmeric",value:function(){for(var t=0;t<this.dim-1;t++)for(var i=t+1;i<this.dim;i++){var e=.5*(this.get(t,i)+this.get(i,t));this.set(t,i,e),this.set(i,t,e)}}},{key:"copy",value:function(){return new t(this.data.slice())}},{key:"toString",value:function(){for(var t="",i=0;i<this.dim*this.dim;i++){var e=(i+1)%this.dim==0?"\n":" ";t+=this.data[i].toString().padStart(2," ")+e}return t}}]),t}();function d(t){return function(t){for(var i=t.length,e=new Float32Array(i*i).fill(0),r=0;r<i;r++)e[r*(1+i)]=t[r];return new l(e)}(new Float32Array(t).fill(1))}function v(t,i){var e=Math.abs(t),r=Math.abs(i),s=e/r,n=s*s;return e>r?e*Math.sqrt(1+1/n):0==r?0:r*Math.sqrt(1+n)}function _(t){return 4+Math.floor(3*Math.log(t))}},4703:(t,i,e)=>{function r(t){for(var i,e,r,s,n,a,h=new Float32Array(t),o=0;o<t;o++){var u=(void 0,void 0,void 0,void 0,void 0,void 0,i=Math.random(),e=Math.random(),r=Math.sqrt(-2*Math.log(i)),s=2*Math.PI*e,n=r*Math.cos(s),a=r*Math.sin(s),Float32Array.from([n,a]));if(h[o]=u[0],o+1>=t)break;h[++o]=u[1]}return h}e.d(i,{V:()=>r})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,