(()=>{"use strict";var r,t,e={7716:(r,t,e)=>{var a,n,o,i=e(969),s={ackley:function(r){for(var t=2*Math.PI,e=0,a=0,n=0;n<2;n++){var o=r[n];e+=o*o,a+=Math.cos(t*o)}return-20*Math.exp(-.2*Math.sqrt(.5*e))-Math.exp(.5*a)+20+Math.E},bohachevsky1:function(r){var t=r[0],e=r[1];return t*t+2*e*e+-.3*Math.cos(3*Math.PI*t)+-.4*Math.cos(4*Math.PI*e)+.7},griewank:function(r){for(var t=r.length,e=0,a=1,n=0;n<t;n++){var o=r[n];e+=o*o/4e3,a*=Math.cos(o/Math.sqrt(n+1))}return e-a+1},rastrigin:function(r){for(var t=r.length,e=0,a=0;a<t;a++){var n=r[a];e+=n*n-10*Math.cos(2*Math.PI*n)}return 10*t+e}};function c(r,t){(null==t||t>r.length)&&(t=r.length);for(var e=0,a=new Array(t);e<t;e++)a[e]=r[e];return a}s.ackley.fancyName="Ackley",s.bohachevsky1.fancyName="Bohachevsky No.1",s.griewank.fancyName="Griewank",s.rastrigin.fancyName="Rastrigin",s.ackley.xyLim=32.768,s.bohachevsky1.xyLim=100,s.griewank.xyLim=600,s.rastrigin.xyLim=5.12;var l=function(){for(var r=2*Math.PI/32,t=[],e=0;e<2*Math.PI;e+=r)t.push(Float32Array.from([Math.sin(e),Math.cos(e)]));return t}();function u(){for(var r=new Float32Array(2*o.popsize),t=new Float32Array(o.popsize),e=[],i={},s=0,c=0,u=1/0,f=-1/0,h=0;h<o.popsize;h++){var p=o.ask(),v=n(p);s+=v,v<u&&(u=v),v>f&&(f=v),e.push({solution:p,score:v}),t[h]=v;for(var m=0;m<2;m++){var y=p[m],g=Math.abs(y);g>c&&(c=g),r[2*h+m]=y}}i.solutions=r.slice(),i.scores=t.slice(),i.meanScore=s/o.popsize,i.minScore=u,i.maxScore=f,i.ellipsePts=function(){for(var r=o.BD,t=o.mean,e=o.sigma,a=[],n=0;n<l.length;n++)for(var i=r.mulVec(l[n]),s=0;s<2;s++)a.push(t[s]+e*i[s]);return Float32Array.from(a)}().slice(),i.mean=o.mean.slice(),i.scaledSigma=o.sigma/a,i.maxAbsDim=c,postMessage(i),o.tell(e)}onmessage=function(r){var t,e,l=(t=r.data,e=2,function(r){if(Array.isArray(r))return r}(t)||function(r,t){var e=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=e){var a,n,o,i,s=[],c=!0,l=!1;try{if(o=(e=e.call(r)).next,0===t){if(Object(e)!==e)return;c=!1}else for(;!(c=(a=o.call(e)).done)&&(s.push(a.value),s.length!==t);c=!0);}catch(r){l=!0,n=r}finally{try{if(!c&&null!=e.return&&(i=e.return(),Object(i)!==i))return}finally{if(l)throw n}}return s}}(t,e)||function(r,t){if(r){if("string"==typeof r)return c(r,t);var e=Object.prototype.toString.call(r).slice(8,-1);return"Object"===e&&r.constructor&&(e=r.constructor.name),"Map"===e||"Set"===e?Array.from(r):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?c(r,t):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=l[0],h=l[1];"settings"===f?function(r){var t=r.objFnName,e=r.popsizeMultiplier,c=r.sigmaScale,l=r.meanRadius,f=r.meanDirection;!function(r){n=s[r],a=n.xyLim}(t);var h=c*a,p=null==f?2*Math.PI*Math.random():Math.PI*f,v=a*l,m=Float32Array.from([v*Math.cos(p),v*Math.sin(p)]),y=(0,i.V)(2)*e;o=new i.k(m,h,y,void 0,void 0),u()}(h):"step"===f&&u()}}},a={};function n(r){var t=a[r];if(void 0!==t)return t.exports;var o=a[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.m=e,n.x=()=>{var r=n.O(void 0,[969],(()=>n(7716)));return n.O(r)},r=[],n.O=(t,e,a,o)=>{if(!e){var i=1/0;for(u=0;u<r.length;u++){for(var[e,a,o]=r[u],s=!0,c=0;c<e.length;c++)(!1&o||i>=o)&&Object.keys(n.O).every((r=>n.O[r](e[c])))?e.splice(c--,1):(s=!1,o<i&&(i=o));if(s){r.splice(u--,1);var l=a();void 0!==l&&(t=l)}}return t}o=o||0;for(var u=r.length;u>0&&r[u-1][2]>o;u--)r[u]=r[u-1];r[u]=[e,a,o]},n.d=(r,t)=>{for(var e in t)n.o(t,e)&&!n.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:t[e]})},n.f={},n.e=r=>Promise.all(Object.keys(n.f).reduce(((t,e)=>(n.f[e](r,t),t)),[])),n.u=r=>r+".8d125f38796dd1b15ad3.js",n.miniCssF=r=>{},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),n.o=(r,t)=>Object.prototype.hasOwnProperty.call(r,t),(()=>{var r;n.g.importScripts&&(r=n.g.location+"");var t=n.g.document;if(!r&&t&&(t.currentScript&&(r=t.currentScript.src),!r)){var e=t.getElementsByTagName("script");if(e.length)for(var a=e.length-1;a>-1&&(!r||!/^http(s?):/.test(r));)r=e[a--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=r})(),(()=>{var r={716:1};n.f.i=(t,e)=>{r[t]||importScripts(n.p+n.u(t))};var t=self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[],e=t.push.bind(t);t.push=t=>{var[a,o,i]=t;for(var s in o)n.o(o,s)&&(n.m[s]=o[s]);for(i&&i(n);a.length;)r[a.pop()]=1;e(t)}})(),t=n.x,n.x=()=>n.e(969).then(t),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,