(()=>{var t,e,r={3041:(t,e,r)=>{"use strict";var s=r(7337),i={w:800,h:400,lInputCodes:["KeyJ","ArrowLeft"],rInputCodes:["KeyK","ArrowRight"],xOffs:[-.3,-.1,.1,.3],ts:1/60,sinLim:.4,sinStep:.03,sinDecay:.01,velLim:4,velDecay:.01,groundHalfWidth:100,groundFlatCenterHalfWidth:1,groundDetailInterval:.2,get nTerrainPts(){return this.groundHalfWidth/this.groundDetailInterval*2+1},wallH:.9,wallW:.5,slopeDecay:.9,slopeLim:.4,slopeDiffMag:.125,slopeDiffDecay:1.1,slopeDiffLim:.2,get barMax(){var t="vel"==this.targetType?this.velLim:this.sinLim;return.45*this.w/t},barHeight:25,get scoreDenomEps(){return this.sinLim},crashSinLimit:.8,maxTorque:1,nWorkers:8,multiplier:2,epLen:800,twitchinesses:[0,.1,.05,.025,.01,.005,.0025,null],cmaSigma:.5,targetType:"vel"};function n(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=u(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var s=0,i=function(){};return{s:i,n:function(){return s>=t.length?{done:!0}:{done:!1,value:t[s++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,a=!0,o=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){o=!0,n=t},f:function(){try{a||null==r.return||r.return()}finally{if(o)throw n}}}}function a(t,e,r){return a=o()?Reflect.construct:function(t,e,r){var s=[null];s.push.apply(s,e);var i=new(Function.bind.apply(t,s));return r&&h(i,r.prototype),i},a.apply(null,arguments)}function o(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function l(t){return function(t){if(Array.isArray(t))return c(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||u(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(t,e){if(t){if("string"==typeof t)return c(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(t,e):void 0}}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,s=new Array(e);r<e;r++)s[r]=t[r];return s}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var r=0;r<e.length;r++){var s=e[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function y(t,e,r){return e&&p(t.prototype,e),r&&p(t,r),t}var v=function(){function t(e,r,s,o){f(this,t),this.population=o,console.assert(2==e.length,"Tippy requires 2d wheelPos"),this.wheelR=.25,this.wheelPosInit=[e[0],e[1]-this.wheelR],this.chassisH=1,this.chassisW=.3,this.axleOffsetY=.1;var h=new s.b2BodyDef;h.set_type(s.b2_dynamicBody),h.set_position(a(s.b2Vec2,l(this.wheelPosInit))),this.wheelBody=r.CreateBody(h);var u=new s.b2CircleShape;u.set_m_radius(this.wheelR);var c=new s.b2FixtureDef;c.set_shape(u),c.set_density(.5),c.set_friction(.9),c.set_restitution(.1);var p=c.get_filter();p.set_categoryBits(2),p.set_maskBits(1),c.set_filter(p);var y=s.castObject(this.wheelBody.CreateFixture(c),s.b2Fixture);y.partType="wheel",y.spot=this,this.wheelMass=this.wheelBody.GetMass();var v=.5*this.chassisW,d=.5*this.chassisH,g=.2*this.chassisW,w=.35*this.chassisH;this.chassisVertices=[[+v,-d],[-v,-d],[-v,+w],[-g,+d],[+g,+d],[+v,+w]];var m,b=[],S=n(this.chassisVertices);try{for(S.s();!(m=S.n()).done;){var _=m.value;b.push(new s.b2Vec2(_[0]+this.wheelPosInit[0],_[1]+this.wheelPosInit[1]))}}catch(t){S.e(t)}finally{S.f()}this.chassisPosInit=[this.wheelPosInit[0],this.wheelPosInit[1]-.5*this.chassisH+this.axleOffsetY];var x=new s.b2BodyDef;x.set_type(s.b2_dynamicBody),x.set_position(a(s.b2Vec2,l(this.chassisPosInit))),this.chassisBody=r.CreateBody(x);var A=this.b2CreatePolygonShape(b,s),P=new s.b2FixtureDef,B=P.get_filter();B.set_categoryBits(2),B.set_maskBits(1),P.set_filter(B),P.set_density(2),P.set_shape(A);var k=s.castObject(this.chassisBody.CreateFixture(P),s.b2Fixture);k.partType="chassis",k.spot=this,this.chassisMass=this.chassisBody.GetMass();var C=new s.b2RevoluteJointDef;C.Initialize(this.wheelBody,this.chassisBody,a(s.b2Vec2,l(this.wheelPosInit))),C.set_enableMotor(!0),C.set_maxMotorTorque(i.maxTorque),this.axle=s.castObject(r.CreateJoint(C),s.b2RevoluteJoint),this.inputDim=this.getInputs(0).length,this.shapes=[this.inputDim,12,8,1],this.n_dim=0,this.weightCount=0,this.biasCount=0;for(var I=0;I<this.shapes.length-1;I++){var T=this.shapes[I],D=this.shapes[I+1];this.n_dim+=(T+1)*D,this.weightCount+=T*D,this.biasCount+=D}this.reset(s)}return y(t,[{key:"b2CreatePolygonShape",value:function(t,e){for(var r=new e.b2PolygonShape,s=e._malloc(8*t.length),i=0,n=0;n<t.length;n++)e.HEAPF32[s+i>>2]=t[n].get_x(),e.HEAPF32[s+(i+4)>>2]=t[n].get_y(),i+=8;var a=e.wrapPointer(s,e.b2Vec2);return r.Set(a,t.length),r}},{key:"setWts",value:function(t){this.flatWts=t;var e=0;this.weights=[];for(var r=0;r<this.shapes.length-1;r++){var s=this.shapes[r],i=this.shapes[r+1],n=Float32Array.from(this.flatWts.slice(e,e+s*i));this.weights.push(new d(n,s,i)),e+=s*i}this.biases=[];for(var a=0;a<this.shapes.length-1;a++){var o=this.shapes[a+1],h=Float32Array.from(this.flatWts.slice(e,e+1*o));this.biases.push(new d(h,1,o)),e+=1*o}}},{key:"reset",value:function(t){this.chassisBody.SetTransform(a(t.b2Vec2,l(this.chassisPosInit)),0),this.chassisBody.SetLinearVelocity(new t.b2Vec2(0,0)),this.chassisBody.SetAngularVelocity(0),this.chassisBody.SetAwake(1),this.wheelBody.SetTransform(a(t.b2Vec2,l(this.wheelPosInit)),0),this.wheelBody.SetLinearVelocity(new t.b2Vec2(0,0)),this.wheelBody.SetAngularVelocity(0),this.wheelBody.SetAwake(1),this.targetSqErrSum=0,this.targetPrev=null,this.prevOutput=0,this.outputDiffSqSum=0,this.prevWheelVelX=0,this.wheelAccX=0,this.prevChassisVelX=0,this.chassisAccX=0,this.driftXSqSum=0,this.crashStepCount=0}},{key:"updateTargetScore",value:function(t,e){var r=t-e,s=r*r;Math.abs(t),i.scoreDenomEps,this.targetSqErrSum+="vel"===i.targetType?s:100*s}},{key:"setSpeed",value:function(t){this.axle.SetMotorSpeed(t)}},{key:"getInputs",value:function(t){var e;this.reverse=0!=t?Math.sign(t):1,e=null!=this.inputDim?new Float32Array(this.inputDim):[];var r=0,s=this.wheelBody.GetPosition(),a=s.get_x(),o=s.get_y();this.lidarYs=[];var h,l=n(i.xOffs);try{for(l.s();!(h=l.n()).done;){var u=h.value,c=m(a+this.reverse*u,this.population.terrainPts)-o-this.wheelR;this.lidarYs.push(c),e[r]=c,r++}}catch(t){l.e(t)}finally{l.f()}var f=Math.sin(this.chassisBody.GetAngle());e[r]=this.reverse*f,r++,Math.abs(f)>i.crashSinLimit&&this.crashStepCount++;var p=this.chassisBody.GetLinearVelocity().get_x();this.chassisAccX=p-this.prevChassisVelX,this.prevChassisVelX=p,0==t&&(this.driftXSqSum+=this.chassisAccX*this.chassisAccX);var y=this.chassisBody.GetAngularVelocity();e[r]=this.reverse*y,r++;var v=this.wheelBody.GetLinearVelocity(),d=v.get_x();this.wheelAccX=d-this.prevWheelVelX,this.prevWheelVelX=d,e[r]=this.reverse*d,e[++r]=v.get_y(),r++;var g=this.wheelBody.GetAngularVelocity();e[r]=this.reverse*g,r++;var w=this.axle.GetReactionForce(60);return e[r]=.01*this.reverse*w.get_x(),e[++r]=.01*w.get_y(),e[++r]=this.reverse*t,r++,null!==this.targetPrev&&("sin"===i.targetType?this.updateTargetScore(this.targetPrev,f):this.updateTargetScore(this.targetPrev,d)),this.targetPrev=t,e}},{key:"update",value:function(t){var e=this.getInputs(t),r=new d(e,1,e.length).mul(this.weights[0]).add(this.biases[0]).leakyElu().mul(this.weights[1]).add(this.biases[1]).leakyElu().mul(this.weights[2]).add(this.biases[2]).data[0],s=this.reverse*r;this.setSpeed(s);var i=s-this.prevOutput;this.outputDiffSqSum+=i*i,this.prevOutput=s}},{key:"drawPositionData",get:function(){var t=this.wheelBody.GetPosition(),e=this.chassisBody.GetPosition();return{wheelPosCurrent:[t.get_x(),t.get_y()],wheelAngleCurrent:this.wheelBody.GetAngle(),chassisPosCurrent:[e.get_x(),e.get_y()],chassisAngleCurrent:this.chassisBody.GetAngle()}}},{key:"corrData",get:function(){return[Math.sin(this.chassisBody.GetAngle()),this.wheelAccX,this.chassisAccX]}}]),t}(),d=function(){function t(e,r,s){f(this,t),this.data=e,this.m=r,this.n=s}return y(t,[{key:"mul",value:function(e){for(var r=this.data,s=e.data,i=this.m,n=this.n,a=e.n,o=new Float32Array(new ArrayBuffer(4*i*a)),h=0;h<a;h++)for(var l=0;l<i;l++){for(var u=0,c=0;c<n;c++)u+=r[l*n+c]*s[c*a+h];o[l*a+h]=u}return new t(o,i,a)}},{key:"add",value:function(e){for(var r=this.data,s=e.data,i=r.length,n=new Float32Array(new ArrayBuffer(4*i)),a=0;a<i;a++)n[a]=r[a]+s[a];return new t(n,this.m,this.n)}},{key:"relu",value:function(){for(var e=this.data.length,r=this.data.slice(),s=0;s<e;s++)r[s]=Math.max(0,r[s]);return new t(r,this.m,this.n)}},{key:"leakyRelu",value:function(){for(var e=this.data.length,r=this.data.slice(),s=0;s<e;s++)r[s]=Math.max(.1*r[s],r[s]);return new t(r,this.m,this.n)}},{key:"elu",value:function(){for(var e=this.data.length,r=this.data.slice(),s=0;s<e;s++)r[s]<0&&(r[s]=Math.expm1(r[s]));return new t(r,this.m,this.n)}},{key:"leakyElu",value:function(){for(var e=this.data.length,r=this.data.slice(),s=0;s<e;s++)r[s]<0&&(r[s]=Math.expm1(r[s])+.1*r[s]);return new t(r,this.m,this.n)}}]),t}(),g=function(){function t(e,r,s,n){f(this,t),this.wheelPosInit=e.slice();var a=new n.b2Vec2(0,9.81);this.world=new n.b2World(a),this.b2=n,this.terrainPts=s;for(var o,h=this.world.CreateBody(new n.b2BodyDef),l=[],u=0;u<i.nTerrainPts;u++){var c=s[u+1]-s[u],p=c==o;o=c,p&&u!=i.nTerrainPts-1||l.push([w(u),s[u]])}for(var y=l.length-1;y>=1;y--){var v=new n.b2EdgeShape;v.SetTwoSided(new n.b2Vec2(l[y][0],l[y][1]),new n.b2Vec2(l[y-1][0],l[y-1][1]));var d=new n.b2FixtureDef;d.set_shape(v),d.set_friction(.9),d.set_restitution(.1),n.castObject(h.CreateFixture(d),n.b2Fixture)}for(var g=0,m=[0,i.nTerrainPts-1];g<m.length;g++){var b=m[g],S=[w(b),s[b]],_=S[0],x=S[1],A=new n.b2EdgeShape;A.SetTwoSided(new n.b2Vec2(_,x),new n.b2Vec2(_,x-i.wallH));var P=new n.b2FixtureDef;P.set_shape(A),P.set_friction(.9),P.set_restitution(.1),n.castObject(h.CreateFixture(P),n.b2Fixture)}this.tippys=[],this.addTippys(r),this.n_dim=this.tippys[0].n_dim}return y(t,[{key:"reset",value:function(){var t,e=n(this.tippys);try{for(e.s();!(t=e.n()).done;)t.value.reset(this.b2)}catch(t){e.e(t)}finally{e.f()}}},{key:"addTippys",value:function(t){for(var e=0;e<t;e++)this.tippys.push(new v(this.wheelPosInit,this.world,this.b2,this))}},{key:"setWts",value:function(t){var e,r=0,s=n(this.tippys);try{for(s.s();!(e=s.n()).done;)e.value.setWts(t.slice(r,r+this.n_dim)),r+=this.n_dim}catch(t){s.e(t)}finally{s.f()}}},{key:"train",value:function(t){var e=t.targets,r=t.solutions,s=r.length/this.n_dim;this.tippys.length<s*e.length&&this.addTippys(s*e.length-this.tippys.length);for(var a=0,o=0;o<s;o++){for(var h=0;h<e.length;h++){var l=this.tippys[o*e.length+h];l.setWts(r.slice(a,a+this.n_dim)),l.targetIdx=h}a+=this.n_dim}this.reset();for(var u=0;u<e[0].length;u++){var c,f=n(this.tippys);try{for(f.s();!(c=f.n()).done;){var p=c.value;p.update(e[p.targetIdx][u])}}catch(t){f.e(t)}finally{f.f()}this.world.Step(i.ts,8,3)}for(var y=[],v=0;v<s;v++){var d,g=this.tippys[v*e.length],w=g.flatWts,m=0,b=n(g.weights);try{for(b.s();!(d=b.n()).done;){var S,_=n(d.value.data);try{for(_.s();!(S=_.n()).done;){var x=S.value;m+=x*x}}catch(t){_.e(t)}finally{_.f()}}}catch(t){b.e(t)}finally{b.f()}m/=g.weightCount;var A,P=0,B=n(g.biases);try{for(B.s();!(A=B.n()).done;){var k,C=n(A.value.data);try{for(C.s();!(k=C.n()).done;){var I=k.value;P+=I*I}}catch(t){C.e(t)}finally{C.f()}}}catch(t){B.e(t)}finally{B.f()}P/=g.biasCount;for(var T=[],D=0;D<e.length;D++){var O=this.tippys[v*e.length+D],V=O.targetSqErrSum/i.epLen,M=O.crashStepCount/i.epLen,F=O.driftXSqSum/i.epLen;T.push({mse:V,crashedRatio:M,driftX:F})}y.push({solution:w,wtsNorm:m,biasNorm:P,taskScores:T})}return y}},{key:"update",value:function(t){for(var e=0;e<this.tippys.length;e++)this.tippys[e].update(t[e]);this.world.Step(i.ts,8,3)}},{key:"draw",value:function(t,e){var r,s=n(this.tippys);try{for(s.s();!(r=s.n()).done;)r.value.draw(t,e)}catch(t){s.e(t)}finally{s.f()}}}]),t}();function w(t){return(t-(i.nTerrainPts-1)/2)*i.groundDetailInterval}function m(t,e){var r=(t=Math.min(Math.max(t,-i.groundHalfWidth),i.groundHalfWidth))/i.groundDetailInterval,s=(i.nTerrainPts-1)/2,n=[Math.floor(r),Math.ceil(r)],a=n.map((function(t){return i.groundDetailInterval*t})),o=n.map((function(t){return e[t+s]}));if(a[1]==a[0])return o[0];var h=(o[1]-o[0])/(a[1]-a[0])*(t-a[0]);return o[0]+h}function b(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,s=new Array(e);r<e;r++)s[r]=t[r];return s}var S=null;onmessage=function(t){var e,r,i=(e=t.data,r=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var s,i,n=[],a=!0,o=!1;try{for(r=r.call(t);!(a=(s=r.next()).done)&&(n.push(s.value),!e||n.length!==e);a=!0);}catch(t){o=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(o)throw i}}return n}}(e,r)||function(t,e){if(t){if("string"==typeof t)return b(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?b(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=i[0],a=i[1];if("terrainPts"==n)(0,s.Z)().then((function(t){S=new g([0,0],1,a,t)}));else if("targetsSolutions"==n){var o=S.train(a);postMessage(["solutionsScores",o])}}},8100:()=>{},8069:()=>{}},s={};function i(t){var e=s[t];if(void 0!==e)return e.exports;var n=s[t]={exports:{}};return r[t](n,n.exports,i),n.exports}i.m=r,i.x=()=>{var t=i.O(void 0,[337],(()=>i(3041)));return i.O(t)},t=[],i.O=(e,r,s,n)=>{if(!r){var a=1/0;for(u=0;u<t.length;u++){for(var[r,s,n]=t[u],o=!0,h=0;h<r.length;h++)(!1&n||a>=n)&&Object.keys(i.O).every((t=>i.O[t](r[h])))?r.splice(h--,1):(o=!1,n<a&&(a=n));if(o){t.splice(u--,1);var l=s();void 0!==l&&(e=l)}}return e}n=n||0;for(var u=t.length;u>0&&t[u-1][2]>n;u--)t[u]=t[u-1];t[u]=[r,s,n]},i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.f={},i.e=t=>Promise.all(Object.keys(i.f).reduce(((e,r)=>(i.f[r](t,e),e)),[])),i.u=t=>t+".e234418e2ac93ca34346.js",i.miniCssF=t=>{},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{i.b=self.location+"";var t={795:1};i.f.i=(e,r)=>{t[e]||importScripts(i.p+i.u(e))};var e=self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[],r=e.push.bind(e);e.push=e=>{var[s,n,a]=e;for(var o in n)i.o(n,o)&&(i.m[o]=n[o]);for(a&&a(i);s.length;)t[s.pop()]=1;r(e)}})(),e=i.x,i.x=()=>i.e(337).then(e),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk1LmFkYWQ0NWJhNzJhMjdkN2U2ODNhLmpzIiwibWFwcGluZ3MiOiJVQUFJQSxFQ0FBQyxFLDZDQ0FTQyxFQUFVLENBQ3JCQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsWUFBYSxDQUFDLE9BQVEsYUFDdEJDLFlBQWEsQ0FBQyxPQUFRLGNBQ3RCQyxNQUFPLEVBQUUsSUFBTSxHQUFLLEdBQUssSUFDekJDLEdBQUksRUFBTSxHQUVWQyxPQUFRLEdBRVJDLFFBQVMsSUFDVEMsU0FBVSxJQUNWQyxPQUFRLEVBQ1JDLFNBQVUsSUFDVkMsZ0JBQWlCLElBQ2pCQywwQkFBMkIsRUFDM0JDLHFCQUFzQixHQUVsQkMsa0JBQ0YsT0FBWUMsS0FBS0osZ0JBQWtCSSxLQUFLRixxQkFBakMsRUFBeUQsR0FFbEVHLE1BQU8sR0FDUEMsTUFBTyxHQUVQQyxXQUFZLEdBQ1pDLFNBQVUsR0FDVkMsYUFBYyxLQUNkQyxlQUFnQixJQUNoQkMsYUFBYyxHQUNWQyxhQUNGLElBQU1DLEVBQXlCLE9BQW5CVCxLQUFLVSxXQUFzQlYsS0FBS04sT0FBU00sS0FBS1QsT0FDMUQsTUFBUSxJQUFZUyxLQUFLZixFQUFLd0IsR0FFaENFLFVBQVcsR0FHUEMsb0JBQ0YsT0FBT1osS0FBS1QsUUFFZHNCLGNBQWUsR0FDZkMsVUFBVyxFQUNYQyxTQUFVLEVBQ1ZDLFdBQVksRUFDWkMsTUFBTyxJQUNQQyxjQUFlLENBQUMsRUFBRyxHQUFLLElBQU0sS0FBTyxJQUFNLEtBQU8sTUFBUSxNQUMxREMsU0FBVSxHQUVWVCxXQUFZLE8sNHNFQzVDUlUsRUFBQUEsV0FDSixXQUFZQyxFQUFjQyxFQUFPQyxFQUFJQyxHQUFZLFVBQy9DeEIsS0FBS3dCLFdBQWFBLEVBQ2xCQyxRQUFRQyxPQUE4QixHQUF2QkwsRUFBYU0sT0FBYSw4QkFFekMzQixLQUFLNEIsT0FBUyxJQUNkNUIsS0FBS3FCLGFBQWUsQ0FBQ0EsRUFBYSxHQUFJQSxFQUFhLEdBQUtyQixLQUFLNEIsUUFLN0Q1QixLQUFLNkIsU0FBVyxFQUNoQjdCLEtBQUs4QixTQUFXLEdBQ2hCOUIsS0FBSytCLFlBQWMsR0FJakIsSUFBTUMsRUFBSyxJQUFJVCxFQUFHVSxVQUNsQkQsRUFBR0UsU0FBU1gsRUFBR1ksZ0JBQ2ZILEVBQUdJLGFBQUgsRUFBb0JiLEVBQUdjLE9BQXZCLEVBQWlDckMsS0FBS3FCLGdCQUN0Q3JCLEtBQUtzQyxVQUFZaEIsRUFBTWlCLFdBQVdQLEdBRWxDLElBQU1RLEVBQVEsSUFBSWpCLEVBQUdrQixjQUNyQkQsRUFBTUUsYUFBYTFDLEtBQUs0QixRQUV4QixJQUFNZSxFQUFLLElBQUlwQixFQUFHcUIsYUFDbEJELEVBQUdFLFVBQVVMLEdBQ2JHLEVBQUdHLFlBbkJZLElBb0JmSCxFQUFHSSxhQXJCaUIsSUFzQnBCSixFQUFHSyxnQkFwQmdCLElBc0JuQixJQUFNQyxFQUFTTixFQUFHTyxhQUNsQkQsRUFBT0UsaUJBQWlCLEdBQ3hCRixFQUFPRyxhQUFhLEdBQ3BCVCxFQUFHVSxXQUFXSixHQUNkLElBQU1LLEVBQVUvQixFQUFHZ0MsV0FDakJ2RCxLQUFLc0MsVUFBVWtCLGNBQWNiLEdBQzdCcEIsRUFBR2tDLFdBRUxILEVBQVFJLFNBQVcsUUFDbkJKLEVBQVFLLEtBQU8zRCxLQUVmQSxLQUFLNEQsVUFBWTVELEtBQUtzQyxVQUFVdUIsVUFLaEMsSUFBTUMsRUFBUSxHQUFNOUQsS0FBSzhCLFNBQ3ZCaUMsRUFBUSxHQUFNL0QsS0FBSzZCLFNBQ25CbUMsRUFBVSxHQUFNaEUsS0FBSzhCLFNBQ3JCbUMsRUFBVSxJQUFPakUsS0FBSzZCLFNBRXhCN0IsS0FBS2tFLGdCQUFrQixDQUNyQixFQUFFSixHQUFRQyxHQUNWLEVBQUVELEdBQVFDLEdBQ1YsRUFBRUQsR0FBUUcsR0FDVixFQUFFRCxHQUFVRCxHQUNaLEVBQUVDLEdBQVVELEdBQ1osRUFBRUQsR0FBUUcsSUFHWixJQWZGLEVBZVFFLEVBQW9CLEdBZjVCLElBZ0JxQm5FLEtBQUtrRSxpQkFoQjFCLElBZ0JFLDJCQUF5QyxLQUFoQ0UsRUFBZ0MsUUFDdkNELEVBQWtCRSxLQUNoQixJQUFJOUMsRUFBR2MsT0FDTCtCLEVBQU8sR0FBS3BFLEtBQUtxQixhQUFhLEdBQzlCK0MsRUFBTyxHQUFLcEUsS0FBS3FCLGFBQWEsTUFwQnRDLDhCQXlCRXJCLEtBQUtzRSxlQUFpQixDQUNwQnRFLEtBQUtxQixhQUFhLEdBQ2xCckIsS0FBS3FCLGFBQWEsR0FBSyxHQUFNckIsS0FBSzZCLFNBQVc3QixLQUFLK0IsYUFFcEQsSUFBTUMsRUFBSyxJQUFJVCxFQUFHVSxVQUNsQkQsRUFBR0UsU0FBU1gsRUFBR1ksZ0JBQ2ZILEVBQUdJLGFBQUgsRUFBb0JiLEVBQUdjLE9BQXZCLEVBQWlDckMsS0FBS3NFLGtCQUd0Q3RFLEtBQUt1RSxZQUFjakQsRUFBTWlCLFdBQVdQLEdBQ3BDLElBQU1RLEVBQVF4QyxLQUFLd0UscUJBQXFCTCxFQUFtQjVDLEdBQ3JEb0IsRUFBSyxJQUFJcEIsRUFBR3FCLGFBQ1pLLEVBQVNOLEVBQUdPLGFBQ2xCRCxFQUFPRSxpQkFBaUIsR0FDeEJGLEVBQU9HLGFBQWEsR0FDcEJULEVBQUdVLFdBQVdKLEdBQ2ROLEVBQUdHLFlBN0VjLEdBOEVqQkgsRUFBR0UsVUFBVUwsR0FHYixJQUFNYyxFQUFVL0IsRUFBR2dDLFdBQ2pCdkQsS0FBS3VFLFlBQVlmLGNBQWNiLEdBQy9CcEIsRUFBR2tDLFdBRUxILEVBQVFJLFNBQVcsVUFDbkJKLEVBQVFLLEtBQU8zRCxLQUNmQSxLQUFLeUUsWUFBY3pFLEtBQUt1RSxZQUFZVixVQUtwQyxJQUFNYSxFQUFLLElBQUluRCxFQUFHb0QsbUJBQ2xCRCxFQUFHRSxXQUNENUUsS0FBS3NDLFVBQ0x0QyxLQUFLdUUsWUFGUCxFQUdNaEQsRUFBR2MsT0FIVCxFQUdtQnJDLEtBQUtxQixnQkFHeEJxRCxFQUFHRyxpQkFBZ0IsR0FDbkJILEVBQUdJLG1CQUFtQjlGLEVBQUFBLFdBQ3RCZ0IsS0FBSytFLEtBQU94RCxFQUFHZ0MsV0FBV2pDLEVBQU0wRCxZQUFZTixHQUFLbkQsRUFBRzBELGlCQUd0RGpGLEtBQUtrRixTQUFXbEYsS0FBS21GLFVBQVUsR0FBR3hELE9BR2xDM0IsS0FBS29GLE9BQVMsQ0FBQ3BGLEtBQUtrRixTQUFVLEdBQUksRUFBRyxHQUVyQ2xGLEtBQUtxRixNQUFRLEVBQ2JyRixLQUFLc0YsWUFBYyxFQUNuQnRGLEtBQUt1RixVQUFZLEVBQ2pCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJeEYsS0FBS29GLE9BQU96RCxPQUFTLEVBQUc2RCxJQUFLLENBQy9DLElBQU1DLEVBQUl6RixLQUFLb0YsT0FBT0ksR0FDcEJFLEVBQUkxRixLQUFLb0YsT0FBT0ksRUFBSSxHQUN0QnhGLEtBQUtxRixRQUFVSSxFQUFJLEdBQUtDLEVBQ3hCMUYsS0FBS3NGLGFBQWVHLEVBQUlDLEVBQ3hCMUYsS0FBS3VGLFdBQWFHLEVBR3BCMUYsS0FBSzJGLE1BQU1wRSxHLDhDQUdiLFNBQXFCcUUsRUFBVXJFLEdBSTdCLElBSEEsSUFBTWlCLEVBQVEsSUFBSWpCLEVBQUdzRSxlQUNmQyxFQUFTdkUsRUFBR3dFLFFBQTBCLEVBQWxCSCxFQUFTakUsUUFDL0JxRSxFQUFTLEVBQ0pSLEVBQUksRUFBR0EsRUFBSUksRUFBU2pFLE9BQVE2RCxJQUNuQ2pFLEVBQUcwRSxRQUFTSCxFQUFTRSxHQUFXLEdBQUtKLEVBQVNKLEdBQUdVLFFBQ2pEM0UsRUFBRzBFLFFBQVNILEdBQVVFLEVBQVMsSUFBTyxHQUFLSixFQUFTSixHQUFHVyxRQUN2REgsR0FBVSxFQUVaLElBQU1JLEVBQWM3RSxFQUFHOEUsWUFBWVAsRUFBUXZFLEVBQUdjLFFBRTlDLE9BREFHLEVBQU04RCxJQUFJRixFQUFhUixFQUFTakUsUUFDekJhLEksb0JBR1QsU0FBTytELEdBRUx2RyxLQUFLdUcsUUFBVUEsRUFDZixJQUFJQyxFQUFZLEVBQ2hCeEcsS0FBS3lHLFFBQVUsR0FFZixJQUFLLElBQUlqQixFQUFJLEVBQUdBLEVBQUl4RixLQUFLb0YsT0FBT3pELE9BQVMsRUFBRzZELElBQUssQ0FDL0MsSUFBTUMsRUFBSXpGLEtBQUtvRixPQUFPSSxHQUNwQkUsRUFBSTFGLEtBQUtvRixPQUFPSSxFQUFJLEdBQ3BCa0IsRUFBWUMsYUFBYUMsS0FDdkI1RyxLQUFLdUcsUUFBUU0sTUFBTUwsRUFBV0EsRUFBWWYsRUFBSUMsSUFHbEQxRixLQUFLeUcsUUFBUXBDLEtBQUssSUFBSXlDLEVBQU9KLEVBQVdqQixFQUFHQyxJQUMzQ2MsR0FBYWYsRUFBSUMsRUFFbkIxRixLQUFLK0csT0FBUyxHQUVkLElBQUssSUFBSXZCLEVBQUksRUFBR0EsRUFBSXhGLEtBQUtvRixPQUFPekQsT0FBUyxFQUFHNkQsSUFBSyxDQUMvQyxJQUNFRSxFQUFJMUYsS0FBS29GLE9BQU9JLEVBQUksR0FDcEJ3QixFQUFVTCxhQUFhQyxLQUNyQjVHLEtBQUt1RyxRQUFRTSxNQUFNTCxFQUFXQSxFQUh4QixFQUd3Q2QsSUFHbEQxRixLQUFLK0csT0FBTzFDLEtBQUssSUFBSXlDLEVBQU9FLEVBTmxCLEVBTThCdEIsSUFDeENjLEdBUFUsRUFPT2QsSyxtQkFJckIsU0FBTW5FLEdBQ0p2QixLQUFLdUUsWUFBWTBDLGFBQWpCLEVBQWtDMUYsRUFBR2MsT0FBckMsRUFBK0NyQyxLQUFLc0UsaUJBQWlCLEdBQ3JFdEUsS0FBS3VFLFlBQVkyQyxrQkFBa0IsSUFBSTNGLEVBQUdjLE9BQU8sRUFBRyxJQUNwRHJDLEtBQUt1RSxZQUFZNEMsbUJBQW1CLEdBQ3BDbkgsS0FBS3VFLFlBQVk2QyxTQUFTLEdBRTFCcEgsS0FBS3NDLFVBQVUyRSxhQUFmLEVBQWdDMUYsRUFBR2MsT0FBbkMsRUFBNkNyQyxLQUFLcUIsZUFBZSxHQUNqRXJCLEtBQUtzQyxVQUFVNEUsa0JBQWtCLElBQUkzRixFQUFHYyxPQUFPLEVBQUcsSUFDbERyQyxLQUFLc0MsVUFBVTZFLG1CQUFtQixHQUNsQ25ILEtBQUtzQyxVQUFVOEUsU0FBUyxHQUV4QnBILEtBQUtxSCxlQUFpQixFQUN0QnJILEtBQUtzSCxXQUFhLEtBRWxCdEgsS0FBS3VILFdBQWEsRUFDbEJ2SCxLQUFLd0gsZ0JBQWtCLEVBRXZCeEgsS0FBS3lILGNBQWdCLEVBQ3JCekgsS0FBSzBILFVBQVksRUFDakIxSCxLQUFLMkgsZ0JBQWtCLEVBQ3ZCM0gsS0FBSzRILFlBQWMsRUFFbkI1SCxLQUFLNkgsWUFBYyxFQUNuQjdILEtBQUs4SCxlQUFpQixJLCtCQUd4QixTQUFrQkMsRUFBUUMsR0FDeEIsSUFBTUMsRUFBT0YsRUFBU0MsRUFDcEJFLEVBQVNELEVBQU9BLEVBQ1JFLEtBQUtDLElBQUlMLEdBQVUvSSxFQUFBQSxjQUU3QmdCLEtBQUtxSCxnQkFBeUMsUUFBdkJySSxFQUFBQSxXQUErQmtKLEVBQVMsSUFBTUEsSSxzQkFHdkUsU0FBU0csR0FDUHJJLEtBQUsrRSxLQUFLdUQsY0FBY0QsSyx1QkFHMUIsU0FBVU4sR0FFUixJQUFJUSxFQURKdkksS0FBS3dJLFFBQW9CLEdBQVZULEVBQWNJLEtBQUtNLEtBQUtWLEdBQVUsRUFHL0NRLEVBRG1CLE1BQWpCdkksS0FBS2tGLFNBQ0UsSUFBSXlCLGFBQWEzRyxLQUFLa0YsVUFFdEIsR0FFWCxJQUFJTSxFQUFJLEVBRUZrRCxFQUFXMUksS0FBS3NDLFVBQVVxRyxjQUM5QkMsRUFBU0YsRUFBU3hDLFFBQ2xCMkMsRUFBU0gsRUFBU3ZDLFFBS3BCbkcsS0FBSzhJLFFBQVUsR0FqQkMsVUFrQkM5SixFQUFBQSxPQWxCRCxJQWtCaEIsMkJBQWdDLEtBQXZCK0osRUFBdUIsUUFDeEJDLEVBQ0pDLEVBQ0VMLEVBQVM1SSxLQUFLd0ksUUFBVU8sRUFDeEIvSSxLQUFLd0IsV0FBVzBILFlBRWxCTCxFQUNBN0ksS0FBSzRCLE9BQ1A1QixLQUFLOEksUUFBUXpFLEtBQUsyRSxHQUNsQlQsRUFBTy9DLEdBQUt3RCxFQUNaeEQsS0E1QmMsOEJBZ0NoQixJQUFNMkQsRUFBYWhCLEtBQUtpQixJQUFJcEosS0FBS3VFLFlBQVk4RSxZQUM3Q2QsRUFBTy9DLEdBQUt4RixLQUFLd0ksUUFBVVcsRUFDM0IzRCxJQUNJMkMsS0FBS0MsSUFBSWUsR0FBY25LLEVBQUFBLGVBQ3pCZ0IsS0FBSzhILGlCQUdQLElBQ0V3QixFQURpQnRKLEtBQUt1RSxZQUFZZ0Ysb0JBQ1RyRCxRQUMzQmxHLEtBQUs0SCxZQUFjMEIsRUFBY3RKLEtBQUsySCxnQkFDdEMzSCxLQUFLMkgsZ0JBQWtCMkIsRUFNVCxHQUFWdkIsSUFDRi9ILEtBQUs2SCxhQUFlN0gsS0FBSzRILFlBQWM1SCxLQUFLNEgsYUFFOUMsSUFBTTRCLEVBQWdCeEosS0FBS3VFLFlBQVlrRixxQkFDdkNsQixFQUFPL0MsR0FBS3hGLEtBQUt3SSxRQUFVZ0IsRUFDM0JoRSxJQUVBLElBQU1rRSxFQUFXMUosS0FBS3NDLFVBQVVpSCxvQkFDOUJJLEVBQVlELEVBQVN4RCxRQUN2QmxHLEtBQUswSCxVQUFZaUMsRUFBWTNKLEtBQUt5SCxjQUNsQ3pILEtBQUt5SCxjQUFnQmtDLEVBQ3JCcEIsRUFBTy9DLEdBQUt4RixLQUFLd0ksUUFBVW1CLEVBRTNCcEIsSUFEQS9DLEdBQ1lrRSxFQUFTdkQsUUFDckJYLElBRUEsSUFBTW9FLEVBQWM1SixLQUFLc0MsVUFBVW1ILHFCQUNuQ2xCLEVBQU8vQyxHQUFLeEYsS0FBS3dJLFFBQVVvQixFQUMzQnBFLElBQ0EsSUFBTXFFLEVBQVU3SixLQUFLK0UsS0FBSytFLGlCQUFpQixJQWtCM0MsT0FqQkF2QixFQUFPL0MsR0FBSyxJQUFPeEYsS0FBS3dJLFFBQVVxQixFQUFRM0QsUUFFMUNxQyxJQURBL0MsR0FDWSxJQUFPcUUsRUFBUTFELFFBRzNCb0MsSUFGQS9DLEdBRVl4RixLQUFLd0ksUUFBVVQsRUFDM0J2QyxJQUV3QixPQUFwQnhGLEtBQUtzSCxhQUNvQixRQUF2QnRJLEVBQUFBLFdBQ0ZnQixLQUFLK0osa0JBQWtCL0osS0FBS3NILFdBQVk2QixHQUV4Q25KLEtBQUsrSixrQkFBa0IvSixLQUFLc0gsV0FBWXFDLElBRzVDM0osS0FBS3NILFdBQWFTLEVBRVhRLEksb0JBR1QsU0FBT1IsR0FDTCxJQUFNaUMsRUFBY2hLLEtBQUttRixVQUFVNEMsR0FFN0JrQyxFQURlLElBQUluRCxFQUFPa0QsRUFBYSxFQUFHQSxFQUFZckksUUFHekR1SSxJQUFJbEssS0FBS3lHLFFBQVEsSUFDakIwRCxJQUFJbkssS0FBSytHLE9BQU8sSUFHaEJxRCxXQUNBRixJQUFJbEssS0FBS3lHLFFBQVEsSUFDakIwRCxJQUFJbkssS0FBSytHLE9BQU8sSUFHaEJxRCxXQUNBRixJQUFJbEssS0FBS3lHLFFBQVEsSUFDakIwRCxJQUFJbkssS0FBSytHLE9BQU8sSUFBSXNELEtBQUssR0FHdEJDLEVBQVN0SyxLQUFLd0ksUUFBVXlCLEVBQzlCakssS0FBS3VLLFNBQVNELEdBRWQsSUFBTUUsRUFBYUYsRUFBU3RLLEtBQUt1SCxXQUNqQ3ZILEtBQUt3SCxpQkFBbUJnRCxFQUFhQSxFQUNyQ3hLLEtBQUt1SCxXQUFhK0MsSSw0QkFHcEIsV0FPRSxJQUFNNUIsRUFBVzFJLEtBQUtzQyxVQUFVcUcsY0FDOUI4QixFQUFhekssS0FBS3VFLFlBQVlvRSxjQUNoQyxNQUFPLENBQ0wrQixnQkFBaUIsQ0FBQ2hDLEVBQVN4QyxRQUFTd0MsRUFBU3ZDLFNBQzdDd0Usa0JBQW1CM0ssS0FBS3NDLFVBQVUrRyxXQUNsQ3VCLGtCQUFtQixDQUFDSCxFQUFXdkUsUUFBU3VFLEVBQVd0RSxTQUNuRDBFLG9CQUFxQjdLLEtBQUt1RSxZQUFZOEUsYyxvQkFJMUMsV0FDRSxNQUFPLENBQ0xsQixLQUFLaUIsSUFBSXBKLEtBQUt1RSxZQUFZOEUsWUFDMUJySixLQUFLMEgsVUFDTDFILEtBQUs0SCxpQixFQS9WTHhHLEdBaVhBMEYsRUFBQUEsV0FDSixXQUFZdUQsRUFBTTNFLEVBQUdELEdBQUcsVUFDdEJ6RixLQUFLcUssS0FBT0EsRUFDWnJLLEtBQUswRixFQUFJQSxFQUNUMUYsS0FBS3lGLEVBQUlBLEUsNkJBR1gsU0FBSXFGLEdBT0YsSUFOQSxJQUFNQyxFQUFJL0ssS0FBS3FLLEtBQ2JXLEVBQUlGLEVBQU1ULEtBQ1YzRSxFQUFJMUYsS0FBSzBGLEVBQ1RELEVBQUl6RixLQUFLeUYsRUFDVHdGLEVBQUlILEVBQU1yRixFQUNWeUYsRUFBSSxJQUFJdkUsYUFBYSxJQUFJd0UsWUFBWSxFQUFJekYsRUFBSXVGLElBQ3RDRyxFQUFJLEVBQUdBLEVBQUlILEVBQUdHLElBQ3JCLElBQUssSUFBSTVGLEVBQUksRUFBR0EsRUFBSUUsRUFBR0YsSUFBSyxDQUUxQixJQURBLElBQUk2RixFQUFNLEVBQ0RDLEVBQUksRUFBR0EsRUFBSTdGLEVBQUc2RixJQUNyQkQsR0FBT04sRUFBRXZGLEVBQUlDLEVBQUk2RixHQUFLTixFQUFFTSxFQUFJTCxFQUFJRyxHQUVsQ0YsRUFBRTFGLEVBQUl5RixFQUFJRyxHQUFLQyxFQUduQixPQUFPLElBQUl2RSxFQUFPb0UsRUFBR3hGLEVBQUd1RixLLGlCQUcxQixTQUFJSCxHQUtGLElBSkEsSUFBTUMsRUFBSS9LLEtBQUtxSyxLQUNiVyxFQUFJRixFQUFNVCxLQUNWa0IsRUFBSVIsRUFBRXBKLE9BQ051SixFQUFJLElBQUl2RSxhQUFhLElBQUl3RSxZQUFZLEVBQUlJLElBQ2xDL0YsRUFBSSxFQUFHQSxFQUFJK0YsRUFBRy9GLElBQ3JCMEYsRUFBRTFGLEdBQUt1RixFQUFFdkYsR0FBS3dGLEVBQUV4RixHQUVsQixPQUFPLElBQUlzQixFQUFPb0UsRUFBR2xMLEtBQUswRixFQUFHMUYsS0FBS3lGLEssa0JBR3BDLFdBR0UsSUFGQSxJQUFNQSxFQUFJekYsS0FBS3FLLEtBQUsxSSxPQUNsQjZKLEVBQVN4TCxLQUFLcUssS0FBS3hELFFBQ1pyQixFQUFJLEVBQUdBLEVBQUlDLEVBQUdELElBQ3JCZ0csRUFBT2hHLEdBQUsyQyxLQUFLc0QsSUFBSSxFQUFHRCxFQUFPaEcsSUFFakMsT0FBTyxJQUFJc0IsRUFBTzBFLEVBQVF4TCxLQUFLMEYsRUFBRzFGLEtBQUt5RixLLHVCQUd6QyxXQUdFLElBRkEsSUFBTUEsRUFBSXpGLEtBQUtxSyxLQUFLMUksT0FDbEI2SixFQUFTeEwsS0FBS3FLLEtBQUt4RCxRQUNackIsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxJQUNyQmdHLEVBQU9oRyxHQUFLMkMsS0FBS3NELElBQUksR0FBTUQsRUFBT2hHLEdBQUlnRyxFQUFPaEcsSUFFL0MsT0FBTyxJQUFJc0IsRUFBTzBFLEVBQVF4TCxLQUFLMEYsRUFBRzFGLEtBQUt5RixLLGlCQUd6QyxXQUdFLElBRkEsSUFBTUEsRUFBSXpGLEtBQUtxSyxLQUFLMUksT0FDbEI2SixFQUFTeEwsS0FBS3FLLEtBQUt4RCxRQUNackIsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxJQUNqQmdHLEVBQU9oRyxHQUFLLElBQ2RnRyxFQUFPaEcsR0FBSzJDLEtBQUt1RCxNQUFNRixFQUFPaEcsS0FHbEMsT0FBTyxJQUFJc0IsRUFBTzBFLEVBQVF4TCxLQUFLMEYsRUFBRzFGLEtBQUt5RixLLHNCQUd6QyxXQUdFLElBRkEsSUFBTUEsRUFBSXpGLEtBQUtxSyxLQUFLMUksT0FDbEI2SixFQUFTeEwsS0FBS3FLLEtBQUt4RCxRQUNackIsRUFBSSxFQUFHQSxFQUFJQyxFQUFHRCxJQUNqQmdHLEVBQU9oRyxHQUFLLElBQ2RnRyxFQUFPaEcsR0FBSzJDLEtBQUt1RCxNQUFNRixFQUFPaEcsSUFBTSxHQUFNZ0csRUFBT2hHLElBR3JELE9BQU8sSUFBSXNCLEVBQU8wRSxFQUFReEwsS0FBSzBGLEVBQUcxRixLQUFLeUYsTyxFQTFFckNxQixHQWlJTzZFLEVBQWIsV0FDRSxXQUFZdEssRUFBY3VLLEVBQVMxQyxFQUFZM0gsR0FBSSxVQUNqRHZCLEtBQUtxQixhQUFlQSxFQUFhd0YsUUFHL0IsSUFBTWdGLEVBQVUsSUFBSXRLLEVBQUdjLE9BQU8sRUFBRyxNQUNqQ3JDLEtBQUtzQixNQUFRLElBQUlDLEVBQUd1SyxRQUFRRCxHQUc5QjdMLEtBQUt1QixHQUFLQSxFQUNWdkIsS0FBS2tKLFdBQWFBLEVBUWhCLElBSkEsSUFHSTZDLEVBSEVDLEVBQWFoTSxLQUFLc0IsTUFBTWlCLFdBQVcsSUFBSWhCLEVBQUdVLFdBRTFDZ0ssRUFBcUIsR0FFbEJ6RyxFQUFJLEVBQUdBLEVBQUl4RyxFQUFBQSxZQUFxQndHLElBQUssQ0FDNUMsSUFBTTBHLEVBQVloRCxFQUFXMUQsRUFBSSxHQUFLMEQsRUFBVzFELEdBQy9DMkcsRUFBWUQsR0FBYUgsRUFDM0JBLEVBQVlHLEVBQ1JDLEdBQWEzRyxHQUFLeEcsRUFBQUEsWUFBc0IsR0FHNUNpTixFQUFtQjVILEtBQUssQ0FBQytILEVBQWlCNUcsR0FBSTBELEVBQVcxRCxLQUkzRCxJQUFLLElBQUlBLEVBQUl5RyxFQUFtQnRLLE9BQVMsRUFBRzZELEdBQUssRUFBR0EsSUFBSyxDQUN2RCxJQUFNNkcsRUFBWSxJQUFJOUssRUFBRytLLFlBQ3pCRCxFQUFVRSxZQUNSLElBQUloTCxFQUFHYyxPQUFPNEosRUFBbUJ6RyxHQUFHLEdBQUl5RyxFQUFtQnpHLEdBQUcsSUFDOUQsSUFBSWpFLEVBQUdjLE9BQ0w0SixFQUFtQnpHLEVBQUksR0FBRyxHQUMxQnlHLEVBQW1CekcsRUFBSSxHQUFHLEtBRzlCLElBQU1nSCxFQUFXLElBQUlqTCxFQUFHcUIsYUFDeEI0SixFQUFTM0osVUFBVXdKLEdBQ25CRyxFQUFTekosYUFBYSxJQUN0QnlKLEVBQVN4SixnQkFBZ0IsSUFDSHpCLEVBQUdnQyxXQUN2QnlJLEVBQVd4SSxjQUFjZ0osR0FDekJqTCxFQUFHa0MsV0FJUCxjQUFrQixDQUFDLEVBQUd6RSxFQUFBQSxZQUFzQixHQUE1QyxlQUFnRCxDQUEzQyxJQUFNeU4sRUFBRyxLQUNaLEVBQWUsQ0FBQ0wsRUFBaUJLLEdBQU12RCxFQUFXdUQsSUFBM0NDLEVBQVAsS0FBVUMsRUFBVixLQUNNTixFQUFZLElBQUk5SyxFQUFHK0ssWUFDekJELEVBQVVFLFlBQ1IsSUFBSWhMLEVBQUdjLE9BQU9xSyxFQUFHQyxHQUNqQixJQUFJcEwsRUFBR2MsT0FBT3FLLEVBQUdDLEVBQUkzTixFQUFBQSxRQUV2QixJQUFNd04sRUFBVyxJQUFJakwsRUFBR3FCLGFBQ3hCNEosRUFBUzNKLFVBQVV3SixHQUNuQkcsRUFBU3pKLGFBQWEsSUFDdEJ5SixFQUFTeEosZ0JBQWdCLElBQ0h6QixFQUFHZ0MsV0FDdkJ5SSxFQUFXeEksY0FBY2dKLEdBQ3pCakwsRUFBR2tDLFdBSVR6RCxLQUFLNE0sT0FBUyxHQUNkNU0sS0FBSzZNLFVBQVVqQixHQUNmNUwsS0FBS3FGLE1BQVFyRixLQUFLNE0sT0FBTyxHQUFHdkgsTUFuRWhDLCtCQXNFRSxXQUFRLFVBQ1lyRixLQUFLNE0sUUFEakIsSUFDTiwyQkFBK0IsUUFDdkJqSCxNQUFNM0YsS0FBS3VCLElBRmIsaUNBdEVWLHVCQTRFRSxTQUFVcUssR0FDUixJQUFLLElBQUlwRyxFQUFJLEVBQUdBLEVBQUlvRyxFQUFTcEcsSUFDM0J4RixLQUFLNE0sT0FBT3ZJLEtBQUssSUFBSWpELEVBQU1wQixLQUFLcUIsYUFBY3JCLEtBQUtzQixNQUFPdEIsS0FBS3VCLEdBQUl2QixTQTlFekUsb0JBa0ZFLFNBQU91RyxHQUNMLElBRGMsRUFDVnVHLEVBQWEsRUFESCxJQUVJOU0sS0FBSzRNLFFBRlQsSUFFZCwyQkFBK0IsUUFDdkJHLE9BQU94RyxFQUFRTSxNQUFNaUcsRUFBWUEsRUFBYTlNLEtBQUtxRixRQUN6RHlILEdBQWM5TSxLQUFLcUYsTUFKUCxpQ0FsRmxCLG1CQTBGRSxZQUE4QixJQUF0QjJILEVBQXNCLEVBQXRCQSxRQUFTQyxFQUFhLEVBQWJBLFVBRVRDLEVBQWFELEVBQVV0TCxPQUFTM0IsS0FBS3FGLE1BQ3ZDckYsS0FBSzRNLE9BQU9qTCxPQUFTdUwsRUFBYUYsRUFBUXJMLFFBQzVDM0IsS0FBSzZNLFVBQVVLLEVBQWFGLEVBQVFyTCxPQUFTM0IsS0FBSzRNLE9BQU9qTCxRQUczRCxJQURBLElBQUltTCxFQUFhLEVBQ1J0SCxFQUFJLEVBQUdBLEVBQUkwSCxFQUFZMUgsSUFBSyxDQUNuQyxJQUFLLElBQUk0RixFQUFJLEVBQUdBLEVBQUk0QixFQUFRckwsT0FBUXlKLElBQUssQ0FDdkMsSUFBTStCLEVBQVFuTixLQUFLNE0sT0FBT3BILEVBQUl3SCxFQUFRckwsT0FBU3lKLEdBQy9DK0IsRUFBTUosT0FBT0UsRUFBVXBHLE1BQU1pRyxFQUFZQSxFQUFhOU0sS0FBS3FGLFFBQzNEOEgsRUFBTUMsVUFBWWhDLEVBRXBCMEIsR0FBYzlNLEtBQUtxRixNQUdyQnJGLEtBQUsyRixRQUNMLElBQUssSUFBSTBILEVBQU8sRUFBR0EsRUFBT0wsRUFBUSxHQUFHckwsT0FBUTBMLElBQVEsV0FDakNyTixLQUFLNE0sUUFENEIsSUFDbkQsMkJBQStCLEtBQXRCTyxFQUFzQixRQUM3QkEsRUFBTUcsT0FBT04sRUFBUUcsRUFBTUMsV0FBV0MsS0FGVyw4QkFJbkRyTixLQUFLc0IsTUFBTWlNLEtBQUt2TyxFQUFBQSxHQUFZLEVBQUcsR0FJakMsSUFEQSxJQUFNd08sRUFBa0IsR0FDZmhJLEVBQUksRUFBR0EsRUFBSTBILEVBQVkxSCxJQUFLLENBQ25DLElBRG1DLEVBQzdCaUksRUFBU3pOLEtBQUs0TSxPQUFPcEgsRUFBSXdILEVBQVFyTCxRQUNyQytMLEVBQVdELEVBQU9sSCxRQUNoQm9ILEVBQVUsRUFIcUIsSUFJZkYsRUFBT2hILFNBSlEsSUFJbkMsMkJBQW9DLG1CQUNYNEQsTUFEVyxJQUNsQywyQkFBNkIsS0FBcEJ1RCxFQUFvQixRQUMzQkQsR0FBV0MsRUFBS0EsR0FGZ0IsZ0NBSkQsOEJBU25DRCxHQUFXRixFQUFPbkksWUFDbEIsSUFWbUMsRUFVL0J1SSxFQUFXLEVBVm9CLElBV2JKLEVBQU8xRyxRQVhNLElBV25DLDJCQUFxQyxtQkFDUnNELE1BRFEsSUFDbkMsMkJBQWlDLEtBQXhCeUQsRUFBd0IsUUFDL0JELEdBQVlDLEVBQU9BLEdBRmMsZ0NBWEYsOEJBZ0JuQ0QsR0FBWUosRUFBT2xJLFVBRW5CLElBREEsSUFBTXdJLEVBQWEsR0FDVjNDLEVBQUksRUFBR0EsRUFBSTRCLEVBQVFyTCxPQUFReUosSUFBSyxDQUN2QyxJQUFNNEMsRUFBWWhPLEtBQUs0TSxPQUFPcEgsRUFBSXdILEVBQVFyTCxPQUFTeUosR0FDakQ2QyxFQUFNRCxFQUFVM0csZUFBaUJySSxFQUFBQSxNQUNqQ2tQLEVBQWVGLEVBQVVsRyxlQUFpQjlJLEVBQUFBLE1BQzFDbVAsRUFBU0gsRUFBVW5HLFlBQWM3SSxFQUFBQSxNQUNuQytPLEVBQVcxSixLQUFLLENBQUU0SixJQUFBQSxFQUFLQyxhQUFBQSxFQUFjQyxPQUFBQSxJQUd2Q1gsRUFBZ0JuSixLQUFLLENBQUVxSixTQUFBQSxFQUFVQyxRQUFBQSxFQUFTRSxTQUFBQSxFQUFVRSxXQUFBQSxJQUV0RCxPQUFPUCxJQS9JWCxvQkFrSkUsU0FBT1IsR0FDTCxJQUFLLElBQUl4SCxFQUFJLEVBQUdBLEVBQUl4RixLQUFLNE0sT0FBT2pMLE9BQVE2RCxJQUN4QnhGLEtBQUs0TSxPQUFPcEgsR0FDcEI4SCxPQUFPTixFQUFReEgsSUFFdkJ4RixLQUFLc0IsTUFBTWlNLEtBQUt2TyxFQUFBQSxHQUFZLEVBQUcsS0F2Sm5DLGtCQTBKRSxTQUFLb1AsRUFBT0MsR0FBUSxVQUNBck8sS0FBSzRNLFFBREwsSUFDbEIsMkJBQStCLFFBQ3ZCMEIsS0FBS0YsRUFBT0MsR0FGRixtQ0ExSnRCLEtBMlJPLFNBQVNqQyxFQUFpQkssR0FDL0IsT0FBUUEsR0FBT3pOLEVBQUFBLFlBQXNCLEdBQUssR0FBS0EsRUFBQUEscUJBR2pELFNBQVNpSyxFQUFleUQsRUFBR3hELEdBRXpCLElBQU1xRixHQURON0IsRUFBSXZFLEtBQUtxRyxJQUFJckcsS0FBS3NELElBQUlpQixHQUFJMU4sRUFBQUEsaUJBQTBCQSxFQUFBQSxrQkFDaENBLEVBQUFBLHFCQUNsQnlQLEdBQWF6UCxFQUFBQSxZQUFzQixHQUFLLEVBQ3hDMFAsRUFBVSxDQUFDdkcsS0FBS3dHLE1BQU1KLEdBQVVwRyxLQUFLeUcsS0FBS0wsSUFDMUNNLEVBQUtILEVBQVFJLEtBQUksU0FBQ0MsR0FBRCxPQUFPL1AsRUFBQUEscUJBQStCK1AsS0FDdkRDLEVBQUtOLEVBQVFJLEtBQUksU0FBQ0MsR0FBRCxPQUFPN0YsRUFBVzZGLEVBQUlOLE1BRXpDLEdBQUlJLEVBQUcsSUFBTUEsRUFBRyxHQUNkLE9BQU9HLEVBQUcsR0FFWixJQUVFQyxHQUZhRCxFQUFHLEdBQUtBLEVBQUcsS0FBT0gsRUFBRyxHQUFLQSxFQUFHLEtBQ2xDbkMsRUFBSW1DLEVBQUcsSUFFakIsT0FBT0csRUFBRyxHQUFLQyxFLDBHQzV4QmpCLElBQUl6TixFQUFhLEtBRWpCME4sVUFBWSxTQUFDQyxHQUNYLEksSUFBQSxHLEVBQW9CQSxFQUFFOUUsSyxFQUF0QixFLDh6QkFBTytFLEVBQVAsS0FBYUMsRUFBYixLQUNBLEdBQVksY0FBUkQsR0FDRkUsRUFBQUEsRUFBQUEsS0FBZUMsTUFBSyxTQUFDaE8sR0FDbkJDLEVBQWEsSUFBSW1LLEVBQVcsQ0FBQyxFQUFHLEdBQUksRUFBRzBELEVBQUs5TixXQUV6QyxHQUFZLG9CQUFSNk4sRUFBNEIsQ0FDckMsSUFBTTVCLEVBQWtCaE0sRUFBV2dPLE1BQU1ILEdBQ3pDSSxZQUFZLENBQUMsa0JBQW1CakMsTyx5QkNmaENrQyxFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhRSxRQUdyQixJQUFJQyxFQUFTTixFQUF5QkUsR0FBWSxDQUdqREcsUUFBUyxJQU9WLE9BSEFFLEVBQW9CTCxHQUFVSSxFQUFRQSxFQUFPRCxRQUFTSixHQUcvQ0ssRUFBT0QsUUFJZkosRUFBb0JqSyxFQUFJdUssRUFHeEJOLEVBQW9CakQsRUFBSSxLQUd2QixJQUFJd0QsRUFBc0JQLEVBQW9CUSxPQUFFTCxFQUFXLENBQUMsTUFBTSxJQUFPSCxFQUFvQixRQUU3RixPQURzQkEsRUFBb0JRLEVBQUVELElMaEN6Q3BSLEVBQVcsR0FDZjZRLEVBQW9CUSxFQUFJLENBQUMzRSxFQUFRNEUsRUFBVUMsRUFBSUMsS0FDOUMsSUFBR0YsRUFBSCxDQU1BLElBQUlHLEVBQWVDLEVBQUFBLEVBQ25CLElBQVNoTCxFQUFJLEVBQUdBLEVBQUkxRyxFQUFTNkMsT0FBUTZELElBQUssQ0FHekMsSUFGQSxJQUFLNEssRUFBVUMsRUFBSUMsR0FBWXhSLEVBQVMwRyxHQUNwQ2lMLEdBQVksRUFDUHJGLEVBQUksRUFBR0EsRUFBSWdGLEVBQVN6TyxPQUFReUosTUFDcEIsRUFBWGtGLEdBQXNCQyxHQUFnQkQsSUFBYUksT0FBT0MsS0FBS2hCLEVBQW9CUSxHQUFHUyxPQUFPQyxHQUFTbEIsRUFBb0JRLEVBQUVVLEdBQUtULEVBQVNoRixNQUM5SWdGLEVBQVNVLE9BQU8xRixJQUFLLElBRXJCcUYsR0FBWSxFQUNUSCxFQUFXQyxJQUFjQSxFQUFlRCxJQUc3QyxHQUFHRyxFQUFXLENBQ2IzUixFQUFTZ1MsT0FBT3RMLElBQUssR0FDckIsSUFBSXVMLEVBQUlWLFNBQ0VQLElBQU5pQixJQUFpQnZGLEVBQVN1RixJQUdoQyxPQUFPdkYsRUF2Qk44RSxFQUFXQSxHQUFZLEVBQ3ZCLElBQUksSUFBSTlLLEVBQUkxRyxFQUFTNkMsT0FBUTZELEVBQUksR0FBSzFHLEVBQVMwRyxFQUFJLEdBQUcsR0FBSzhLLEVBQVU5SyxJQUFLMUcsRUFBUzBHLEdBQUsxRyxFQUFTMEcsRUFBSSxHQUNyRzFHLEVBQVMwRyxHQUFLLENBQUM0SyxFQUFVQyxFQUFJQyxJTUovQlgsRUFBb0JxQixFQUFJLENBQUNqQixFQUFTa0IsS0FDakMsSUFBSSxJQUFJSixLQUFPSSxFQUNYdEIsRUFBb0J1QixFQUFFRCxFQUFZSixLQUFTbEIsRUFBb0J1QixFQUFFbkIsRUFBU2MsSUFDNUVILE9BQU9TLGVBQWVwQixFQUFTYyxFQUFLLENBQUVPLFlBQVksRUFBTUMsSUFBS0osRUFBV0osTUNKM0VsQixFQUFvQjJCLEVBQUksR0FHeEIzQixFQUFvQlIsRUFBS29DLEdBQ2pCQyxRQUFRQyxJQUFJZixPQUFPQyxLQUFLaEIsRUFBb0IyQixHQUFHSSxRQUFPLENBQUNDLEVBQVVkLEtBQ3ZFbEIsRUFBb0IyQixFQUFFVCxHQUFLVSxFQUFTSSxHQUM3QkEsSUFDTCxLQ05KaEMsRUFBb0JpQyxFQUFLTCxHQUVaQSxFQUFMLDJCQ0ZSNUIsRUFBb0JrQyxTQUFZTixNQ0RoQzVCLEVBQW9CbUMsRUFBSSxXQUN2QixHQUEwQixpQkFBZkMsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPL1IsTUFBUSxJQUFJZ1MsU0FBUyxjQUFiLEdBQ2QsTUFBTzdDLEdBQ1IsR0FBc0IsaUJBQVg4QyxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QnRDLEVBQW9CdUIsRUFBSSxDQUFDZ0IsRUFBS0MsSUFBVXpCLE9BQU8wQixVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxHLE1DQWxGLElBQUlJLEVBQ0E1QyxFQUFvQm1DLEVBQUVVLGdCQUFlRCxFQUFZNUMsRUFBb0JtQyxFQUFFVyxTQUFXLElBQ3RGLElBQUlDLEVBQVcvQyxFQUFvQm1DLEVBQUVZLFNBQ3JDLElBQUtILEdBQWFHLElBQ2JBLEVBQVNDLGdCQUNaSixFQUFZRyxFQUFTQyxjQUFjQyxNQUMvQkwsR0FBVyxDQUNmLElBQUlNLEVBQVVILEVBQVNJLHFCQUFxQixVQUN6Q0QsRUFBUWxSLFNBQVE0USxFQUFZTSxFQUFRQSxFQUFRbFIsT0FBUyxHQUFHaVIsS0FLN0QsSUFBS0wsRUFBVyxNQUFNLElBQUlRLE1BQU0seURBQ2hDUixFQUFZQSxFQUFVUyxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRnJELEVBQW9CMUUsRUFBSXNILEcsU0NmeEI1QyxFQUFvQjNFLEVBQUlpSSxLQUFLUixTQUFXLEdBSXhDLElBQUlTLEVBQWtCLENBQ3JCLElBQUssR0FnQk52RCxFQUFvQjJCLEVBQUU5TCxFQUFJLENBQUMrTCxFQUFTSSxLQUUvQnVCLEVBQWdCM0IsSUFFbEJpQixjQUFjN0MsRUFBb0IxRSxFQUFJMEUsRUFBb0JpQyxFQUFFTCxLQUsvRCxJQUFJNEIsRUFBcUJGLEtBQXdDLGtDQUFJQSxLQUF3QyxtQ0FBSyxHQUM5R0csRUFBNkJELEVBQW1COU8sS0FBS2dQLEtBQUtGLEdBQzlEQSxFQUFtQjlPLEtBdkJDZ0csSUFDbkIsSUFBSytGLEVBQVVrRCxFQUFhQyxHQUFXbEosRUFDdkMsSUFBSSxJQUFJdUYsS0FBWTBELEVBQ2hCM0QsRUFBb0J1QixFQUFFb0MsRUFBYTFELEtBQ3JDRCxFQUFvQmpLLEVBQUVrSyxHQUFZMEQsRUFBWTFELElBSWhELElBREcyRCxHQUFTQSxFQUFRNUQsR0FDZFMsRUFBU3pPLFFBQ2R1UixFQUFnQjlDLEVBQVNvRCxPQUFTLEVBQ25DSixFQUEyQi9JLEssR1puQnhCdEwsRUFBTzRRLEVBQW9CakQsRUFDL0JpRCxFQUFvQmpELEVBQUksSUFDaEJpRCxFQUFvQlIsRUFBRSxLQUFLSSxLQUFLeFEsR2FEZDRRLEVBQW9CakQsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvc3RhcnR1cCBjaHVuayBkZXBlbmRlbmNpZXMiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlLy4vc3JjL3BhZ2VzL3RpcHB5L2dsb2JhbHMuanMiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlLy4vc3JjL3BhZ2VzL3RpcHB5L3RpcHB5LmpzIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS8uL3NyYy9wYWdlcy90aXBweS93b3JrZXJzL3NpbXVsYXRpb24td29ya2VyLmpzIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvaW1wb3J0U2NyaXB0cyBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIG5leHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLng7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnggPSAoKSA9PiB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoMzM3KS50aGVuKG5leHQpO1xufTsiLCJleHBvcnQgY29uc3QgZ2xvYmFscyA9IHtcbiAgdzogODAwLFxuICBoOiA0MDAsXG4gIGxJbnB1dENvZGVzOiBbXCJLZXlKXCIsIFwiQXJyb3dMZWZ0XCJdLFxuICBySW5wdXRDb2RlczogW1wiS2V5S1wiLCBcIkFycm93UmlnaHRcIl0sXG4gIHhPZmZzOiBbLTAuMywgLTAuMSwgMC4xLCAwLjNdLFxuICB0czogMS4wIC8gNjAsXG4gIC8vIHNpbkxpbTogMC4zLFxuICBzaW5MaW06IDAuNCxcbiAgLy8gZGlyZWN0aW9uU3RlcDogMC4wMixcbiAgc2luU3RlcDogMC4wMyxcbiAgc2luRGVjYXk6IDAuMDEsXG4gIHZlbExpbTogNCxcbiAgdmVsRGVjYXk6IDAuMDEsXG4gIGdyb3VuZEhhbGZXaWR0aDogMTAwLFxuICBncm91bmRGbGF0Q2VudGVySGFsZldpZHRoOiAxLFxuICBncm91bmREZXRhaWxJbnRlcnZhbDogMC4yLFxuICAvLyBuVGVycmFpblB0czogMiAqICh0aGlzLmdyb3VuZEhhbGZXaWR0aCAvIHRoaXMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwpICsgMSxcbiAgZ2V0IG5UZXJyYWluUHRzKCkge1xuICAgIHJldHVybiAyICogKHRoaXMuZ3JvdW5kSGFsZldpZHRoIC8gdGhpcy5ncm91bmREZXRhaWxJbnRlcnZhbCkgKyAxXG4gIH0sXG4gIHdhbGxIOiAwLjksXG4gIHdhbGxXOiAwLjUsXG4gIC8vIHNsb3BlTWFnOiAwLjEsXG4gIHNsb3BlRGVjYXk6IDAuOSxcbiAgc2xvcGVMaW06IDAuNCxcbiAgc2xvcGVEaWZmTWFnOiAwLjEyNSxcbiAgc2xvcGVEaWZmRGVjYXk6IDEuMSxcbiAgc2xvcGVEaWZmTGltOiAwLjIsXG4gIGdldCBiYXJNYXgoKSB7XG4gICAgY29uc3QgbGltID0gdGhpcy50YXJnZXRUeXBlID09IFwidmVsXCIgPyB0aGlzLnZlbExpbSA6IHRoaXMuc2luTGltXG4gICAgcmV0dXJuICgwLjUgKiAwLjkgKiB0aGlzLncpIC8gbGltXG4gIH0sXG4gIGJhckhlaWdodDogMjUsXG4gIC8vIHNjb3JlRGVub21FcHM6IDAuMDEsXG4gIC8vIHNjb3JlRGVub21FcHM6IDAuMSxcbiAgZ2V0IHNjb3JlRGVub21FcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2luTGltXG4gIH0sXG4gIGNyYXNoU2luTGltaXQ6IDAuOCxcbiAgbWF4VG9ycXVlOiAxLjAsXG4gIG5Xb3JrZXJzOiA4LFxuICBtdWx0aXBsaWVyOiAyLFxuICBlcExlbjogODAwLFxuICB0d2l0Y2hpbmVzc2VzOiBbMCwgMC4xLCAwLjA1LCAwLjAyNSwgMC4wMSwgMC4wMDUsIDAuMDAyNSwgbnVsbF0sXG4gIGNtYVNpZ21hOiAwLjUsXG4gIC8vIHRhcmdldFR5cGU6IFwic2luXCIsXG4gIHRhcmdldFR5cGU6IFwidmVsXCIsXG59XG4iLCJpbXBvcnQgeyBnbG9iYWxzIH0gZnJvbSBcIi4vZ2xvYmFscy5qc1wiXG5pbXBvcnQgeyByYW5kX25vcm1hbCB9IGZyb20gXCIuL3JhbmRvbV9ub3JtYWwuanNcIlxuXG5jbGFzcyBUaXBweSB7XG4gIGNvbnN0cnVjdG9yKHdoZWVsUG9zSW5pdCwgd29ybGQsIGIyLCBwb3B1bGF0aW9uKSB7XG4gICAgdGhpcy5wb3B1bGF0aW9uID0gcG9wdWxhdGlvblxuICAgIGNvbnNvbGUuYXNzZXJ0KHdoZWVsUG9zSW5pdC5sZW5ndGggPT0gMiwgXCJUaXBweSByZXF1aXJlcyAyZCB3aGVlbFBvc1wiKVxuICAgIC8vIHRoaXMud2hlZWxQb3NJbml0ID0gd2hlZWxQb3NJbml0LnNsaWNlKClcbiAgICB0aGlzLndoZWVsUiA9IDAuMjVcbiAgICB0aGlzLndoZWVsUG9zSW5pdCA9IFt3aGVlbFBvc0luaXRbMF0sIHdoZWVsUG9zSW5pdFsxXSAtIHRoaXMud2hlZWxSXVxuICAgIGNvbnN0IHdoZWVsRnJpY3Rpb24gPSAwLjksXG4gICAgICB3aGVlbERlbnNpdHkgPSAwLjUsXG4gICAgICB3aGVlbFJlc3RpdHV0aW9uID0gMC4xLFxuICAgICAgY2hhc3Npc0RlbnNpdHkgPSAyLjBcbiAgICB0aGlzLmNoYXNzaXNIID0gMS4wXG4gICAgdGhpcy5jaGFzc2lzVyA9IDAuM1xuICAgIHRoaXMuYXhsZU9mZnNldFkgPSAwLjFcblxuICAgIC8vIGNyZWF0ZSB3aGVlbFxuICAgIHtcbiAgICAgIGNvbnN0IGJkID0gbmV3IGIyLmIyQm9keURlZigpXG4gICAgICBiZC5zZXRfdHlwZShiMi5iMl9keW5hbWljQm9keSlcbiAgICAgIGJkLnNldF9wb3NpdGlvbihuZXcgYjIuYjJWZWMyKC4uLnRoaXMud2hlZWxQb3NJbml0KSlcbiAgICAgIHRoaXMud2hlZWxCb2R5ID0gd29ybGQuQ3JlYXRlQm9keShiZClcblxuICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgYjIuYjJDaXJjbGVTaGFwZSgpXG4gICAgICBzaGFwZS5zZXRfbV9yYWRpdXModGhpcy53aGVlbFIpXG5cbiAgICAgIGNvbnN0IGZkID0gbmV3IGIyLmIyRml4dHVyZURlZigpXG4gICAgICBmZC5zZXRfc2hhcGUoc2hhcGUpXG4gICAgICBmZC5zZXRfZGVuc2l0eSh3aGVlbERlbnNpdHkpXG4gICAgICBmZC5zZXRfZnJpY3Rpb24od2hlZWxGcmljdGlvbilcbiAgICAgIGZkLnNldF9yZXN0aXR1dGlvbih3aGVlbFJlc3RpdHV0aW9uKVxuXG4gICAgICBjb25zdCBmaWx0ZXIgPSBmZC5nZXRfZmlsdGVyKClcbiAgICAgIGZpbHRlci5zZXRfY2F0ZWdvcnlCaXRzKDB4MDAwMilcbiAgICAgIGZpbHRlci5zZXRfbWFza0JpdHMoMHgwMDAxKVxuICAgICAgZmQuc2V0X2ZpbHRlcihmaWx0ZXIpXG4gICAgICBjb25zdCBmaXh0dXJlID0gYjIuY2FzdE9iamVjdChcbiAgICAgICAgdGhpcy53aGVlbEJvZHkuQ3JlYXRlRml4dHVyZShmZCksXG4gICAgICAgIGIyLmIyRml4dHVyZVxuICAgICAgKVxuICAgICAgZml4dHVyZS5wYXJ0VHlwZSA9IFwid2hlZWxcIlxuICAgICAgZml4dHVyZS5zcG90ID0gdGhpc1xuXG4gICAgICB0aGlzLndoZWVsTWFzcyA9IHRoaXMud2hlZWxCb2R5LkdldE1hc3MoKVxuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBjaGFzc2lzXG4gICAge1xuICAgICAgY29uc3QgZWRnZVggPSAwLjUgKiB0aGlzLmNoYXNzaXNXLFxuICAgICAgICBlZGdlWSA9IDAuNSAqIHRoaXMuY2hhc3Npc0gsXG4gICAgICAgIGN1dG91dFggPSAwLjIgKiB0aGlzLmNoYXNzaXNXLFxuICAgICAgICBjdXRvdXRZID0gMC4zNSAqIHRoaXMuY2hhc3Npc0hcblxuICAgICAgdGhpcy5jaGFzc2lzVmVydGljZXMgPSBbXG4gICAgICAgIFsrZWRnZVgsIC1lZGdlWV0sXG4gICAgICAgIFstZWRnZVgsIC1lZGdlWV0sXG4gICAgICAgIFstZWRnZVgsICtjdXRvdXRZXSxcbiAgICAgICAgWy1jdXRvdXRYLCArZWRnZVldLFxuICAgICAgICBbK2N1dG91dFgsICtlZGdlWV0sXG4gICAgICAgIFsrZWRnZVgsICtjdXRvdXRZXSxcbiAgICAgIF1cblxuICAgICAgY29uc3QgYjJDaGFzc2lzVmVydGljZXMgPSBbXVxuICAgICAgZm9yIChsZXQgdmVydGV4IG9mIHRoaXMuY2hhc3Npc1ZlcnRpY2VzKSB7XG4gICAgICAgIGIyQ2hhc3Npc1ZlcnRpY2VzLnB1c2goXG4gICAgICAgICAgbmV3IGIyLmIyVmVjMihcbiAgICAgICAgICAgIHZlcnRleFswXSArIHRoaXMud2hlZWxQb3NJbml0WzBdLFxuICAgICAgICAgICAgdmVydGV4WzFdICsgdGhpcy53aGVlbFBvc0luaXRbMV1cbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFzc2lzUG9zSW5pdCA9IFtcbiAgICAgICAgdGhpcy53aGVlbFBvc0luaXRbMF0sXG4gICAgICAgIHRoaXMud2hlZWxQb3NJbml0WzFdIC0gMC41ICogdGhpcy5jaGFzc2lzSCArIHRoaXMuYXhsZU9mZnNldFksXG4gICAgICBdXG4gICAgICBjb25zdCBiZCA9IG5ldyBiMi5iMkJvZHlEZWYoKVxuICAgICAgYmQuc2V0X3R5cGUoYjIuYjJfZHluYW1pY0JvZHkpXG4gICAgICBiZC5zZXRfcG9zaXRpb24obmV3IGIyLmIyVmVjMiguLi50aGlzLmNoYXNzaXNQb3NJbml0KSlcbiAgICAgIC8vIGJkLnNldF9saW5lYXJEYW1waW5nKDAuMSlcbiAgICAgIC8vIGJkLnNldF9hbmd1bGFyRGFtcGluZygwLjEpXG4gICAgICB0aGlzLmNoYXNzaXNCb2R5ID0gd29ybGQuQ3JlYXRlQm9keShiZClcbiAgICAgIGNvbnN0IHNoYXBlID0gdGhpcy5iMkNyZWF0ZVBvbHlnb25TaGFwZShiMkNoYXNzaXNWZXJ0aWNlcywgYjIpXG4gICAgICBjb25zdCBmZCA9IG5ldyBiMi5iMkZpeHR1cmVEZWYoKVxuICAgICAgY29uc3QgZmlsdGVyID0gZmQuZ2V0X2ZpbHRlcigpXG4gICAgICBmaWx0ZXIuc2V0X2NhdGVnb3J5Qml0cygweDAwMDIpXG4gICAgICBmaWx0ZXIuc2V0X21hc2tCaXRzKDB4MDAwMSlcbiAgICAgIGZkLnNldF9maWx0ZXIoZmlsdGVyKVxuICAgICAgZmQuc2V0X2RlbnNpdHkoY2hhc3Npc0RlbnNpdHkpXG4gICAgICBmZC5zZXRfc2hhcGUoc2hhcGUpXG4gICAgICAvLyBmZC5zZXRfZnJpY3Rpb24oMC4zKVxuICAgICAgLy8gZmQuc2V0X3Jlc3RpdHV0aW9uKDAuMSlcbiAgICAgIGNvbnN0IGZpeHR1cmUgPSBiMi5jYXN0T2JqZWN0KFxuICAgICAgICB0aGlzLmNoYXNzaXNCb2R5LkNyZWF0ZUZpeHR1cmUoZmQpLFxuICAgICAgICBiMi5iMkZpeHR1cmVcbiAgICAgIClcbiAgICAgIGZpeHR1cmUucGFydFR5cGUgPSBcImNoYXNzaXNcIlxuICAgICAgZml4dHVyZS5zcG90ID0gdGhpc1xuICAgICAgdGhpcy5jaGFzc2lzTWFzcyA9IHRoaXMuY2hhc3Npc0JvZHkuR2V0TWFzcygpXG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGpvaW50XG4gICAge1xuICAgICAgY29uc3QgamQgPSBuZXcgYjIuYjJSZXZvbHV0ZUpvaW50RGVmKClcbiAgICAgIGpkLkluaXRpYWxpemUoXG4gICAgICAgIHRoaXMud2hlZWxCb2R5LFxuICAgICAgICB0aGlzLmNoYXNzaXNCb2R5LFxuICAgICAgICBuZXcgYjIuYjJWZWMyKC4uLnRoaXMud2hlZWxQb3NJbml0KVxuICAgICAgKVxuXG4gICAgICBqZC5zZXRfZW5hYmxlTW90b3IodHJ1ZSlcbiAgICAgIGpkLnNldF9tYXhNb3RvclRvcnF1ZShnbG9iYWxzLm1heFRvcnF1ZSlcbiAgICAgIHRoaXMuYXhsZSA9IGIyLmNhc3RPYmplY3Qod29ybGQuQ3JlYXRlSm9pbnQoamQpLCBiMi5iMlJldm9sdXRlSm9pbnQpXG4gICAgfVxuXG4gICAgdGhpcy5pbnB1dERpbSA9IHRoaXMuZ2V0SW5wdXRzKDApLmxlbmd0aFxuICAgIC8vIC8vIHRoaXMuc2hhcGVzID0gW3RoaXMuaW5wdXREaW0sIDE2LCA4LCA0XVxuICAgIC8vIC8vIHRoaXMuc2hhcGVzID0gW3RoaXMuaW5wdXREaW0sIDIwLCAxMCwgNF1cbiAgICB0aGlzLnNoYXBlcyA9IFt0aGlzLmlucHV0RGltLCAxMiwgOCwgMV1cblxuICAgIHRoaXMubl9kaW0gPSAwXG4gICAgdGhpcy53ZWlnaHRDb3VudCA9IDBcbiAgICB0aGlzLmJpYXNDb3VudCA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2hhcGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgY29uc3QgbiA9IHRoaXMuc2hhcGVzW2ldLFxuICAgICAgICBtID0gdGhpcy5zaGFwZXNbaSArIDFdXG4gICAgICB0aGlzLm5fZGltICs9IChuICsgMSkgKiBtXG4gICAgICB0aGlzLndlaWdodENvdW50ICs9IG4gKiBtXG4gICAgICB0aGlzLmJpYXNDb3VudCArPSBtXG4gICAgfVxuXG4gICAgdGhpcy5yZXNldChiMilcbiAgfVxuXG4gIGIyQ3JlYXRlUG9seWdvblNoYXBlKHZlcnRpY2VzLCBiMikge1xuICAgIGNvbnN0IHNoYXBlID0gbmV3IGIyLmIyUG9seWdvblNoYXBlKClcbiAgICBjb25zdCBidWZmZXIgPSBiMi5fbWFsbG9jKHZlcnRpY2VzLmxlbmd0aCAqIDgpXG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBiMi5IRUFQRjMyWyhidWZmZXIgKyBvZmZzZXQpID4+IDJdID0gdmVydGljZXNbaV0uZ2V0X3goKVxuICAgICAgYjIuSEVBUEYzMlsoYnVmZmVyICsgKG9mZnNldCArIDQpKSA+PiAyXSA9IHZlcnRpY2VzW2ldLmdldF95KClcbiAgICAgIG9mZnNldCArPSA4XG4gICAgfVxuICAgIGNvbnN0IHB0cl93cmFwcGVkID0gYjIud3JhcFBvaW50ZXIoYnVmZmVyLCBiMi5iMlZlYzIpXG4gICAgc2hhcGUuU2V0KHB0cl93cmFwcGVkLCB2ZXJ0aWNlcy5sZW5ndGgpXG4gICAgcmV0dXJuIHNoYXBlXG4gIH1cblxuICBzZXRXdHMoZmxhdFd0cykge1xuICAgIC8vIHRoaXMuZmxhdFd0cyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5uX2RpbSkubWFwKCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpXG4gICAgdGhpcy5mbGF0V3RzID0gZmxhdFd0c1xuICAgIGxldCBmbGF0V3RJZHggPSAwXG4gICAgdGhpcy53ZWlnaHRzID0gW11cbiAgICAvLyB0aGlzLndlaWdodENvdW50ID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaGFwZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBjb25zdCBuID0gdGhpcy5zaGFwZXNbaV0sXG4gICAgICAgIG0gPSB0aGlzLnNoYXBlc1tpICsgMV0sXG4gICAgICAgIG5ld1dlaWdodCA9IEZsb2F0MzJBcnJheS5mcm9tKFxuICAgICAgICAgIHRoaXMuZmxhdFd0cy5zbGljZShmbGF0V3RJZHgsIGZsYXRXdElkeCArIG4gKiBtKVxuICAgICAgICApXG4gICAgICAvLyB0aGlzLndlaWdodENvdW50ICs9IG5ld1dlaWdodC5sZW5ndGhcbiAgICAgIHRoaXMud2VpZ2h0cy5wdXNoKG5ldyBNYXRyaXgobmV3V2VpZ2h0LCBuLCBtKSlcbiAgICAgIGZsYXRXdElkeCArPSBuICogbVxuICAgIH1cbiAgICB0aGlzLmJpYXNlcyA9IFtdXG4gICAgLy8gdGhpcy5iaWFzQ291bnQgPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNoYXBlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGNvbnN0IG4gPSAxLFxuICAgICAgICBtID0gdGhpcy5zaGFwZXNbaSArIDFdLFxuICAgICAgICBuZXdCaWFzID0gRmxvYXQzMkFycmF5LmZyb20oXG4gICAgICAgICAgdGhpcy5mbGF0V3RzLnNsaWNlKGZsYXRXdElkeCwgZmxhdFd0SWR4ICsgbiAqIG0pXG4gICAgICAgIClcbiAgICAgIC8vIHRoaXMuYmlhc0NvdW50ICs9IG5ld0JpYXMubGVuZ3RoXG4gICAgICB0aGlzLmJpYXNlcy5wdXNoKG5ldyBNYXRyaXgobmV3QmlhcywgbiwgbSkpXG4gICAgICBmbGF0V3RJZHggKz0gbiAqIG1cbiAgICB9XG4gIH1cblxuICByZXNldChiMikge1xuICAgIHRoaXMuY2hhc3Npc0JvZHkuU2V0VHJhbnNmb3JtKG5ldyBiMi5iMlZlYzIoLi4udGhpcy5jaGFzc2lzUG9zSW5pdCksIDApXG4gICAgdGhpcy5jaGFzc2lzQm9keS5TZXRMaW5lYXJWZWxvY2l0eShuZXcgYjIuYjJWZWMyKDAsIDApKVxuICAgIHRoaXMuY2hhc3Npc0JvZHkuU2V0QW5ndWxhclZlbG9jaXR5KDApXG4gICAgdGhpcy5jaGFzc2lzQm9keS5TZXRBd2FrZSgxKVxuXG4gICAgdGhpcy53aGVlbEJvZHkuU2V0VHJhbnNmb3JtKG5ldyBiMi5iMlZlYzIoLi4udGhpcy53aGVlbFBvc0luaXQpLCAwKVxuICAgIHRoaXMud2hlZWxCb2R5LlNldExpbmVhclZlbG9jaXR5KG5ldyBiMi5iMlZlYzIoMCwgMCkpXG4gICAgdGhpcy53aGVlbEJvZHkuU2V0QW5ndWxhclZlbG9jaXR5KDApXG4gICAgdGhpcy53aGVlbEJvZHkuU2V0QXdha2UoMSlcblxuICAgIHRoaXMudGFyZ2V0U3FFcnJTdW0gPSAwXG4gICAgdGhpcy50YXJnZXRQcmV2ID0gbnVsbFxuXG4gICAgdGhpcy5wcmV2T3V0cHV0ID0gMFxuICAgIHRoaXMub3V0cHV0RGlmZlNxU3VtID0gMFxuXG4gICAgdGhpcy5wcmV2V2hlZWxWZWxYID0gMFxuICAgIHRoaXMud2hlZWxBY2NYID0gMFxuICAgIHRoaXMucHJldkNoYXNzaXNWZWxYID0gMFxuICAgIHRoaXMuY2hhc3Npc0FjY1ggPSAwXG5cbiAgICB0aGlzLmRyaWZ0WFNxU3VtID0gMFxuICAgIHRoaXMuY3Jhc2hTdGVwQ291bnQgPSAwXG4gIH1cblxuICB1cGRhdGVUYXJnZXRTY29yZSh0YXJnZXQsIGN1cnJlbnQpIHtcbiAgICBjb25zdCBkaWZmID0gdGFyZ2V0IC0gY3VycmVudCxcbiAgICAgIGRpZmZTcSA9IGRpZmYgKiBkaWZmLFxuICAgICAgZGVub20gPSBNYXRoLmFicyh0YXJnZXQpICsgZ2xvYmFscy5zY29yZURlbm9tRXBzXG4gICAgLy8gdGhpcy50YXJnZXRTcUVyclN1bSArPSBkaWZmU3EgLyBkZW5vbVxuICAgIHRoaXMudGFyZ2V0U3FFcnJTdW0gKz0gZ2xvYmFscy50YXJnZXRUeXBlID09PSBcInZlbFwiID8gZGlmZlNxIDogMWUyICogZGlmZlNxXG4gIH1cblxuICBzZXRTcGVlZChzcGVlZCkge1xuICAgIHRoaXMuYXhsZS5TZXRNb3RvclNwZWVkKHNwZWVkKVxuICB9XG5cbiAgZ2V0SW5wdXRzKHRhcmdldCkge1xuICAgIHRoaXMucmV2ZXJzZSA9IHRhcmdldCAhPSAwID8gTWF0aC5zaWduKHRhcmdldCkgOiAxXG4gICAgbGV0IGlucHV0c1xuICAgIGlmICh0aGlzLmlucHV0RGltICE9IG51bGwpIHtcbiAgICAgIGlucHV0cyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5pbnB1dERpbSlcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRzID0gW11cbiAgICB9XG4gICAgbGV0IGkgPSAwXG4gICAgLy8gZWxldmF0aW9uXG4gICAgY29uc3Qgd2hlZWxQb3MgPSB0aGlzLndoZWVsQm9keS5HZXRQb3NpdGlvbigpLFxuICAgICAgd2hlZWxYID0gd2hlZWxQb3MuZ2V0X3goKSxcbiAgICAgIHdoZWVsWSA9IHdoZWVsUG9zLmdldF95KClcbiAgICAvLyAgIGludGVycFkgPSBpbnRlcnBUZXJyYWluWSh3aGVlbFgsIHRoaXMucG9wdWxhdGlvbi50ZXJyYWluUHRzKVxuICAgIC8vIHRoaXMueUNsZWFyYW5jZSA9IGludGVycFkgLSB3aGVlbFkgLSB0aGlzLndoZWVsUlxuICAgIC8vIGlucHV0c1tpXSA9IHRoaXMueUNsZWFyYW5jZVxuICAgIC8vIGkrK1xuICAgIHRoaXMubGlkYXJZcyA9IFtdXG4gICAgZm9yIChsZXQgeE9mZiBvZiBnbG9iYWxzLnhPZmZzKSB7XG4gICAgICBjb25zdCBsaWRhclkgPVxuICAgICAgICBpbnRlcnBUZXJyYWluWShcbiAgICAgICAgICB3aGVlbFggKyB0aGlzLnJldmVyc2UgKiB4T2ZmLFxuICAgICAgICAgIHRoaXMucG9wdWxhdGlvbi50ZXJyYWluUHRzXG4gICAgICAgICkgLVxuICAgICAgICB3aGVlbFkgLVxuICAgICAgICB0aGlzLndoZWVsUlxuICAgICAgdGhpcy5saWRhcllzLnB1c2gobGlkYXJZKVxuICAgICAgaW5wdXRzW2ldID0gbGlkYXJZXG4gICAgICBpKytcbiAgICB9XG5cbiAgICAvLyBjaGFzc2lzU2luXG4gICAgY29uc3QgY2hhc3Npc1NpbiA9IE1hdGguc2luKHRoaXMuY2hhc3Npc0JvZHkuR2V0QW5nbGUoKSlcbiAgICBpbnB1dHNbaV0gPSB0aGlzLnJldmVyc2UgKiBjaGFzc2lzU2luXG4gICAgaSsrXG4gICAgaWYgKE1hdGguYWJzKGNoYXNzaXNTaW4pID4gZ2xvYmFscy5jcmFzaFNpbkxpbWl0KSB7XG4gICAgICB0aGlzLmNyYXNoU3RlcENvdW50KytcbiAgICB9XG4gICAgLy8gY2hhc3Npc1ZlbFgsIGNoYXNzaXNWZWxZXG4gICAgY29uc3QgY2hhc3Npc1ZlbCA9IHRoaXMuY2hhc3Npc0JvZHkuR2V0TGluZWFyVmVsb2NpdHkoKSxcbiAgICAgIGNoYXNzaXNWZWxYID0gY2hhc3Npc1ZlbC5nZXRfeCgpXG4gICAgdGhpcy5jaGFzc2lzQWNjWCA9IGNoYXNzaXNWZWxYIC0gdGhpcy5wcmV2Q2hhc3Npc1ZlbFhcbiAgICB0aGlzLnByZXZDaGFzc2lzVmVsWCA9IGNoYXNzaXNWZWxYXG4gICAgLy8gaW5wdXRzW2ldID0gdGhpcy5yZXZlcnNlICogY2hhc3Npc1ZlbC5nZXRfeCgpXG4gICAgLy8gaSsrXG4gICAgLy8gaW5wdXRzW2ldID0gY2hhc3Npc1ZlbC5nZXRfeSgpXG4gICAgLy8gaSsrXG4gICAgLy8gY2hhc3Npc0FuZ1ZlbFxuICAgIGlmICh0YXJnZXQgPT0gMCkge1xuICAgICAgdGhpcy5kcmlmdFhTcVN1bSArPSB0aGlzLmNoYXNzaXNBY2NYICogdGhpcy5jaGFzc2lzQWNjWFxuICAgIH1cbiAgICBjb25zdCBjaGFzc2lzQW5nVmVsID0gdGhpcy5jaGFzc2lzQm9keS5HZXRBbmd1bGFyVmVsb2NpdHkoKVxuICAgIGlucHV0c1tpXSA9IHRoaXMucmV2ZXJzZSAqIGNoYXNzaXNBbmdWZWxcbiAgICBpKytcbiAgICAvLyB3aGVlbFZlbFgsIHdoZWVsVmVsWVxuICAgIGNvbnN0IHdoZWVsVmVsID0gdGhpcy53aGVlbEJvZHkuR2V0TGluZWFyVmVsb2NpdHkoKSxcbiAgICAgIHdoZWVsVmVsWCA9IHdoZWVsVmVsLmdldF94KClcbiAgICB0aGlzLndoZWVsQWNjWCA9IHdoZWVsVmVsWCAtIHRoaXMucHJldldoZWVsVmVsWFxuICAgIHRoaXMucHJldldoZWVsVmVsWCA9IHdoZWVsVmVsWFxuICAgIGlucHV0c1tpXSA9IHRoaXMucmV2ZXJzZSAqIHdoZWVsVmVsWFxuICAgIGkrK1xuICAgIGlucHV0c1tpXSA9IHdoZWVsVmVsLmdldF95KClcbiAgICBpKytcbiAgICAvLyB3aGVlbEFuZ1ZlbFxuICAgIGNvbnN0IHdoZWVsQW5nVmVsID0gdGhpcy53aGVlbEJvZHkuR2V0QW5ndWxhclZlbG9jaXR5KClcbiAgICBpbnB1dHNbaV0gPSB0aGlzLnJldmVyc2UgKiB3aGVlbEFuZ1ZlbFxuICAgIGkrK1xuICAgIGNvbnN0IGF4bGVSeG4gPSB0aGlzLmF4bGUuR2V0UmVhY3Rpb25Gb3JjZSg2MClcbiAgICBpbnB1dHNbaV0gPSAxZS0yICogdGhpcy5yZXZlcnNlICogYXhsZVJ4bi5nZXRfeCgpXG4gICAgaSsrXG4gICAgaW5wdXRzW2ldID0gMWUtMiAqIGF4bGVSeG4uZ2V0X3koKVxuICAgIGkrK1xuICAgIC8vIHRhcmdldFxuICAgIGlucHV0c1tpXSA9IHRoaXMucmV2ZXJzZSAqIHRhcmdldFxuICAgIGkrK1xuXG4gICAgaWYgKHRoaXMudGFyZ2V0UHJldiAhPT0gbnVsbCkge1xuICAgICAgaWYgKGdsb2JhbHMudGFyZ2V0VHlwZSA9PT0gXCJzaW5cIikge1xuICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldFNjb3JlKHRoaXMudGFyZ2V0UHJldiwgY2hhc3Npc1NpbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGFyZ2V0U2NvcmUodGhpcy50YXJnZXRQcmV2LCB3aGVlbFZlbFgpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudGFyZ2V0UHJldiA9IHRhcmdldFxuXG4gICAgcmV0dXJuIGlucHV0c1xuICB9XG5cbiAgdXBkYXRlKHRhcmdldCkge1xuICAgIGNvbnN0IGlucHV0c0FycmF5ID0gdGhpcy5nZXRJbnB1dHModGFyZ2V0KVxuICAgIGNvbnN0IGlucHV0c01hdHJpeCA9IG5ldyBNYXRyaXgoaW5wdXRzQXJyYXksIDEsIGlucHV0c0FycmF5Lmxlbmd0aClcbiAgICBjb25zdCBvdXRwdXRSYXcgPSBpbnB1dHNNYXRyaXhcbiAgICAgIC8vIGNvbnN0IHNwZWVkcyA9IGlucHV0c1xuICAgICAgLm11bCh0aGlzLndlaWdodHNbMF0pXG4gICAgICAuYWRkKHRoaXMuYmlhc2VzWzBdKVxuICAgICAgLy8gLnJlbHUoKVxuICAgICAgLy8gLmxlYWt5UmVsdSgpXG4gICAgICAubGVha3lFbHUoKVxuICAgICAgLm11bCh0aGlzLndlaWdodHNbMV0pXG4gICAgICAuYWRkKHRoaXMuYmlhc2VzWzFdKVxuICAgICAgLy8gLnJlbHUoKVxuICAgICAgLy8gLmxlYWt5UmVsdSgpXG4gICAgICAubGVha3lFbHUoKVxuICAgICAgLm11bCh0aGlzLndlaWdodHNbMl0pXG4gICAgICAuYWRkKHRoaXMuYmlhc2VzWzJdKS5kYXRhWzBdXG5cbiAgICAvLyBjb25zdCByZXZlcnNlID0gdGFyZ2V0ICE9IDAgPyBNYXRoLnNpZ24odGFyZ2V0KSA6IDEsXG4gICAgY29uc3Qgb3V0cHV0ID0gdGhpcy5yZXZlcnNlICogb3V0cHV0UmF3XG4gICAgdGhpcy5zZXRTcGVlZChvdXRwdXQpXG5cbiAgICBjb25zdCBvdXRwdXREaWZmID0gb3V0cHV0IC0gdGhpcy5wcmV2T3V0cHV0XG4gICAgdGhpcy5vdXRwdXREaWZmU3FTdW0gKz0gb3V0cHV0RGlmZiAqIG91dHB1dERpZmZcbiAgICB0aGlzLnByZXZPdXRwdXQgPSBvdXRwdXRcbiAgfVxuXG4gIGdldCBkcmF3UG9zaXRpb25EYXRhKCkge1xuICAgIC8vIHJldHVybiB7XG4gICAgLy8gICB3aGVlbFBvc0N1cnJlbnQ6IHRoaXMud2hlZWxCb2R5LkdldFBvc2l0aW9uKCksXG4gICAgLy8gICB3aGVlbEFuZ2xlQ3VycmVudDogdGhpcy53aGVlbEJvZHkuR2V0QW5nbGUoKSxcbiAgICAvLyAgIGNoYXNzaXNQb3NDdXJyZW50OiB0aGlzLmNoYXNzaXNCb2R5LkdldFBvc2l0aW9uKCksXG4gICAgLy8gICBjaGFzc2lzQW5nbGVDdXJyZW50OiB0aGlzLmNoYXNzaXNCb2R5LkdldEFuZ2xlKCksXG4gICAgLy8gfVxuICAgIGNvbnN0IHdoZWVsUG9zID0gdGhpcy53aGVlbEJvZHkuR2V0UG9zaXRpb24oKSxcbiAgICAgIGNoYXNzaXNQb3MgPSB0aGlzLmNoYXNzaXNCb2R5LkdldFBvc2l0aW9uKClcbiAgICByZXR1cm4ge1xuICAgICAgd2hlZWxQb3NDdXJyZW50OiBbd2hlZWxQb3MuZ2V0X3goKSwgd2hlZWxQb3MuZ2V0X3koKV0sXG4gICAgICB3aGVlbEFuZ2xlQ3VycmVudDogdGhpcy53aGVlbEJvZHkuR2V0QW5nbGUoKSxcbiAgICAgIGNoYXNzaXNQb3NDdXJyZW50OiBbY2hhc3Npc1Bvcy5nZXRfeCgpLCBjaGFzc2lzUG9zLmdldF95KCldLFxuICAgICAgY2hhc3Npc0FuZ2xlQ3VycmVudDogdGhpcy5jaGFzc2lzQm9keS5HZXRBbmdsZSgpLFxuICAgIH1cbiAgfVxuXG4gIGdldCBjb3JyRGF0YSgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgTWF0aC5zaW4odGhpcy5jaGFzc2lzQm9keS5HZXRBbmdsZSgpKSxcbiAgICAgIHRoaXMud2hlZWxBY2NYLFxuICAgICAgdGhpcy5jaGFzc2lzQWNjWCxcbiAgICBdXG4gIH1cblxuICAvLyBzbGVlcCgpIHtcbiAgLy8gICBmb3IgKGxldCBib2R5IG9mIFtcbiAgLy8gICAgIHRoaXMuY2hhc3Npc0JvZHksXG4gIC8vICAgICB0aGlzLnVwcGVyRm9yZWxlZ0JvZHksXG4gIC8vICAgICB0aGlzLmxvd2VyRm9yZWxlZ0JvZHksXG4gIC8vICAgICB0aGlzLnVwcGVySGluZGxlZ0JvZHksXG4gIC8vICAgICB0aGlzLmxvd2VySGluZGxlZ0JvZHksXG4gIC8vICAgXSkge1xuICAvLyAgICAgYm9keS5TZXRBd2FrZSgwKVxuICAvLyAgICAgLy8gYm9keS5TZXRFbmFibGVkKDApXG4gIC8vICAgfVxuICAvLyB9XG59XG5cbmNsYXNzIE1hdHJpeCB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIG0sIG4pIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhXG4gICAgdGhpcy5tID0gbVxuICAgIHRoaXMubiA9IG5cbiAgfVxuXG4gIG11bChvdGhlcikge1xuICAgIGNvbnN0IGEgPSB0aGlzLmRhdGEsXG4gICAgICBiID0gb3RoZXIuZGF0YSxcbiAgICAgIG0gPSB0aGlzLm0sXG4gICAgICBuID0gdGhpcy5uLFxuICAgICAgcCA9IG90aGVyLm4sXG4gICAgICBjID0gbmV3IEZsb2F0MzJBcnJheShuZXcgQXJyYXlCdWZmZXIoNCAqIG0gKiBwKSlcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHA7IGorKykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgbGV0IHN1bSA9IDBcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuOyBrKyspIHtcbiAgICAgICAgICBzdW0gKz0gYVtpICogbiArIGtdICogYltrICogcCArIGpdXG4gICAgICAgIH1cbiAgICAgICAgY1tpICogcCArIGpdID0gc3VtXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTWF0cml4KGMsIG0sIHApXG4gIH1cblxuICBhZGQob3RoZXIpIHtcbiAgICBjb25zdCBhID0gdGhpcy5kYXRhLFxuICAgICAgYiA9IG90aGVyLmRhdGEsXG4gICAgICBsID0gYS5sZW5ndGgsXG4gICAgICBjID0gbmV3IEZsb2F0MzJBcnJheShuZXcgQXJyYXlCdWZmZXIoNCAqIGwpKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjW2ldID0gYVtpXSArIGJbaV1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgoYywgdGhpcy5tLCB0aGlzLm4pXG4gIH1cblxuICByZWx1KCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLmRhdGEubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gdGhpcy5kYXRhLnNsaWNlKClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gTWF0aC5tYXgoMCwgcmVzdWx0W2ldKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdHJpeChyZXN1bHQsIHRoaXMubSwgdGhpcy5uKVxuICB9XG5cbiAgbGVha3lSZWx1KCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLmRhdGEubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gdGhpcy5kYXRhLnNsaWNlKClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gTWF0aC5tYXgoMC4xICogcmVzdWx0W2ldLCByZXN1bHRbaV0pXG4gICAgfVxuICAgIHJldHVybiBuZXcgTWF0cml4KHJlc3VsdCwgdGhpcy5tLCB0aGlzLm4pXG4gIH1cblxuICBlbHUoKSB7XG4gICAgY29uc3QgbiA9IHRoaXMuZGF0YS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSB0aGlzLmRhdGEuc2xpY2UoKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICBpZiAocmVzdWx0W2ldIDwgMCkge1xuICAgICAgICByZXN1bHRbaV0gPSBNYXRoLmV4cG0xKHJlc3VsdFtpXSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgocmVzdWx0LCB0aGlzLm0sIHRoaXMubilcbiAgfVxuXG4gIGxlYWt5RWx1KCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLmRhdGEubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gdGhpcy5kYXRhLnNsaWNlKClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgaWYgKHJlc3VsdFtpXSA8IDApIHtcbiAgICAgICAgcmVzdWx0W2ldID0gTWF0aC5leHBtMShyZXN1bHRbaV0pICsgMC4xICogcmVzdWx0W2ldXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTWF0cml4KHJlc3VsdCwgdGhpcy5tLCB0aGlzLm4pXG4gIH1cbn1cblxuZnVuY3Rpb24gdmVjdG9yTm9ybXModmVjdG9ycykge1xuICBjb25zdCByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KHZlY3RvcnMubGVuZ3RoKS5maWxsKDApXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZlY3RvciA9IHZlY3RvcnNbaV0uZGF0YVxuICAgIGZvciAobGV0IHggb2YgdmVjdG9yKSB7XG4gICAgICByZXN1bHRbaV0gKz0geCAqIHhcbiAgICB9XG4gICAgLy8gcmVzdWx0W2ldID0gTWF0aC5zcXJ0KHJlc3VsdFtpXSlcbiAgICByZXN1bHRbaV0gLz0gdmVjdG9yLmxlbmd0aFxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gcm93Tm9ybVRoaW5neShtYXQpIHtcbiAgLy8gbTogcm93IGNvdW50LCBuOiBjb2x1bW4gY291bnRcbiAgY29uc3Qgcm93Q291bnQgPSBtYXQubSxcbiAgICBjb2xDb3VudCA9IG1hdC5uXG4gIGxldCBzdW1BbGwgPSAwXG4gIGNvbnN0IHJvd1N1bXMgPSBuZXcgRmxvYXQzMkFycmF5KHJvd0NvdW50KS5maWxsKDApLFxuICAgIGNvbFN1bXMgPSBuZXcgRmxvYXQzMkFycmF5KGNvbENvdW50KS5maWxsKDApXG4gIC8vIHJvdyBpZHhcbiAgZm9yIChsZXQgcm93SWR4ID0gMDsgcm93SWR4IDwgcm93Q291bnQ7IHJvd0lkeCsrKSB7XG4gICAgLy8gY29sIGlkeFxuICAgIGZvciAobGV0IGNvbElkeCA9IDA7IGNvbElkeCA8IGNvbENvdW50OyBjb2xJZHgrKykge1xuICAgICAgY29uc3QgdmFsID0gbWF0LmRhdGFbcm93SWR4ICogY29sQ291bnQgKyBjb2xJZHhdLFxuICAgICAgICB2YWxTcSA9IHZhbCAqIHZhbFxuICAgICAgLy8gcm93U3Vtc1tyb3dJZHhdICs9IE1hdGguYWJzKHZhbClcbiAgICAgIHJvd1N1bXNbcm93SWR4XSArPSB2YWxTcVxuICAgICAgLy8gY29sU3Vtc1tjb2xJZHhdICs9IE1hdGguYWJzKHZhbClcbiAgICAgIGNvbFN1bXNbY29sSWR4XSArPSB2YWxTcVxuICAgICAgc3VtQWxsICs9IHZhbFNxXG4gICAgfVxuICB9XG4gIHN1bUFsbCAvPSByb3dDb3VudCAqIGNvbENvdW50XG4gIGxldCBzdW1Sb3dzID0gMFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd0NvdW50OyBpKyspIHtcbiAgICBjb25zdCB2YWwgPSByb3dTdW1zW2ldIC8gY29sQ291bnRcbiAgICBzdW1Sb3dzICs9IHZhbCAqIHZhbFxuICB9XG4gIHN1bVJvd3MgLz0gcm93Q291bnRcbiAgbGV0IHN1bUNvbHMgPSAwXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29sQ291bnQ7IGkrKykge1xuICAgIGNvbnN0IHZhbCA9IGNvbFN1bXNbaV0gLyByb3dDb3VudFxuICAgIHN1bUNvbHMgKz0gdmFsICogdmFsXG4gIH1cbiAgc3VtQ29scyAvPSBjb2xDb3VudFxuXG4gIC8vIHJldHVybiBzdW1BbGwgKyAwLjEgKiBzdW1Sb3dzICsgMS4wICogc3VtQ29sc1xuICByZXR1cm4gc3VtQWxsXG59XG5cbmV4cG9ydCBjbGFzcyBQb3B1bGF0aW9uIHtcbiAgY29uc3RydWN0b3Iod2hlZWxQb3NJbml0LCBuVGlwcHlzLCB0ZXJyYWluUHRzLCBiMikge1xuICAgIHRoaXMud2hlZWxQb3NJbml0ID0gd2hlZWxQb3NJbml0LnNsaWNlKClcblxuICAgIHtcbiAgICAgIGNvbnN0IGdyYXZpdHkgPSBuZXcgYjIuYjJWZWMyKDAsIDkuODEpXG4gICAgICB0aGlzLndvcmxkID0gbmV3IGIyLmIyV29ybGQoZ3Jhdml0eSlcbiAgICB9XG5cbiAgICB0aGlzLmIyID0gYjJcbiAgICB0aGlzLnRlcnJhaW5QdHMgPSB0ZXJyYWluUHRzXG5cbiAgICAvLyBhZGQgZ3JvdW5kXG4gICAge1xuICAgICAgY29uc3QgZ3JvdW5kQm9keSA9IHRoaXMud29ybGQuQ3JlYXRlQm9keShuZXcgYjIuYjJCb2R5RGVmKCkpXG5cbiAgICAgIGNvbnN0IHRlcnJhaW5QdHNGaWx0ZXJlZCA9IFtdXG4gICAgICBsZXQgeURpZmZQcmV2XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdsb2JhbHMublRlcnJhaW5QdHM7IGkrKykge1xuICAgICAgICBjb25zdCB5RGlmZkN1cnIgPSB0ZXJyYWluUHRzW2kgKyAxXSAtIHRlcnJhaW5QdHNbaV0sXG4gICAgICAgICAgc2FtZVNsb3BlID0geURpZmZDdXJyID09IHlEaWZmUHJldlxuICAgICAgICB5RGlmZlByZXYgPSB5RGlmZkN1cnJcbiAgICAgICAgaWYgKHNhbWVTbG9wZSAmJiBpICE9IGdsb2JhbHMublRlcnJhaW5QdHMgLSAxKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICB0ZXJyYWluUHRzRmlsdGVyZWQucHVzaChbdGVycmFpbklkeFRvWFBvcyhpKSwgdGVycmFpblB0c1tpXV0pXG4gICAgICB9XG4gICAgICAvLyBjb25zb2xlLmxvZyh0ZXJyYWluUHRzRmlsdGVyZWQubGVuZ3RoLCBnbG9iYWxzLm5UZXJyYWluUHRzKVxuICAgICAgLy8gcmV2ZXJzZWQgbG9vcCBmb3IgQ0NXIHdpbmRpbmcgb3JkZXIgKEJveDJEKVxuICAgICAgZm9yIChsZXQgaSA9IHRlcnJhaW5QdHNGaWx0ZXJlZC5sZW5ndGggLSAxOyBpID49IDE7IGktLSkge1xuICAgICAgICBjb25zdCBlZGdlU2hhcGUgPSBuZXcgYjIuYjJFZGdlU2hhcGUoKVxuICAgICAgICBlZGdlU2hhcGUuU2V0VHdvU2lkZWQoXG4gICAgICAgICAgbmV3IGIyLmIyVmVjMih0ZXJyYWluUHRzRmlsdGVyZWRbaV1bMF0sIHRlcnJhaW5QdHNGaWx0ZXJlZFtpXVsxXSksXG4gICAgICAgICAgbmV3IGIyLmIyVmVjMihcbiAgICAgICAgICAgIHRlcnJhaW5QdHNGaWx0ZXJlZFtpIC0gMV1bMF0sXG4gICAgICAgICAgICB0ZXJyYWluUHRzRmlsdGVyZWRbaSAtIDFdWzFdXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgIGNvbnN0IGdyb3VuZEZEID0gbmV3IGIyLmIyRml4dHVyZURlZigpXG4gICAgICAgIGdyb3VuZEZELnNldF9zaGFwZShlZGdlU2hhcGUpXG4gICAgICAgIGdyb3VuZEZELnNldF9mcmljdGlvbigwLjkpXG4gICAgICAgIGdyb3VuZEZELnNldF9yZXN0aXR1dGlvbigwLjEpXG4gICAgICAgIGNvbnN0IGdyb3VuZEZpeHR1cmUgPSBiMi5jYXN0T2JqZWN0KFxuICAgICAgICAgIGdyb3VuZEJvZHkuQ3JlYXRlRml4dHVyZShncm91bmRGRCksXG4gICAgICAgICAgYjIuYjJGaXh0dXJlXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIC8vIGFkZCB3YWxsc1xuICAgICAgZm9yIChjb25zdCBpZHggb2YgWzAsIGdsb2JhbHMublRlcnJhaW5QdHMgLSAxXSkge1xuICAgICAgICBjb25zdCBbeCwgeV0gPSBbdGVycmFpbklkeFRvWFBvcyhpZHgpLCB0ZXJyYWluUHRzW2lkeF1dXG4gICAgICAgIGNvbnN0IGVkZ2VTaGFwZSA9IG5ldyBiMi5iMkVkZ2VTaGFwZSgpXG4gICAgICAgIGVkZ2VTaGFwZS5TZXRUd29TaWRlZChcbiAgICAgICAgICBuZXcgYjIuYjJWZWMyKHgsIHkpLFxuICAgICAgICAgIG5ldyBiMi5iMlZlYzIoeCwgeSAtIGdsb2JhbHMud2FsbEgpXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgZ3JvdW5kRkQgPSBuZXcgYjIuYjJGaXh0dXJlRGVmKClcbiAgICAgICAgZ3JvdW5kRkQuc2V0X3NoYXBlKGVkZ2VTaGFwZSlcbiAgICAgICAgZ3JvdW5kRkQuc2V0X2ZyaWN0aW9uKDAuOSlcbiAgICAgICAgZ3JvdW5kRkQuc2V0X3Jlc3RpdHV0aW9uKDAuMSlcbiAgICAgICAgY29uc3QgZ3JvdW5kRml4dHVyZSA9IGIyLmNhc3RPYmplY3QoXG4gICAgICAgICAgZ3JvdW5kQm9keS5DcmVhdGVGaXh0dXJlKGdyb3VuZEZEKSxcbiAgICAgICAgICBiMi5iMkZpeHR1cmVcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRpcHB5cyA9IFtdXG4gICAgdGhpcy5hZGRUaXBweXMoblRpcHB5cylcbiAgICB0aGlzLm5fZGltID0gdGhpcy50aXBweXNbMF0ubl9kaW1cbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIGZvciAobGV0IHRpcHB5IG9mIHRoaXMudGlwcHlzKSB7XG4gICAgICB0aXBweS5yZXNldCh0aGlzLmIyKVxuICAgIH1cbiAgfVxuXG4gIGFkZFRpcHB5cyhuVGlwcHlzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuVGlwcHlzOyBpKyspIHtcbiAgICAgIHRoaXMudGlwcHlzLnB1c2gobmV3IFRpcHB5KHRoaXMud2hlZWxQb3NJbml0LCB0aGlzLndvcmxkLCB0aGlzLmIyLCB0aGlzKSlcbiAgICB9XG4gIH1cblxuICBzZXRXdHMoZmxhdFd0cykge1xuICAgIGxldCBmbGF0V3RzSWR4ID0gMFxuICAgIGZvciAobGV0IHRpcHB5IG9mIHRoaXMudGlwcHlzKSB7XG4gICAgICB0aXBweS5zZXRXdHMoZmxhdFd0cy5zbGljZShmbGF0V3RzSWR4LCBmbGF0V3RzSWR4ICsgdGhpcy5uX2RpbSkpXG4gICAgICBmbGF0V3RzSWR4ICs9IHRoaXMubl9kaW1cbiAgICB9XG4gIH1cblxuICB0cmFpbih7IHRhcmdldHMsIHNvbHV0aW9ucyB9KSB7XG4gICAgLy8gYXNzaWduIHNvbHV0aW9uIGFuZCB0YXJnZXQgdG8gZWFjaCB0aXBweVxuICAgIGNvbnN0IG5Tb2x1dGlvbnMgPSBzb2x1dGlvbnMubGVuZ3RoIC8gdGhpcy5uX2RpbVxuICAgIGlmICh0aGlzLnRpcHB5cy5sZW5ndGggPCBuU29sdXRpb25zICogdGFyZ2V0cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuYWRkVGlwcHlzKG5Tb2x1dGlvbnMgKiB0YXJnZXRzLmxlbmd0aCAtIHRoaXMudGlwcHlzLmxlbmd0aClcbiAgICB9XG4gICAgbGV0IGZsYXRXdHNJZHggPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuU29sdXRpb25zOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGFyZ2V0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCB0aXBweSA9IHRoaXMudGlwcHlzW2kgKiB0YXJnZXRzLmxlbmd0aCArIGpdXG4gICAgICAgIHRpcHB5LnNldFd0cyhzb2x1dGlvbnMuc2xpY2UoZmxhdFd0c0lkeCwgZmxhdFd0c0lkeCArIHRoaXMubl9kaW0pKVxuICAgICAgICB0aXBweS50YXJnZXRJZHggPSBqXG4gICAgICB9XG4gICAgICBmbGF0V3RzSWR4ICs9IHRoaXMubl9kaW1cbiAgICB9XG4gICAgLy8gc2ltdWxhdGUgdXNpbmcgb25lIHRhcmdldCBwZXIgc29sdXRpb25cbiAgICB0aGlzLnJlc2V0KClcbiAgICBmb3IgKGxldCBzdGVwID0gMDsgc3RlcCA8IHRhcmdldHNbMF0ubGVuZ3RoOyBzdGVwKyspIHtcbiAgICAgIGZvciAobGV0IHRpcHB5IG9mIHRoaXMudGlwcHlzKSB7XG4gICAgICAgIHRpcHB5LnVwZGF0ZSh0YXJnZXRzW3RpcHB5LnRhcmdldElkeF1bc3RlcF0pXG4gICAgICB9XG4gICAgICB0aGlzLndvcmxkLlN0ZXAoZ2xvYmFscy50cywgOCwgMylcbiAgICB9XG4gICAgLy8gc2NvcmUgc29sdXRpb25zIGFmdGVyIHNpbXVsYXRpb25cbiAgICBjb25zdCBzb2x1dGlvbnNTY29yZXMgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgblNvbHV0aW9uczsgaSsrKSB7XG4gICAgICBjb25zdCB0aXBweTAgPSB0aGlzLnRpcHB5c1tpICogdGFyZ2V0cy5sZW5ndGhdLFxuICAgICAgICBzb2x1dGlvbiA9IHRpcHB5MC5mbGF0V3RzXG4gICAgICBsZXQgd3RzTm9ybSA9IDBcbiAgICAgIGZvciAobGV0IHd0TGF5ZXIgb2YgdGlwcHkwLndlaWdodHMpIHtcbiAgICAgICAgZm9yIChsZXQgd3Qgb2Ygd3RMYXllci5kYXRhKSB7XG4gICAgICAgICAgd3RzTm9ybSArPSB3dCAqIHd0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHd0c05vcm0gLz0gdGlwcHkwLndlaWdodENvdW50XG4gICAgICBsZXQgYmlhc05vcm0gPSAwXG4gICAgICBmb3IgKGxldCBiaWFzTGF5ZXIgb2YgdGlwcHkwLmJpYXNlcykge1xuICAgICAgICBmb3IgKGxldCBiaWFzIG9mIGJpYXNMYXllci5kYXRhKSB7XG4gICAgICAgICAgYmlhc05vcm0gKz0gYmlhcyAqIGJpYXNcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmlhc05vcm0gLz0gdGlwcHkwLmJpYXNDb3VudFxuICAgICAgY29uc3QgdGFza1Njb3JlcyA9IFtdXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRhcmdldHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgdGFza1RpcHB5ID0gdGhpcy50aXBweXNbaSAqIHRhcmdldHMubGVuZ3RoICsgal0sXG4gICAgICAgICAgbXNlID0gdGFza1RpcHB5LnRhcmdldFNxRXJyU3VtIC8gZ2xvYmFscy5lcExlbixcbiAgICAgICAgICBjcmFzaGVkUmF0aW8gPSB0YXNrVGlwcHkuY3Jhc2hTdGVwQ291bnQgLyBnbG9iYWxzLmVwTGVuLFxuICAgICAgICAgIGRyaWZ0WCA9IHRhc2tUaXBweS5kcmlmdFhTcVN1bSAvIGdsb2JhbHMuZXBMZW5cbiAgICAgICAgdGFza1Njb3Jlcy5wdXNoKHsgbXNlLCBjcmFzaGVkUmF0aW8sIGRyaWZ0WCB9KVxuICAgICAgfVxuICAgICAgLy8gc29sdXRpb25zU2NvcmVzLnB1c2goeyBzb2x1dGlvbiwgc2NvcmUgfSlcbiAgICAgIHNvbHV0aW9uc1Njb3Jlcy5wdXNoKHsgc29sdXRpb24sIHd0c05vcm0sIGJpYXNOb3JtLCB0YXNrU2NvcmVzIH0pXG4gICAgfVxuICAgIHJldHVybiBzb2x1dGlvbnNTY29yZXNcbiAgfVxuXG4gIHVwZGF0ZSh0YXJnZXRzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRpcHB5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdGlwcHkgPSB0aGlzLnRpcHB5c1tpXVxuICAgICAgdGlwcHkudXBkYXRlKHRhcmdldHNbaV0pXG4gICAgfVxuICAgIHRoaXMud29ybGQuU3RlcChnbG9iYWxzLnRzLCA4LCAzKVxuICB9XG5cbiAgZHJhdyhzY2FsZSwgY2VudGVyKSB7XG4gICAgZm9yIChsZXQgdGlwcHkgb2YgdGhpcy50aXBweXMpIHtcbiAgICAgIHRpcHB5LmRyYXcoc2NhbGUsIGNlbnRlcilcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZURpcmVjdGlvbihsZCwgcmQsIF90YXJnZXRTaW4sIF90YXJnZXRWZWwpIHtcbiAgLy8gbm8gY2hhbmdlIGlmIGJvdGgga2V5cyBkb3duXG4gIGxldCB0YXJnZXRTaW4gPSBfdGFyZ2V0U2luLFxuICAgIHRhcmdldFZlbCA9IF90YXJnZXRWZWxcbiAgaWYgKGxkICYmIHJkKSB7XG4gICAgcmV0dXJuIFt0YXJnZXRTaW4sIHRhcmdldFZlbF1cbiAgfVxuICAvLyBkZWNheSBzaW4gdG93YXJkIHplcm9cbiAgaWYgKHRhcmdldFNpbiAhPSAwKSB7XG4gICAgaWYgKE1hdGguYWJzKHRhcmdldFNpbikgPCBnbG9iYWxzLnNpbkRlY2F5KSB7XG4gICAgICB0YXJnZXRTaW4gPSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFNpbiAtPSBNYXRoLnNpZ24odGFyZ2V0U2luKSAqIGdsb2JhbHMuc2luRGVjYXlcbiAgICB9XG4gIH1cbiAgLy8gY2hhbmdlIGlmIG9ubHkgb25lIGtleVxuICAvLyBhbmQgbGltaXQgb3V0cHV0XG4gIGlmIChsZCkge1xuICAgIHRhcmdldFNpbiAtPSBnbG9iYWxzLnNpblN0ZXBcbiAgICBpZiAodGFyZ2V0U2luIDwgLWdsb2JhbHMuc2luTGltKSB7XG4gICAgICB0YXJnZXRTaW4gPSAtZ2xvYmFscy5zaW5MaW1cbiAgICB9XG4gIH0gZWxzZSBpZiAocmQpIHtcbiAgICB0YXJnZXRTaW4gKz0gZ2xvYmFscy5zaW5TdGVwXG4gICAgaWYgKHRhcmdldFNpbiA+IGdsb2JhbHMuc2luTGltKSB7XG4gICAgICB0YXJnZXRTaW4gPSBnbG9iYWxzLnNpbkxpbVxuICAgIH1cbiAgfVxuICAvLyBkZWNheSB2ZWwgdG93YXJkIHplcm9cbiAgaWYgKHRhcmdldFZlbCAhPSAwKSB7XG4gICAgaWYgKE1hdGguYWJzKHRhcmdldFZlbCkgPCBnbG9iYWxzLnZlbERlY2F5KSB7XG4gICAgICB0YXJnZXRWZWwgPSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFZlbCAtPSBNYXRoLnNpZ24odGFyZ2V0VmVsKSAqIGdsb2JhbHMudmVsRGVjYXlcbiAgICB9XG4gIH1cblxuICB0YXJnZXRWZWwgKz0gMC4xMDIgKiB0YXJnZXRTaW5cbiAgaWYgKHRhcmdldFZlbCA+IGdsb2JhbHMudmVsTGltKSB7XG4gICAgdGFyZ2V0VmVsID0gZ2xvYmFscy52ZWxMaW1cbiAgfSBlbHNlIGlmICh0YXJnZXRWZWwgPCAtZ2xvYmFscy52ZWxMaW0pIHtcbiAgICB0YXJnZXRWZWwgPSAtZ2xvYmFscy52ZWxMaW1cbiAgfVxuICAvLyAvLyB1cGRhdGUgdGVzdCB0cmlnb25vbWV0cnlcbiAgLy8gaWYgKHRhcmdldFNpbiAhPSB0YXJnZXREaXJlY3Rpb25CZWZvcmUpIHtcbiAgLy8gICB0YXJnZXRBbmdsZSA9IE1hdGguYXNpbih0YXJnZXRTaW4pXG4gIC8vICAgdGFyZ2V0Q29zID0gTWF0aC5jb3ModGFyZ2V0QW5nbGUpXG4gIC8vIH1cbiAgcmV0dXJuIFt0YXJnZXRTaW4sIHRhcmdldFZlbF1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVGVycmFpblB0cygpIHtcbiAgZnVuY3Rpb24gdGVycmFpbkxST2JqZWN0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBzbG9wZURpZmY6IDAsXG4gICAgICBzbG9wZTogMCxcbiAgICAgIHk6IDAsXG4gICAgICB4OiBnbG9iYWxzLmdyb3VuZERldGFpbEludGVydmFsLFxuICAgICAgeElkeDogMSxcbiAgICAgIC8vIHJhbmRWYWxzOiByYW5kX25vcm1hbChnbG9iYWxzLmdyb3VuZEhhbGZXaWR0aCAvIGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwgLSAxKSxcbiAgICAgIC8vIGlkeDogMCxcbiAgICAgIHlzOiBbXSxcbiAgICAgIHVwZGF0ZVNsb3BlKCkge1xuICAgICAgICBpZiAodGhpcy54IDw9IGdsb2JhbHMuZ3JvdW5kRmxhdENlbnRlckhhbGZXaWR0aCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMuc2xvcGVEaWZmICs9IGdsb2JhbHMuc2xvcGVEaWZmTWFnICogdGhpcy5yYW5kVmFsc1t0aGlzLmlkeF1cbiAgICAgICAgdGhpcy5zbG9wZURpZmYgKz0gZ2xvYmFscy5zbG9wZURpZmZNYWcgKiByYW5kX25vcm1hbCgxKVswXVxuICAgICAgICAvLyB0aGlzLmlkeCsrXG4gICAgICAgIHRoaXMuc2xvcGVEaWZmICo9IGdsb2JhbHMuc2xvcGVEaWZmRGVjYXlcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc2xvcGVEaWZmKSA+IGdsb2JhbHMuc2xvcGVEaWZmTGltKSB7XG4gICAgICAgICAgdGhpcy5zbG9wZURpZmYgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIE1hdGgubWF4KHRoaXMuc2xvcGVEaWZmLCAtZ2xvYmFscy5zbG9wZURpZmZMaW0pLFxuICAgICAgICAgICAgZ2xvYmFscy5zbG9wZURpZmZMaW1cbiAgICAgICAgICApXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzbG9wZSBkaWZmIGJ1bXBcIilcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2U2xvcGUgPSB0aGlzLnNsb3BlXG4gICAgICAgIHRoaXMuc2xvcGUgKz0gdGhpcy5zbG9wZURpZmZcbiAgICAgICAgdGhpcy5zbG9wZSAqPSBnbG9iYWxzLnNsb3BlRGVjYXlcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc2xvcGUpID4gZ2xvYmFscy5zbG9wZUxpbSkge1xuICAgICAgICAgIHRoaXMuc2xvcGUgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIE1hdGgubWF4KHRoaXMuc2xvcGUsIC1nbG9iYWxzLnNsb3BlTGltKSxcbiAgICAgICAgICAgIGdsb2JhbHMuc2xvcGVMaW1cbiAgICAgICAgICApXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJzbG9wZSBidW1wXCIpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zbG9wZURpZmYgPSB0aGlzLnNsb3BlIC0gcHJldlNsb3BlXG4gICAgICB9LFxuICAgICAgdXBkYXRlKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVNsb3BlKClcbiAgICAgICAgdGhpcy55ICs9IHRoaXMuc2xvcGUgKiBnbG9iYWxzLmdyb3VuZERldGFpbEludGVydmFsXG4gICAgICAgIHRoaXMueXMucHVzaCh0aGlzLnkpXG4gICAgICAgIC8vIHByZXZlbnQgZmxvYXRpbmcgcG9pbnQgZHJpZnRcbiAgICAgICAgdGhpcy54SWR4KytcbiAgICAgICAgdGhpcy54ID0gZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbCAqIHRoaXMueElkeFxuICAgICAgfSxcbiAgICB9XG4gIH1cbiAgY29uc3QgbGVmdE9iaiA9IHRlcnJhaW5MUk9iamVjdCgpLFxuICAgIHJpZ2h0T2JqID0gdGVycmFpbkxST2JqZWN0KClcblxuICBmb3IgKFxuICAgIGxldCBfID0gMDtcbiAgICBfIDwgZ2xvYmFscy5ncm91bmRIYWxmV2lkdGggLyBnbG9iYWxzLmdyb3VuZERldGFpbEludGVydmFsO1xuICAgIF8rK1xuICApIHtcbiAgICBsZWZ0T2JqLnVwZGF0ZSgpXG4gICAgcmlnaHRPYmoudXBkYXRlKClcbiAgfVxuICBsZWZ0T2JqLnlzLnJldmVyc2UoKVxuXG4gIHJldHVybiBsZWZ0T2JqLnlzLmNvbmNhdChbMF0pLmNvbmNhdChyaWdodE9iai55cylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHhQb3NUb1RlcnJhaW5JZHgoeCkge1xuICB4ID0gTWF0aC5taW4oTWF0aC5tYXgoeCwgLWdsb2JhbHMuZ3JvdW5kSGFsZldpZHRoKSwgZ2xvYmFscy5ncm91bmRIYWxmV2lkdGgpXG4gIHJldHVybiAoXG4gICAgTWF0aC5yb3VuZCh4IC8gZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbCkgKyAoZ2xvYmFscy5uVGVycmFpblB0cyAtIDEpIC8gMlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXJyYWluSWR4VG9YUG9zKGlkeCkge1xuICByZXR1cm4gKGlkeCAtIChnbG9iYWxzLm5UZXJyYWluUHRzIC0gMSkgLyAyKSAqIGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWxcbn1cblxuZnVuY3Rpb24gaW50ZXJwVGVycmFpblkoeCwgdGVycmFpblB0cykge1xuICB4ID0gTWF0aC5taW4oTWF0aC5tYXgoeCwgLWdsb2JhbHMuZ3JvdW5kSGFsZldpZHRoKSwgZ2xvYmFscy5ncm91bmRIYWxmV2lkdGgpXG4gIGNvbnN0IHhTY2FsZWQgPSB4IC8gZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbCxcbiAgICBpZHhPZmZzZXQgPSAoZ2xvYmFscy5uVGVycmFpblB0cyAtIDEpIC8gMixcbiAgICBjbGlwcGVkID0gW01hdGguZmxvb3IoeFNjYWxlZCksIE1hdGguY2VpbCh4U2NhbGVkKV0sXG4gICAgeHMgPSBjbGlwcGVkLm1hcCgodikgPT4gZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbCAqIHYpLFxuICAgIHlzID0gY2xpcHBlZC5tYXAoKHYpID0+IHRlcnJhaW5QdHNbdiArIGlkeE9mZnNldF0pXG5cbiAgaWYgKHhzWzFdID09IHhzWzBdKSB7XG4gICAgcmV0dXJuIHlzWzBdXG4gIH1cbiAgY29uc3Qgc2xvcGUgPSAoeXNbMV0gLSB5c1swXSkgLyAoeHNbMV0gLSB4c1swXSksXG4gICAgeERpZmYgPSB4IC0geHNbMF0sXG4gICAgeURpZmYgPSBzbG9wZSAqIHhEaWZmXG4gIHJldHVybiB5c1swXSArIHlEaWZmXG59XG4iLCIvLyBpbXBvcnRTY3JpcHRzKFwiLi4vQm94MkQtanMvQm94MkRfdjIuMy4xX21pbi5qc1wiLCBcIi4uL2dsb2JhbHMuanNcIiwgXCIuLi90aXBweS5qc1wiKVxuXG5pbXBvcnQgQm94MkRGYWN0b3J5IGZyb20gXCJib3gyZC13YXNtL2Rpc3QvZXMvQm94MkRcIlxuaW1wb3J0IHsgZ2xvYmFscyB9IGZyb20gXCIuLy4uL2dsb2JhbHMuanNcIlxuaW1wb3J0IHsgUG9wdWxhdGlvbiB9IGZyb20gXCIuLy4uL3RpcHB5LmpzXCJcblxubGV0IHBvcHVsYXRpb24gPSBudWxsXG5cbm9ubWVzc2FnZSA9IChlKSA9PiB7XG4gIGNvbnN0IFtpbmZvLCBtc2ddID0gZS5kYXRhXG4gIGlmIChpbmZvID09IFwidGVycmFpblB0c1wiKSB7XG4gICAgQm94MkRGYWN0b3J5KCkudGhlbigoYjIpID0+IHtcbiAgICAgIHBvcHVsYXRpb24gPSBuZXcgUG9wdWxhdGlvbihbMCwgMF0sIDEsIG1zZywgYjIpXG4gICAgfSlcbiAgfSBlbHNlIGlmIChpbmZvID09IFwidGFyZ2V0c1NvbHV0aW9uc1wiKSB7XG4gICAgY29uc3Qgc29sdXRpb25zU2NvcmVzID0gcG9wdWxhdGlvbi50cmFpbihtc2cpXG4gICAgcG9zdE1lc3NhZ2UoW1wic29sdXRpb25zU2NvcmVzXCIsIHNvbHV0aW9uc1Njb3Jlc10pXG4gIH1cbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gdGhlIHN0YXJ0dXAgZnVuY3Rpb25cbl9fd2VicGFja19yZXF1aXJlX18ueCA9ICgpID0+IHtcblx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5cdC8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxuXHR2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFszMzddLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXygzMDQxKSkpXG5cdF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cdHJldHVybiBfX3dlYnBhY2tfZXhwb3J0c19fO1xufTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rcyBhbmQgc2libGluZyBjaHVua3MgZm9yIHRoZSBlbnRyeXBvaW50XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBcIjBhYTYyZDQ5N2UwZmZmMDI2MzEwXCIgKyBcIi5qc1wiO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiB1bmRlZmluZWQ7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gc2VsZi5sb2NhdGlvbiArIFwiXCI7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgY2h1bmtzXG4vLyBcIjFcIiBtZWFucyBcImFscmVhZHkgbG9hZGVkXCJcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDc5NTogMVxufTtcblxuLy8gaW1wb3J0U2NyaXB0cyBjaHVuayBsb2FkaW5nXG52YXIgaW5zdGFsbENodW5rID0gKGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR3aGlsZShjaHVua0lkcy5sZW5ndGgpXG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzLnBvcCgpXSA9IDE7XG5cdHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xufTtcbl9fd2VicGFja19yZXF1aXJlX18uZi5pID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdC8vIFwiMVwiIGlzIHRoZSBzaWduYWwgZm9yIFwiYWxyZWFkeSBsb2FkZWRcIlxuXHRpZighaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdGltcG9ydFNjcmlwdHMoX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpKTtcblx0XHR9XG5cdH1cbn07XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rdGlwcHlfcHJvamVjdF93ZWJzaXRlXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3RpcHB5X3Byb2plY3Rfd2Vic2l0ZVwiXSB8fCBbXTtcbnZhciBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiA9IGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gaW5zdGFsbENodW5rO1xuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0IiwiLy8gcnVuIHN0YXJ0dXBcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy54KCk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJuZXh0IiwiZ2xvYmFscyIsInciLCJoIiwibElucHV0Q29kZXMiLCJySW5wdXRDb2RlcyIsInhPZmZzIiwidHMiLCJzaW5MaW0iLCJzaW5TdGVwIiwic2luRGVjYXkiLCJ2ZWxMaW0iLCJ2ZWxEZWNheSIsImdyb3VuZEhhbGZXaWR0aCIsImdyb3VuZEZsYXRDZW50ZXJIYWxmV2lkdGgiLCJncm91bmREZXRhaWxJbnRlcnZhbCIsIm5UZXJyYWluUHRzIiwidGhpcyIsIndhbGxIIiwid2FsbFciLCJzbG9wZURlY2F5Iiwic2xvcGVMaW0iLCJzbG9wZURpZmZNYWciLCJzbG9wZURpZmZEZWNheSIsInNsb3BlRGlmZkxpbSIsImJhck1heCIsImxpbSIsInRhcmdldFR5cGUiLCJiYXJIZWlnaHQiLCJzY29yZURlbm9tRXBzIiwiY3Jhc2hTaW5MaW1pdCIsIm1heFRvcnF1ZSIsIm5Xb3JrZXJzIiwibXVsdGlwbGllciIsImVwTGVuIiwidHdpdGNoaW5lc3NlcyIsImNtYVNpZ21hIiwiVGlwcHkiLCJ3aGVlbFBvc0luaXQiLCJ3b3JsZCIsImIyIiwicG9wdWxhdGlvbiIsImNvbnNvbGUiLCJhc3NlcnQiLCJsZW5ndGgiLCJ3aGVlbFIiLCJjaGFzc2lzSCIsImNoYXNzaXNXIiwiYXhsZU9mZnNldFkiLCJiZCIsImIyQm9keURlZiIsInNldF90eXBlIiwiYjJfZHluYW1pY0JvZHkiLCJzZXRfcG9zaXRpb24iLCJiMlZlYzIiLCJ3aGVlbEJvZHkiLCJDcmVhdGVCb2R5Iiwic2hhcGUiLCJiMkNpcmNsZVNoYXBlIiwic2V0X21fcmFkaXVzIiwiZmQiLCJiMkZpeHR1cmVEZWYiLCJzZXRfc2hhcGUiLCJzZXRfZGVuc2l0eSIsInNldF9mcmljdGlvbiIsInNldF9yZXN0aXR1dGlvbiIsImZpbHRlciIsImdldF9maWx0ZXIiLCJzZXRfY2F0ZWdvcnlCaXRzIiwic2V0X21hc2tCaXRzIiwic2V0X2ZpbHRlciIsImZpeHR1cmUiLCJjYXN0T2JqZWN0IiwiQ3JlYXRlRml4dHVyZSIsImIyRml4dHVyZSIsInBhcnRUeXBlIiwic3BvdCIsIndoZWVsTWFzcyIsIkdldE1hc3MiLCJlZGdlWCIsImVkZ2VZIiwiY3V0b3V0WCIsImN1dG91dFkiLCJjaGFzc2lzVmVydGljZXMiLCJiMkNoYXNzaXNWZXJ0aWNlcyIsInZlcnRleCIsInB1c2giLCJjaGFzc2lzUG9zSW5pdCIsImNoYXNzaXNCb2R5IiwiYjJDcmVhdGVQb2x5Z29uU2hhcGUiLCJjaGFzc2lzTWFzcyIsImpkIiwiYjJSZXZvbHV0ZUpvaW50RGVmIiwiSW5pdGlhbGl6ZSIsInNldF9lbmFibGVNb3RvciIsInNldF9tYXhNb3RvclRvcnF1ZSIsImF4bGUiLCJDcmVhdGVKb2ludCIsImIyUmV2b2x1dGVKb2ludCIsImlucHV0RGltIiwiZ2V0SW5wdXRzIiwic2hhcGVzIiwibl9kaW0iLCJ3ZWlnaHRDb3VudCIsImJpYXNDb3VudCIsImkiLCJuIiwibSIsInJlc2V0IiwidmVydGljZXMiLCJiMlBvbHlnb25TaGFwZSIsImJ1ZmZlciIsIl9tYWxsb2MiLCJvZmZzZXQiLCJIRUFQRjMyIiwiZ2V0X3giLCJnZXRfeSIsInB0cl93cmFwcGVkIiwid3JhcFBvaW50ZXIiLCJTZXQiLCJmbGF0V3RzIiwiZmxhdFd0SWR4Iiwid2VpZ2h0cyIsIm5ld1dlaWdodCIsIkZsb2F0MzJBcnJheSIsImZyb20iLCJzbGljZSIsIk1hdHJpeCIsImJpYXNlcyIsIm5ld0JpYXMiLCJTZXRUcmFuc2Zvcm0iLCJTZXRMaW5lYXJWZWxvY2l0eSIsIlNldEFuZ3VsYXJWZWxvY2l0eSIsIlNldEF3YWtlIiwidGFyZ2V0U3FFcnJTdW0iLCJ0YXJnZXRQcmV2IiwicHJldk91dHB1dCIsIm91dHB1dERpZmZTcVN1bSIsInByZXZXaGVlbFZlbFgiLCJ3aGVlbEFjY1giLCJwcmV2Q2hhc3Npc1ZlbFgiLCJjaGFzc2lzQWNjWCIsImRyaWZ0WFNxU3VtIiwiY3Jhc2hTdGVwQ291bnQiLCJ0YXJnZXQiLCJjdXJyZW50IiwiZGlmZiIsImRpZmZTcSIsIk1hdGgiLCJhYnMiLCJzcGVlZCIsIlNldE1vdG9yU3BlZWQiLCJpbnB1dHMiLCJyZXZlcnNlIiwic2lnbiIsIndoZWVsUG9zIiwiR2V0UG9zaXRpb24iLCJ3aGVlbFgiLCJ3aGVlbFkiLCJsaWRhcllzIiwieE9mZiIsImxpZGFyWSIsImludGVycFRlcnJhaW5ZIiwidGVycmFpblB0cyIsImNoYXNzaXNTaW4iLCJzaW4iLCJHZXRBbmdsZSIsImNoYXNzaXNWZWxYIiwiR2V0TGluZWFyVmVsb2NpdHkiLCJjaGFzc2lzQW5nVmVsIiwiR2V0QW5ndWxhclZlbG9jaXR5Iiwid2hlZWxWZWwiLCJ3aGVlbFZlbFgiLCJ3aGVlbEFuZ1ZlbCIsImF4bGVSeG4iLCJHZXRSZWFjdGlvbkZvcmNlIiwidXBkYXRlVGFyZ2V0U2NvcmUiLCJpbnB1dHNBcnJheSIsIm91dHB1dFJhdyIsIm11bCIsImFkZCIsImxlYWt5RWx1IiwiZGF0YSIsIm91dHB1dCIsInNldFNwZWVkIiwib3V0cHV0RGlmZiIsImNoYXNzaXNQb3MiLCJ3aGVlbFBvc0N1cnJlbnQiLCJ3aGVlbEFuZ2xlQ3VycmVudCIsImNoYXNzaXNQb3NDdXJyZW50IiwiY2hhc3Npc0FuZ2xlQ3VycmVudCIsIm90aGVyIiwiYSIsImIiLCJwIiwiYyIsIkFycmF5QnVmZmVyIiwiaiIsInN1bSIsImsiLCJsIiwicmVzdWx0IiwibWF4IiwiZXhwbTEiLCJQb3B1bGF0aW9uIiwiblRpcHB5cyIsImdyYXZpdHkiLCJiMldvcmxkIiwieURpZmZQcmV2IiwiZ3JvdW5kQm9keSIsInRlcnJhaW5QdHNGaWx0ZXJlZCIsInlEaWZmQ3VyciIsInNhbWVTbG9wZSIsInRlcnJhaW5JZHhUb1hQb3MiLCJlZGdlU2hhcGUiLCJiMkVkZ2VTaGFwZSIsIlNldFR3b1NpZGVkIiwiZ3JvdW5kRkQiLCJpZHgiLCJ4IiwieSIsInRpcHB5cyIsImFkZFRpcHB5cyIsImZsYXRXdHNJZHgiLCJzZXRXdHMiLCJ0YXJnZXRzIiwic29sdXRpb25zIiwiblNvbHV0aW9ucyIsInRpcHB5IiwidGFyZ2V0SWR4Iiwic3RlcCIsInVwZGF0ZSIsIlN0ZXAiLCJzb2x1dGlvbnNTY29yZXMiLCJ0aXBweTAiLCJzb2x1dGlvbiIsInd0c05vcm0iLCJ3dCIsImJpYXNOb3JtIiwiYmlhcyIsInRhc2tTY29yZXMiLCJ0YXNrVGlwcHkiLCJtc2UiLCJjcmFzaGVkUmF0aW8iLCJkcmlmdFgiLCJzY2FsZSIsImNlbnRlciIsImRyYXciLCJ4U2NhbGVkIiwibWluIiwiaWR4T2Zmc2V0IiwiY2xpcHBlZCIsImZsb29yIiwiY2VpbCIsInhzIiwibWFwIiwidiIsInlzIiwieURpZmYiLCJvbm1lc3NhZ2UiLCJlIiwiaW5mbyIsIm1zZyIsIkJveDJERmFjdG9yeSIsInRoZW4iLCJ0cmFpbiIsInBvc3RNZXNzYWdlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiTyIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiZnVsZmlsbGVkIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5Iiwia2V5Iiwic3BsaWNlIiwiciIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImYiLCJjaHVua0lkIiwiUHJvbWlzZSIsImFsbCIsInJlZHVjZSIsInByb21pc2VzIiwidSIsIm1pbmlDc3NGIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIndpbmRvdyIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJkb2N1bWVudCIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJFcnJvciIsInJlcGxhY2UiLCJzZWxmIiwiaW5zdGFsbGVkQ2h1bmtzIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJiaW5kIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwicG9wIl0sInNvdXJjZVJvb3QiOiIifQ==