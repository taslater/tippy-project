(()=>{var t,e,r={3041:(t,e,r)=>{"use strict";var s=r(7337),i={w:800,h:400,lInputCodes:["ArrowLeft"],rInputCodes:["ArrowRight"],xOffs:[-.3,-.1,.1,.3],ts:1/60,sinLim:.4,sinStep:.03,sinDecay:.01,velLim:4,velDecay:.01,groundHalfWidth:100,groundFlatCenterHalfWidth:1,groundDetailInterval:.2,get nTerrainPts(){return this.groundHalfWidth/this.groundDetailInterval*2+1},wallH:.9,wallW:.5,slopeDecay:.9,slopeLim:.4,slopeDiffMag:.125,slopeDiffDecay:1.1,slopeDiffLim:.2,get barMax(){var t="vel"==this.targetType?this.velLim:this.sinLim;return.45*this.w/t},barHeight:25,get scoreDenomEps(){return this.sinLim},crashSinLimit:.8,maxTorque:1,nWorkers:8,multiplier:2,epLen:800,twitchinesses:[0,.1,.05,.025,.01,.005,.0025,null],cmaSigma:.5,targetType:"vel"};function n(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=u(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var s=0,i=function(){};return{s:i,n:function(){return s>=t.length?{done:!0}:{done:!1,value:t[s++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,a=!0,o=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){o=!0,n=t},f:function(){try{a||null==r.return||r.return()}finally{if(o)throw n}}}}function a(t,e,r){return a=o()?Reflect.construct:function(t,e,r){var s=[null];s.push.apply(s,e);var i=new(Function.bind.apply(t,s));return r&&h(i,r.prototype),i},a.apply(null,arguments)}function o(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function l(t){return function(t){if(Array.isArray(t))return c(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||u(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(t,e){if(t){if("string"==typeof t)return c(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(t,e):void 0}}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,s=new Array(e);r<e;r++)s[r]=t[r];return s}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var r=0;r<e.length;r++){var s=e[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function y(t,e,r){return e&&p(t.prototype,e),r&&p(t,r),t}var v=function(){function t(e,r,s,o){f(this,t),this.population=o,console.assert(2==e.length,"Tippy requires 2d wheelPos"),this.wheelR=.25,this.wheelPosInit=[e[0],e[1]-this.wheelR],this.chassisH=1,this.chassisW=.3,this.axleOffsetY=.1;var h=new s.b2BodyDef;h.set_type(s.b2_dynamicBody),h.set_position(a(s.b2Vec2,l(this.wheelPosInit))),this.wheelBody=r.CreateBody(h);var u=new s.b2CircleShape;u.set_m_radius(this.wheelR);var c=new s.b2FixtureDef;c.set_shape(u),c.set_density(.5),c.set_friction(.9),c.set_restitution(.1);var p=c.get_filter();p.set_categoryBits(2),p.set_maskBits(1),c.set_filter(p);var y=s.castObject(this.wheelBody.CreateFixture(c),s.b2Fixture);y.partType="wheel",y.spot=this,this.wheelMass=this.wheelBody.GetMass();var v=.5*this.chassisW,d=.5*this.chassisH,g=.2*this.chassisW,w=.35*this.chassisH;this.chassisVertices=[[+v,-d],[-v,-d],[-v,+w],[-g,+d],[+g,+d],[+v,+w]];var m,b=[],S=n(this.chassisVertices);try{for(S.s();!(m=S.n()).done;){var _=m.value;b.push(new s.b2Vec2(_[0]+this.wheelPosInit[0],_[1]+this.wheelPosInit[1]))}}catch(t){S.e(t)}finally{S.f()}this.chassisPosInit=[this.wheelPosInit[0],this.wheelPosInit[1]-.5*this.chassisH+this.axleOffsetY];var x=new s.b2BodyDef;x.set_type(s.b2_dynamicBody),x.set_position(a(s.b2Vec2,l(this.chassisPosInit))),this.chassisBody=r.CreateBody(x);var A=this.b2CreatePolygonShape(b,s),P=new s.b2FixtureDef,B=P.get_filter();B.set_categoryBits(2),B.set_maskBits(1),P.set_filter(B),P.set_density(2),P.set_shape(A);var k=s.castObject(this.chassisBody.CreateFixture(P),s.b2Fixture);k.partType="chassis",k.spot=this,this.chassisMass=this.chassisBody.GetMass();var C=new s.b2RevoluteJointDef;C.Initialize(this.wheelBody,this.chassisBody,a(s.b2Vec2,l(this.wheelPosInit))),C.set_enableMotor(!0),C.set_maxMotorTorque(i.maxTorque),this.axle=s.castObject(r.CreateJoint(C),s.b2RevoluteJoint),this.inputDim=this.getInputs(0).length,this.shapes=[this.inputDim,12,8,1],this.n_dim=0,this.weightCount=0,this.biasCount=0;for(var I=0;I<this.shapes.length-1;I++){var T=this.shapes[I],D=this.shapes[I+1];this.n_dim+=(T+1)*D,this.weightCount+=T*D,this.biasCount+=D}this.reset(s)}return y(t,[{key:"b2CreatePolygonShape",value:function(t,e){for(var r=new e.b2PolygonShape,s=e._malloc(8*t.length),i=0,n=0;n<t.length;n++)e.HEAPF32[s+i>>2]=t[n].get_x(),e.HEAPF32[s+(i+4)>>2]=t[n].get_y(),i+=8;var a=e.wrapPointer(s,e.b2Vec2);return r.Set(a,t.length),r}},{key:"setWts",value:function(t){this.flatWts=t;var e=0;this.weights=[];for(var r=0;r<this.shapes.length-1;r++){var s=this.shapes[r],i=this.shapes[r+1],n=Float32Array.from(this.flatWts.slice(e,e+s*i));this.weights.push(new d(n,s,i)),e+=s*i}this.biases=[];for(var a=0;a<this.shapes.length-1;a++){var o=this.shapes[a+1],h=Float32Array.from(this.flatWts.slice(e,e+1*o));this.biases.push(new d(h,1,o)),e+=1*o}}},{key:"reset",value:function(t){this.chassisBody.SetTransform(a(t.b2Vec2,l(this.chassisPosInit)),0),this.chassisBody.SetLinearVelocity(new t.b2Vec2(0,0)),this.chassisBody.SetAngularVelocity(0),this.chassisBody.SetAwake(1),this.wheelBody.SetTransform(a(t.b2Vec2,l(this.wheelPosInit)),0),this.wheelBody.SetLinearVelocity(new t.b2Vec2(0,0)),this.wheelBody.SetAngularVelocity(0),this.wheelBody.SetAwake(1),this.targetSqErrSum=0,this.targetPrev=null,this.prevOutput=0,this.outputDiffSqSum=0,this.prevWheelVelX=0,this.wheelAccX=0,this.prevChassisVelX=0,this.chassisAccX=0,this.driftXSqSum=0,this.crashStepCount=0}},{key:"updateTargetScore",value:function(t,e){var r=t-e,s=r*r;Math.abs(t),i.scoreDenomEps,this.targetSqErrSum+="vel"===i.targetType?s:100*s}},{key:"setSpeed",value:function(t){this.axle.SetMotorSpeed(t)}},{key:"getInputs",value:function(t){var e;this.reverse=0!=t?Math.sign(t):1,e=null!=this.inputDim?new Float32Array(this.inputDim):[];var r=0,s=this.wheelBody.GetPosition(),a=s.get_x(),o=s.get_y();this.lidarYs=[];var h,l=n(i.xOffs);try{for(l.s();!(h=l.n()).done;){var u=h.value,c=m(a+this.reverse*u,this.population.terrainPts)-o-this.wheelR;this.lidarYs.push(c),e[r]=c,r++}}catch(t){l.e(t)}finally{l.f()}var f=Math.sin(this.chassisBody.GetAngle());e[r]=this.reverse*f,r++,Math.abs(f)>i.crashSinLimit&&this.crashStepCount++;var p=this.chassisBody.GetLinearVelocity().get_x();this.chassisAccX=p-this.prevChassisVelX,this.prevChassisVelX=p,0==t&&(this.driftXSqSum+=this.chassisAccX*this.chassisAccX);var y=this.chassisBody.GetAngularVelocity();e[r]=this.reverse*y,r++;var v=this.wheelBody.GetLinearVelocity(),d=v.get_x();this.wheelAccX=d-this.prevWheelVelX,this.prevWheelVelX=d,e[r]=this.reverse*d,e[++r]=v.get_y(),r++;var g=this.wheelBody.GetAngularVelocity();e[r]=this.reverse*g,r++;var w=this.axle.GetReactionForce(60);return e[r]=.01*this.reverse*w.get_x(),e[++r]=.01*w.get_y(),e[++r]=this.reverse*t,r++,null!==this.targetPrev&&("sin"===i.targetType?this.updateTargetScore(this.targetPrev,f):this.updateTargetScore(this.targetPrev,d)),this.targetPrev=t,e}},{key:"update",value:function(t){var e=this.getInputs(t),r=new d(e,1,e.length).mul(this.weights[0]).add(this.biases[0]).leakyElu().mul(this.weights[1]).add(this.biases[1]).leakyElu().mul(this.weights[2]).add(this.biases[2]).data[0],s=this.reverse*r;this.setSpeed(s);var i=s-this.prevOutput;this.outputDiffSqSum+=i*i,this.prevOutput=s}},{key:"drawPositionData",get:function(){var t=this.wheelBody.GetPosition(),e=this.chassisBody.GetPosition();return{wheelPosCurrent:[t.get_x(),t.get_y()],wheelAngleCurrent:this.wheelBody.GetAngle(),chassisPosCurrent:[e.get_x(),e.get_y()],chassisAngleCurrent:this.chassisBody.GetAngle()}}},{key:"corrData",get:function(){return[Math.sin(this.chassisBody.GetAngle()),this.wheelAccX,this.chassisAccX]}}]),t}(),d=function(){function t(e,r,s){f(this,t),this.data=e,this.m=r,this.n=s}return y(t,[{key:"mul",value:function(e){for(var r=this.data,s=e.data,i=this.m,n=this.n,a=e.n,o=new Float32Array(new ArrayBuffer(4*i*a)),h=0;h<a;h++)for(var l=0;l<i;l++){for(var u=0,c=0;c<n;c++)u+=r[l*n+c]*s[c*a+h];o[l*a+h]=u}return new t(o,i,a)}},{key:"add",value:function(e){for(var r=this.data,s=e.data,i=r.length,n=new Float32Array(new ArrayBuffer(4*i)),a=0;a<i;a++)n[a]=r[a]+s[a];return new t(n,this.m,this.n)}},{key:"relu",value:function(){for(var e=this.data.length,r=this.data.slice(),s=0;s<e;s++)r[s]=Math.max(0,r[s]);return new t(r,this.m,this.n)}},{key:"leakyRelu",value:function(){for(var e=this.data.length,r=this.data.slice(),s=0;s<e;s++)r[s]=Math.max(.1*r[s],r[s]);return new t(r,this.m,this.n)}},{key:"elu",value:function(){for(var e=this.data.length,r=this.data.slice(),s=0;s<e;s++)r[s]<0&&(r[s]=Math.expm1(r[s]));return new t(r,this.m,this.n)}},{key:"leakyElu",value:function(){for(var e=this.data.length,r=this.data.slice(),s=0;s<e;s++)r[s]<0&&(r[s]=Math.expm1(r[s])+.1*r[s]);return new t(r,this.m,this.n)}}]),t}(),g=function(){function t(e,r,s,n){f(this,t),this.wheelPosInit=e.slice();var a=new n.b2Vec2(0,9.81);this.world=new n.b2World(a),this.b2=n,this.terrainPts=s;for(var o,h=this.world.CreateBody(new n.b2BodyDef),l=[],u=0;u<i.nTerrainPts;u++){var c=s[u+1]-s[u],p=c==o;o=c,p&&u!=i.nTerrainPts-1||l.push([w(u),s[u]])}for(var y=l.length-1;y>=1;y--){var v=new n.b2EdgeShape;v.SetTwoSided(new n.b2Vec2(l[y][0],l[y][1]),new n.b2Vec2(l[y-1][0],l[y-1][1]));var d=new n.b2FixtureDef;d.set_shape(v),d.set_friction(.9),d.set_restitution(.1),n.castObject(h.CreateFixture(d),n.b2Fixture)}for(var g=0,m=[0,i.nTerrainPts-1];g<m.length;g++){var b=m[g],S=[w(b),s[b]],_=S[0],x=S[1],A=new n.b2EdgeShape;A.SetTwoSided(new n.b2Vec2(_,x),new n.b2Vec2(_,x-i.wallH));var P=new n.b2FixtureDef;P.set_shape(A),P.set_friction(.9),P.set_restitution(.1),n.castObject(h.CreateFixture(P),n.b2Fixture)}this.tippys=[],this.addTippys(r),this.n_dim=this.tippys[0].n_dim}return y(t,[{key:"reset",value:function(){var t,e=n(this.tippys);try{for(e.s();!(t=e.n()).done;)t.value.reset(this.b2)}catch(t){e.e(t)}finally{e.f()}}},{key:"addTippys",value:function(t){for(var e=0;e<t;e++)this.tippys.push(new v(this.wheelPosInit,this.world,this.b2,this))}},{key:"setWts",value:function(t){var e,r=0,s=n(this.tippys);try{for(s.s();!(e=s.n()).done;)e.value.setWts(t.slice(r,r+this.n_dim)),r+=this.n_dim}catch(t){s.e(t)}finally{s.f()}}},{key:"train",value:function(t){var e=t.targets,r=t.solutions,s=r.length/this.n_dim;this.tippys.length<s*e.length&&this.addTippys(s*e.length-this.tippys.length);for(var a=0,o=0;o<s;o++){for(var h=0;h<e.length;h++){var l=this.tippys[o*e.length+h];l.setWts(r.slice(a,a+this.n_dim)),l.targetIdx=h}a+=this.n_dim}this.reset();for(var u=0;u<e[0].length;u++){var c,f=n(this.tippys);try{for(f.s();!(c=f.n()).done;){var p=c.value;p.update(e[p.targetIdx][u])}}catch(t){f.e(t)}finally{f.f()}this.world.Step(i.ts,8,3)}for(var y=[],v=0;v<s;v++){var d,g=this.tippys[v*e.length],w=g.flatWts,m=0,b=n(g.weights);try{for(b.s();!(d=b.n()).done;){var S,_=n(d.value.data);try{for(_.s();!(S=_.n()).done;){var x=S.value;m+=x*x}}catch(t){_.e(t)}finally{_.f()}}}catch(t){b.e(t)}finally{b.f()}m/=g.weightCount;var A,P=0,B=n(g.biases);try{for(B.s();!(A=B.n()).done;){var k,C=n(A.value.data);try{for(C.s();!(k=C.n()).done;){var I=k.value;P+=I*I}}catch(t){C.e(t)}finally{C.f()}}}catch(t){B.e(t)}finally{B.f()}P/=g.biasCount;for(var T=[],D=0;D<e.length;D++){var O=this.tippys[v*e.length+D],V=O.targetSqErrSum/i.epLen,M=O.crashStepCount/i.epLen,F=O.driftXSqSum/i.epLen;T.push({mse:V,crashedRatio:M,driftX:F})}y.push({solution:w,wtsNorm:m,biasNorm:P,taskScores:T})}return y}},{key:"update",value:function(t){for(var e=0;e<this.tippys.length;e++)this.tippys[e].update(t[e]);this.world.Step(i.ts,8,3)}},{key:"draw",value:function(t,e){var r,s=n(this.tippys);try{for(s.s();!(r=s.n()).done;)r.value.draw(t,e)}catch(t){s.e(t)}finally{s.f()}}}]),t}();function w(t){return(t-(i.nTerrainPts-1)/2)*i.groundDetailInterval}function m(t,e){var r=(t=Math.min(Math.max(t,-i.groundHalfWidth),i.groundHalfWidth))/i.groundDetailInterval,s=(i.nTerrainPts-1)/2,n=[Math.floor(r),Math.ceil(r)],a=n.map((function(t){return i.groundDetailInterval*t})),o=n.map((function(t){return e[t+s]}));if(a[1]==a[0])return o[0];var h=(o[1]-o[0])/(a[1]-a[0])*(t-a[0]);return o[0]+h}function b(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,s=new Array(e);r<e;r++)s[r]=t[r];return s}var S=null;onmessage=function(t){var e,r,i=(e=t.data,r=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var s,i,n=[],a=!0,o=!1;try{for(r=r.call(t);!(a=(s=r.next()).done)&&(n.push(s.value),!e||n.length!==e);a=!0);}catch(t){o=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(o)throw i}}return n}}(e,r)||function(t,e){if(t){if("string"==typeof t)return b(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?b(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=i[0],a=i[1];if("terrainPts"==n)(0,s.Z)().then((function(t){S=new g([0,0],1,a,t)}));else if("targetsSolutions"==n){var o=S.train(a);postMessage(["solutionsScores",o])}}},8100:()=>{},8069:()=>{}},s={};function i(t){var e=s[t];if(void 0!==e)return e.exports;var n=s[t]={exports:{}};return r[t](n,n.exports,i),n.exports}i.m=r,i.x=()=>{var t=i.O(void 0,[337],(()=>i(3041)));return i.O(t)},t=[],i.O=(e,r,s,n)=>{if(!r){var a=1/0;for(u=0;u<t.length;u++){for(var[r,s,n]=t[u],o=!0,h=0;h<r.length;h++)(!1&n||a>=n)&&Object.keys(i.O).every((t=>i.O[t](r[h])))?r.splice(h--,1):(o=!1,n<a&&(a=n));if(o){t.splice(u--,1);var l=s();void 0!==l&&(e=l)}}return e}n=n||0;for(var u=t.length;u>0&&t[u-1][2]>n;u--)t[u]=t[u-1];t[u]=[r,s,n]},i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.f={},i.e=t=>Promise.all(Object.keys(i.f).reduce(((e,r)=>(i.f[r](t,e),e)),[])),i.u=t=>t+".28d3beff22d5b4c1430d.js",i.miniCssF=t=>{},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{i.b=self.location+"";var t={795:1};i.f.i=(e,r)=>{t[e]||importScripts(i.p+i.u(e))};var e=self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[],r=e.push.bind(e);e.push=e=>{var[s,n,a]=e;for(var o in n)i.o(n,o)&&(i.m[o]=n[o]);for(a&&a(i);s.length;)t[s.pop()]=1;r(e)}})(),e=i.x,i.x=()=>i.e(337).then(e),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFDaEJpRCxFQUFvQlIsRUFBRSxLQUFLSSxLQUFLeFEsR2FEZDRRLEVBQW9CakQsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvc3RhcnR1cCBjaHVuayBkZXBlbmRlbmNpZXMiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlLy4vc3JjL3BhZ2VzL3RpcHB5L2dsb2JhbHMuanMiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlLy4vc3JjL3BhZ2VzL3RpcHB5L3RpcHB5LmpzIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS8uL3NyYy9wYWdlcy90aXBweS93b3JrZXJzL3NpbXVsYXRpb24td29ya2VyLmpzIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90aXBweS1wcm9qZWN0LXdlYnNpdGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGlwcHktcHJvamVjdC13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvaW1wb3J0U2NyaXB0cyBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3RpcHB5LXByb2plY3Qtd2Vic2l0ZS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIG5leHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLng7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnggPSAoKSA9PiB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoMzM3KS50aGVuKG5leHQpO1xufTsiLCJleHBvcnQgY29uc3QgZ2xvYmFscyA9IHtcbiAgdzogODAwLFxuICBoOiA0MDAsXG4gIGxJbnB1dENvZGVzOiBbXCJBcnJvd0xlZnRcIl0sXG4gIHJJbnB1dENvZGVzOiBbXCJBcnJvd1JpZ2h0XCJdLFxuICB4T2ZmczogWy0wLjMsIC0wLjEsIDAuMSwgMC4zXSxcbiAgdHM6IDEuMCAvIDYwLFxuICAvLyBzaW5MaW06IDAuMyxcbiAgc2luTGltOiAwLjQsXG4gIC8vIGRpcmVjdGlvblN0ZXA6IDAuMDIsXG4gIHNpblN0ZXA6IDAuMDMsXG4gIHNpbkRlY2F5OiAwLjAxLFxuICB2ZWxMaW06IDQsXG4gIHZlbERlY2F5OiAwLjAxLFxuICBncm91bmRIYWxmV2lkdGg6IDEwMCxcbiAgZ3JvdW5kRmxhdENlbnRlckhhbGZXaWR0aDogMSxcbiAgZ3JvdW5kRGV0YWlsSW50ZXJ2YWw6IDAuMixcbiAgLy8gblRlcnJhaW5QdHM6IDIgKiAodGhpcy5ncm91bmRIYWxmV2lkdGggLyB0aGlzLmdyb3VuZERldGFpbEludGVydmFsKSArIDEsXG4gIGdldCBuVGVycmFpblB0cygpIHtcbiAgICByZXR1cm4gMiAqICh0aGlzLmdyb3VuZEhhbGZXaWR0aCAvIHRoaXMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwpICsgMVxuICB9LFxuICB3YWxsSDogMC45LFxuICB3YWxsVzogMC41LFxuICAvLyBzbG9wZU1hZzogMC4xLFxuICBzbG9wZURlY2F5OiAwLjksXG4gIHNsb3BlTGltOiAwLjQsXG4gIHNsb3BlRGlmZk1hZzogMC4xMjUsXG4gIHNsb3BlRGlmZkRlY2F5OiAxLjEsXG4gIHNsb3BlRGlmZkxpbTogMC4yLFxuICBnZXQgYmFyTWF4KCkge1xuICAgIGNvbnN0IGxpbSA9IHRoaXMudGFyZ2V0VHlwZSA9PSBcInZlbFwiID8gdGhpcy52ZWxMaW0gOiB0aGlzLnNpbkxpbVxuICAgIHJldHVybiAoMC41ICogMC45ICogdGhpcy53KSAvIGxpbVxuICB9LFxuICBiYXJIZWlnaHQ6IDI1LFxuICAvLyBzY29yZURlbm9tRXBzOiAwLjAxLFxuICAvLyBzY29yZURlbm9tRXBzOiAwLjEsXG4gIGdldCBzY29yZURlbm9tRXBzKCkge1xuICAgIHJldHVybiB0aGlzLnNpbkxpbVxuICB9LFxuICBjcmFzaFNpbkxpbWl0OiAwLjgsXG4gIG1heFRvcnF1ZTogMS4wLFxuICBuV29ya2VyczogOCxcbiAgbXVsdGlwbGllcjogMixcbiAgZXBMZW46IDgwMCxcbiAgdHdpdGNoaW5lc3NlczogWzAsIDAuMSwgMC4wNSwgMC4wMjUsIDAuMDEsIDAuMDA1LCAwLjAwMjUsIG51bGxdLFxuICBjbWFTaWdtYTogMC41LFxuICAvLyB0YXJnZXRUeXBlOiBcInNpblwiLFxuICB0YXJnZXRUeXBlOiBcInZlbFwiLFxufVxuIiwiaW1wb3J0IHsgZ2xvYmFscyB9IGZyb20gXCIuL2dsb2JhbHMuanNcIlxuaW1wb3J0IHsgcmFuZF9ub3JtYWwgfSBmcm9tIFwiLi9yYW5kb21fbm9ybWFsLmpzXCJcblxuY2xhc3MgVGlwcHkge1xuICBjb25zdHJ1Y3Rvcih3aGVlbFBvc0luaXQsIHdvcmxkLCBiMiwgcG9wdWxhdGlvbikge1xuICAgIHRoaXMucG9wdWxhdGlvbiA9IHBvcHVsYXRpb25cbiAgICBjb25zb2xlLmFzc2VydCh3aGVlbFBvc0luaXQubGVuZ3RoID09IDIsIFwiVGlwcHkgcmVxdWlyZXMgMmQgd2hlZWxQb3NcIilcbiAgICAvLyB0aGlzLndoZWVsUG9zSW5pdCA9IHdoZWVsUG9zSW5pdC5zbGljZSgpXG4gICAgdGhpcy53aGVlbFIgPSAwLjI1XG4gICAgdGhpcy53aGVlbFBvc0luaXQgPSBbd2hlZWxQb3NJbml0WzBdLCB3aGVlbFBvc0luaXRbMV0gLSB0aGlzLndoZWVsUl1cbiAgICBjb25zdCB3aGVlbEZyaWN0aW9uID0gMC45LFxuICAgICAgd2hlZWxEZW5zaXR5ID0gMC41LFxuICAgICAgd2hlZWxSZXN0aXR1dGlvbiA9IDAuMSxcbiAgICAgIGNoYXNzaXNEZW5zaXR5ID0gMi4wXG4gICAgdGhpcy5jaGFzc2lzSCA9IDEuMFxuICAgIHRoaXMuY2hhc3Npc1cgPSAwLjNcbiAgICB0aGlzLmF4bGVPZmZzZXRZID0gMC4xXG5cbiAgICAvLyBjcmVhdGUgd2hlZWxcbiAgICB7XG4gICAgICBjb25zdCBiZCA9IG5ldyBiMi5iMkJvZHlEZWYoKVxuICAgICAgYmQuc2V0X3R5cGUoYjIuYjJfZHluYW1pY0JvZHkpXG4gICAgICBiZC5zZXRfcG9zaXRpb24obmV3IGIyLmIyVmVjMiguLi50aGlzLndoZWVsUG9zSW5pdCkpXG4gICAgICB0aGlzLndoZWVsQm9keSA9IHdvcmxkLkNyZWF0ZUJvZHkoYmQpXG5cbiAgICAgIGNvbnN0IHNoYXBlID0gbmV3IGIyLmIyQ2lyY2xlU2hhcGUoKVxuICAgICAgc2hhcGUuc2V0X21fcmFkaXVzKHRoaXMud2hlZWxSKVxuXG4gICAgICBjb25zdCBmZCA9IG5ldyBiMi5iMkZpeHR1cmVEZWYoKVxuICAgICAgZmQuc2V0X3NoYXBlKHNoYXBlKVxuICAgICAgZmQuc2V0X2RlbnNpdHkod2hlZWxEZW5zaXR5KVxuICAgICAgZmQuc2V0X2ZyaWN0aW9uKHdoZWVsRnJpY3Rpb24pXG4gICAgICBmZC5zZXRfcmVzdGl0dXRpb24od2hlZWxSZXN0aXR1dGlvbilcblxuICAgICAgY29uc3QgZmlsdGVyID0gZmQuZ2V0X2ZpbHRlcigpXG4gICAgICBmaWx0ZXIuc2V0X2NhdGVnb3J5Qml0cygweDAwMDIpXG4gICAgICBmaWx0ZXIuc2V0X21hc2tCaXRzKDB4MDAwMSlcbiAgICAgIGZkLnNldF9maWx0ZXIoZmlsdGVyKVxuICAgICAgY29uc3QgZml4dHVyZSA9IGIyLmNhc3RPYmplY3QoXG4gICAgICAgIHRoaXMud2hlZWxCb2R5LkNyZWF0ZUZpeHR1cmUoZmQpLFxuICAgICAgICBiMi5iMkZpeHR1cmVcbiAgICAgIClcbiAgICAgIGZpeHR1cmUucGFydFR5cGUgPSBcIndoZWVsXCJcbiAgICAgIGZpeHR1cmUuc3BvdCA9IHRoaXNcblxuICAgICAgdGhpcy53aGVlbE1hc3MgPSB0aGlzLndoZWVsQm9keS5HZXRNYXNzKClcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgY2hhc3Npc1xuICAgIHtcbiAgICAgIGNvbnN0IGVkZ2VYID0gMC41ICogdGhpcy5jaGFzc2lzVyxcbiAgICAgICAgZWRnZVkgPSAwLjUgKiB0aGlzLmNoYXNzaXNILFxuICAgICAgICBjdXRvdXRYID0gMC4yICogdGhpcy5jaGFzc2lzVyxcbiAgICAgICAgY3V0b3V0WSA9IDAuMzUgKiB0aGlzLmNoYXNzaXNIXG5cbiAgICAgIHRoaXMuY2hhc3Npc1ZlcnRpY2VzID0gW1xuICAgICAgICBbK2VkZ2VYLCAtZWRnZVldLFxuICAgICAgICBbLWVkZ2VYLCAtZWRnZVldLFxuICAgICAgICBbLWVkZ2VYLCArY3V0b3V0WV0sXG4gICAgICAgIFstY3V0b3V0WCwgK2VkZ2VZXSxcbiAgICAgICAgWytjdXRvdXRYLCArZWRnZVldLFxuICAgICAgICBbK2VkZ2VYLCArY3V0b3V0WV0sXG4gICAgICBdXG5cbiAgICAgIGNvbnN0IGIyQ2hhc3Npc1ZlcnRpY2VzID0gW11cbiAgICAgIGZvciAobGV0IHZlcnRleCBvZiB0aGlzLmNoYXNzaXNWZXJ0aWNlcykge1xuICAgICAgICBiMkNoYXNzaXNWZXJ0aWNlcy5wdXNoKFxuICAgICAgICAgIG5ldyBiMi5iMlZlYzIoXG4gICAgICAgICAgICB2ZXJ0ZXhbMF0gKyB0aGlzLndoZWVsUG9zSW5pdFswXSxcbiAgICAgICAgICAgIHZlcnRleFsxXSArIHRoaXMud2hlZWxQb3NJbml0WzFdXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hhc3Npc1Bvc0luaXQgPSBbXG4gICAgICAgIHRoaXMud2hlZWxQb3NJbml0WzBdLFxuICAgICAgICB0aGlzLndoZWVsUG9zSW5pdFsxXSAtIDAuNSAqIHRoaXMuY2hhc3Npc0ggKyB0aGlzLmF4bGVPZmZzZXRZLFxuICAgICAgXVxuICAgICAgY29uc3QgYmQgPSBuZXcgYjIuYjJCb2R5RGVmKClcbiAgICAgIGJkLnNldF90eXBlKGIyLmIyX2R5bmFtaWNCb2R5KVxuICAgICAgYmQuc2V0X3Bvc2l0aW9uKG5ldyBiMi5iMlZlYzIoLi4udGhpcy5jaGFzc2lzUG9zSW5pdCkpXG4gICAgICAvLyBiZC5zZXRfbGluZWFyRGFtcGluZygwLjEpXG4gICAgICAvLyBiZC5zZXRfYW5ndWxhckRhbXBpbmcoMC4xKVxuICAgICAgdGhpcy5jaGFzc2lzQm9keSA9IHdvcmxkLkNyZWF0ZUJvZHkoYmQpXG4gICAgICBjb25zdCBzaGFwZSA9IHRoaXMuYjJDcmVhdGVQb2x5Z29uU2hhcGUoYjJDaGFzc2lzVmVydGljZXMsIGIyKVxuICAgICAgY29uc3QgZmQgPSBuZXcgYjIuYjJGaXh0dXJlRGVmKClcbiAgICAgIGNvbnN0IGZpbHRlciA9IGZkLmdldF9maWx0ZXIoKVxuICAgICAgZmlsdGVyLnNldF9jYXRlZ29yeUJpdHMoMHgwMDAyKVxuICAgICAgZmlsdGVyLnNldF9tYXNrQml0cygweDAwMDEpXG4gICAgICBmZC5zZXRfZmlsdGVyKGZpbHRlcilcbiAgICAgIGZkLnNldF9kZW5zaXR5KGNoYXNzaXNEZW5zaXR5KVxuICAgICAgZmQuc2V0X3NoYXBlKHNoYXBlKVxuICAgICAgLy8gZmQuc2V0X2ZyaWN0aW9uKDAuMylcbiAgICAgIC8vIGZkLnNldF9yZXN0aXR1dGlvbigwLjEpXG4gICAgICBjb25zdCBmaXh0dXJlID0gYjIuY2FzdE9iamVjdChcbiAgICAgICAgdGhpcy5jaGFzc2lzQm9keS5DcmVhdGVGaXh0dXJlKGZkKSxcbiAgICAgICAgYjIuYjJGaXh0dXJlXG4gICAgICApXG4gICAgICBmaXh0dXJlLnBhcnRUeXBlID0gXCJjaGFzc2lzXCJcbiAgICAgIGZpeHR1cmUuc3BvdCA9IHRoaXNcbiAgICAgIHRoaXMuY2hhc3Npc01hc3MgPSB0aGlzLmNoYXNzaXNCb2R5LkdldE1hc3MoKVxuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBqb2ludFxuICAgIHtcbiAgICAgIGNvbnN0IGpkID0gbmV3IGIyLmIyUmV2b2x1dGVKb2ludERlZigpXG4gICAgICBqZC5Jbml0aWFsaXplKFxuICAgICAgICB0aGlzLndoZWVsQm9keSxcbiAgICAgICAgdGhpcy5jaGFzc2lzQm9keSxcbiAgICAgICAgbmV3IGIyLmIyVmVjMiguLi50aGlzLndoZWVsUG9zSW5pdClcbiAgICAgIClcblxuICAgICAgamQuc2V0X2VuYWJsZU1vdG9yKHRydWUpXG4gICAgICBqZC5zZXRfbWF4TW90b3JUb3JxdWUoZ2xvYmFscy5tYXhUb3JxdWUpXG4gICAgICB0aGlzLmF4bGUgPSBiMi5jYXN0T2JqZWN0KHdvcmxkLkNyZWF0ZUpvaW50KGpkKSwgYjIuYjJSZXZvbHV0ZUpvaW50KVxuICAgIH1cblxuICAgIHRoaXMuaW5wdXREaW0gPSB0aGlzLmdldElucHV0cygwKS5sZW5ndGhcbiAgICAvLyAvLyB0aGlzLnNoYXBlcyA9IFt0aGlzLmlucHV0RGltLCAxNiwgOCwgNF1cbiAgICAvLyAvLyB0aGlzLnNoYXBlcyA9IFt0aGlzLmlucHV0RGltLCAyMCwgMTAsIDRdXG4gICAgdGhpcy5zaGFwZXMgPSBbdGhpcy5pbnB1dERpbSwgMTIsIDgsIDFdXG5cbiAgICB0aGlzLm5fZGltID0gMFxuICAgIHRoaXMud2VpZ2h0Q291bnQgPSAwXG4gICAgdGhpcy5iaWFzQ291bnQgPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNoYXBlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGNvbnN0IG4gPSB0aGlzLnNoYXBlc1tpXSxcbiAgICAgICAgbSA9IHRoaXMuc2hhcGVzW2kgKyAxXVxuICAgICAgdGhpcy5uX2RpbSArPSAobiArIDEpICogbVxuICAgICAgdGhpcy53ZWlnaHRDb3VudCArPSBuICogbVxuICAgICAgdGhpcy5iaWFzQ291bnQgKz0gbVxuICAgIH1cblxuICAgIHRoaXMucmVzZXQoYjIpXG4gIH1cblxuICBiMkNyZWF0ZVBvbHlnb25TaGFwZSh2ZXJ0aWNlcywgYjIpIHtcbiAgICBjb25zdCBzaGFwZSA9IG5ldyBiMi5iMlBvbHlnb25TaGFwZSgpXG4gICAgY29uc3QgYnVmZmVyID0gYjIuX21hbGxvYyh2ZXJ0aWNlcy5sZW5ndGggKiA4KVxuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgYjIuSEVBUEYzMlsoYnVmZmVyICsgb2Zmc2V0KSA+PiAyXSA9IHZlcnRpY2VzW2ldLmdldF94KClcbiAgICAgIGIyLkhFQVBGMzJbKGJ1ZmZlciArIChvZmZzZXQgKyA0KSkgPj4gMl0gPSB2ZXJ0aWNlc1tpXS5nZXRfeSgpXG4gICAgICBvZmZzZXQgKz0gOFxuICAgIH1cbiAgICBjb25zdCBwdHJfd3JhcHBlZCA9IGIyLndyYXBQb2ludGVyKGJ1ZmZlciwgYjIuYjJWZWMyKVxuICAgIHNoYXBlLlNldChwdHJfd3JhcHBlZCwgdmVydGljZXMubGVuZ3RoKVxuICAgIHJldHVybiBzaGFwZVxuICB9XG5cbiAgc2V0V3RzKGZsYXRXdHMpIHtcbiAgICAvLyB0aGlzLmZsYXRXdHMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMubl9kaW0pLm1hcCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KVxuICAgIHRoaXMuZmxhdFd0cyA9IGZsYXRXdHNcbiAgICBsZXQgZmxhdFd0SWR4ID0gMFxuICAgIHRoaXMud2VpZ2h0cyA9IFtdXG4gICAgLy8gdGhpcy53ZWlnaHRDb3VudCA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2hhcGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgY29uc3QgbiA9IHRoaXMuc2hhcGVzW2ldLFxuICAgICAgICBtID0gdGhpcy5zaGFwZXNbaSArIDFdLFxuICAgICAgICBuZXdXZWlnaHQgPSBGbG9hdDMyQXJyYXkuZnJvbShcbiAgICAgICAgICB0aGlzLmZsYXRXdHMuc2xpY2UoZmxhdFd0SWR4LCBmbGF0V3RJZHggKyBuICogbSlcbiAgICAgICAgKVxuICAgICAgLy8gdGhpcy53ZWlnaHRDb3VudCArPSBuZXdXZWlnaHQubGVuZ3RoXG4gICAgICB0aGlzLndlaWdodHMucHVzaChuZXcgTWF0cml4KG5ld1dlaWdodCwgbiwgbSkpXG4gICAgICBmbGF0V3RJZHggKz0gbiAqIG1cbiAgICB9XG4gICAgdGhpcy5iaWFzZXMgPSBbXVxuICAgIC8vIHRoaXMuYmlhc0NvdW50ID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaGFwZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBjb25zdCBuID0gMSxcbiAgICAgICAgbSA9IHRoaXMuc2hhcGVzW2kgKyAxXSxcbiAgICAgICAgbmV3QmlhcyA9IEZsb2F0MzJBcnJheS5mcm9tKFxuICAgICAgICAgIHRoaXMuZmxhdFd0cy5zbGljZShmbGF0V3RJZHgsIGZsYXRXdElkeCArIG4gKiBtKVxuICAgICAgICApXG4gICAgICAvLyB0aGlzLmJpYXNDb3VudCArPSBuZXdCaWFzLmxlbmd0aFxuICAgICAgdGhpcy5iaWFzZXMucHVzaChuZXcgTWF0cml4KG5ld0JpYXMsIG4sIG0pKVxuICAgICAgZmxhdFd0SWR4ICs9IG4gKiBtXG4gICAgfVxuICB9XG5cbiAgcmVzZXQoYjIpIHtcbiAgICB0aGlzLmNoYXNzaXNCb2R5LlNldFRyYW5zZm9ybShuZXcgYjIuYjJWZWMyKC4uLnRoaXMuY2hhc3Npc1Bvc0luaXQpLCAwKVxuICAgIHRoaXMuY2hhc3Npc0JvZHkuU2V0TGluZWFyVmVsb2NpdHkobmV3IGIyLmIyVmVjMigwLCAwKSlcbiAgICB0aGlzLmNoYXNzaXNCb2R5LlNldEFuZ3VsYXJWZWxvY2l0eSgwKVxuICAgIHRoaXMuY2hhc3Npc0JvZHkuU2V0QXdha2UoMSlcblxuICAgIHRoaXMud2hlZWxCb2R5LlNldFRyYW5zZm9ybShuZXcgYjIuYjJWZWMyKC4uLnRoaXMud2hlZWxQb3NJbml0KSwgMClcbiAgICB0aGlzLndoZWVsQm9keS5TZXRMaW5lYXJWZWxvY2l0eShuZXcgYjIuYjJWZWMyKDAsIDApKVxuICAgIHRoaXMud2hlZWxCb2R5LlNldEFuZ3VsYXJWZWxvY2l0eSgwKVxuICAgIHRoaXMud2hlZWxCb2R5LlNldEF3YWtlKDEpXG5cbiAgICB0aGlzLnRhcmdldFNxRXJyU3VtID0gMFxuICAgIHRoaXMudGFyZ2V0UHJldiA9IG51bGxcblxuICAgIHRoaXMucHJldk91dHB1dCA9IDBcbiAgICB0aGlzLm91dHB1dERpZmZTcVN1bSA9IDBcblxuICAgIHRoaXMucHJldldoZWVsVmVsWCA9IDBcbiAgICB0aGlzLndoZWVsQWNjWCA9IDBcbiAgICB0aGlzLnByZXZDaGFzc2lzVmVsWCA9IDBcbiAgICB0aGlzLmNoYXNzaXNBY2NYID0gMFxuXG4gICAgdGhpcy5kcmlmdFhTcVN1bSA9IDBcbiAgICB0aGlzLmNyYXNoU3RlcENvdW50ID0gMFxuICB9XG5cbiAgdXBkYXRlVGFyZ2V0U2NvcmUodGFyZ2V0LCBjdXJyZW50KSB7XG4gICAgY29uc3QgZGlmZiA9IHRhcmdldCAtIGN1cnJlbnQsXG4gICAgICBkaWZmU3EgPSBkaWZmICogZGlmZixcbiAgICAgIGRlbm9tID0gTWF0aC5hYnModGFyZ2V0KSArIGdsb2JhbHMuc2NvcmVEZW5vbUVwc1xuICAgIC8vIHRoaXMudGFyZ2V0U3FFcnJTdW0gKz0gZGlmZlNxIC8gZGVub21cbiAgICB0aGlzLnRhcmdldFNxRXJyU3VtICs9IGdsb2JhbHMudGFyZ2V0VHlwZSA9PT0gXCJ2ZWxcIiA/IGRpZmZTcSA6IDFlMiAqIGRpZmZTcVxuICB9XG5cbiAgc2V0U3BlZWQoc3BlZWQpIHtcbiAgICB0aGlzLmF4bGUuU2V0TW90b3JTcGVlZChzcGVlZClcbiAgfVxuXG4gIGdldElucHV0cyh0YXJnZXQpIHtcbiAgICB0aGlzLnJldmVyc2UgPSB0YXJnZXQgIT0gMCA/IE1hdGguc2lnbih0YXJnZXQpIDogMVxuICAgIGxldCBpbnB1dHNcbiAgICBpZiAodGhpcy5pbnB1dERpbSAhPSBudWxsKSB7XG4gICAgICBpbnB1dHMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuaW5wdXREaW0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0cyA9IFtdXG4gICAgfVxuICAgIGxldCBpID0gMFxuICAgIC8vIGVsZXZhdGlvblxuICAgIGNvbnN0IHdoZWVsUG9zID0gdGhpcy53aGVlbEJvZHkuR2V0UG9zaXRpb24oKSxcbiAgICAgIHdoZWVsWCA9IHdoZWVsUG9zLmdldF94KCksXG4gICAgICB3aGVlbFkgPSB3aGVlbFBvcy5nZXRfeSgpXG4gICAgLy8gICBpbnRlcnBZID0gaW50ZXJwVGVycmFpblkod2hlZWxYLCB0aGlzLnBvcHVsYXRpb24udGVycmFpblB0cylcbiAgICAvLyB0aGlzLnlDbGVhcmFuY2UgPSBpbnRlcnBZIC0gd2hlZWxZIC0gdGhpcy53aGVlbFJcbiAgICAvLyBpbnB1dHNbaV0gPSB0aGlzLnlDbGVhcmFuY2VcbiAgICAvLyBpKytcbiAgICB0aGlzLmxpZGFyWXMgPSBbXVxuICAgIGZvciAobGV0IHhPZmYgb2YgZ2xvYmFscy54T2Zmcykge1xuICAgICAgY29uc3QgbGlkYXJZID1cbiAgICAgICAgaW50ZXJwVGVycmFpblkoXG4gICAgICAgICAgd2hlZWxYICsgdGhpcy5yZXZlcnNlICogeE9mZixcbiAgICAgICAgICB0aGlzLnBvcHVsYXRpb24udGVycmFpblB0c1xuICAgICAgICApIC1cbiAgICAgICAgd2hlZWxZIC1cbiAgICAgICAgdGhpcy53aGVlbFJcbiAgICAgIHRoaXMubGlkYXJZcy5wdXNoKGxpZGFyWSlcbiAgICAgIGlucHV0c1tpXSA9IGxpZGFyWVxuICAgICAgaSsrXG4gICAgfVxuXG4gICAgLy8gY2hhc3Npc1NpblxuICAgIGNvbnN0IGNoYXNzaXNTaW4gPSBNYXRoLnNpbih0aGlzLmNoYXNzaXNCb2R5LkdldEFuZ2xlKCkpXG4gICAgaW5wdXRzW2ldID0gdGhpcy5yZXZlcnNlICogY2hhc3Npc1NpblxuICAgIGkrK1xuICAgIGlmIChNYXRoLmFicyhjaGFzc2lzU2luKSA+IGdsb2JhbHMuY3Jhc2hTaW5MaW1pdCkge1xuICAgICAgdGhpcy5jcmFzaFN0ZXBDb3VudCsrXG4gICAgfVxuICAgIC8vIGNoYXNzaXNWZWxYLCBjaGFzc2lzVmVsWVxuICAgIGNvbnN0IGNoYXNzaXNWZWwgPSB0aGlzLmNoYXNzaXNCb2R5LkdldExpbmVhclZlbG9jaXR5KCksXG4gICAgICBjaGFzc2lzVmVsWCA9IGNoYXNzaXNWZWwuZ2V0X3goKVxuICAgIHRoaXMuY2hhc3Npc0FjY1ggPSBjaGFzc2lzVmVsWCAtIHRoaXMucHJldkNoYXNzaXNWZWxYXG4gICAgdGhpcy5wcmV2Q2hhc3Npc1ZlbFggPSBjaGFzc2lzVmVsWFxuICAgIC8vIGlucHV0c1tpXSA9IHRoaXMucmV2ZXJzZSAqIGNoYXNzaXNWZWwuZ2V0X3goKVxuICAgIC8vIGkrK1xuICAgIC8vIGlucHV0c1tpXSA9IGNoYXNzaXNWZWwuZ2V0X3koKVxuICAgIC8vIGkrK1xuICAgIC8vIGNoYXNzaXNBbmdWZWxcbiAgICBpZiAodGFyZ2V0ID09IDApIHtcbiAgICAgIHRoaXMuZHJpZnRYU3FTdW0gKz0gdGhpcy5jaGFzc2lzQWNjWCAqIHRoaXMuY2hhc3Npc0FjY1hcbiAgICB9XG4gICAgY29uc3QgY2hhc3Npc0FuZ1ZlbCA9IHRoaXMuY2hhc3Npc0JvZHkuR2V0QW5ndWxhclZlbG9jaXR5KClcbiAgICBpbnB1dHNbaV0gPSB0aGlzLnJldmVyc2UgKiBjaGFzc2lzQW5nVmVsXG4gICAgaSsrXG4gICAgLy8gd2hlZWxWZWxYLCB3aGVlbFZlbFlcbiAgICBjb25zdCB3aGVlbFZlbCA9IHRoaXMud2hlZWxCb2R5LkdldExpbmVhclZlbG9jaXR5KCksXG4gICAgICB3aGVlbFZlbFggPSB3aGVlbFZlbC5nZXRfeCgpXG4gICAgdGhpcy53aGVlbEFjY1ggPSB3aGVlbFZlbFggLSB0aGlzLnByZXZXaGVlbFZlbFhcbiAgICB0aGlzLnByZXZXaGVlbFZlbFggPSB3aGVlbFZlbFhcbiAgICBpbnB1dHNbaV0gPSB0aGlzLnJldmVyc2UgKiB3aGVlbFZlbFhcbiAgICBpKytcbiAgICBpbnB1dHNbaV0gPSB3aGVlbFZlbC5nZXRfeSgpXG4gICAgaSsrXG4gICAgLy8gd2hlZWxBbmdWZWxcbiAgICBjb25zdCB3aGVlbEFuZ1ZlbCA9IHRoaXMud2hlZWxCb2R5LkdldEFuZ3VsYXJWZWxvY2l0eSgpXG4gICAgaW5wdXRzW2ldID0gdGhpcy5yZXZlcnNlICogd2hlZWxBbmdWZWxcbiAgICBpKytcbiAgICBjb25zdCBheGxlUnhuID0gdGhpcy5heGxlLkdldFJlYWN0aW9uRm9yY2UoNjApXG4gICAgaW5wdXRzW2ldID0gMWUtMiAqIHRoaXMucmV2ZXJzZSAqIGF4bGVSeG4uZ2V0X3goKVxuICAgIGkrK1xuICAgIGlucHV0c1tpXSA9IDFlLTIgKiBheGxlUnhuLmdldF95KClcbiAgICBpKytcbiAgICAvLyB0YXJnZXRcbiAgICBpbnB1dHNbaV0gPSB0aGlzLnJldmVyc2UgKiB0YXJnZXRcbiAgICBpKytcblxuICAgIGlmICh0aGlzLnRhcmdldFByZXYgIT09IG51bGwpIHtcbiAgICAgIGlmIChnbG9iYWxzLnRhcmdldFR5cGUgPT09IFwic2luXCIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXRTY29yZSh0aGlzLnRhcmdldFByZXYsIGNoYXNzaXNTaW4pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldFNjb3JlKHRoaXMudGFyZ2V0UHJldiwgd2hlZWxWZWxYKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRhcmdldFByZXYgPSB0YXJnZXRcblxuICAgIHJldHVybiBpbnB1dHNcbiAgfVxuXG4gIHVwZGF0ZSh0YXJnZXQpIHtcbiAgICBjb25zdCBpbnB1dHNBcnJheSA9IHRoaXMuZ2V0SW5wdXRzKHRhcmdldClcbiAgICBjb25zdCBpbnB1dHNNYXRyaXggPSBuZXcgTWF0cml4KGlucHV0c0FycmF5LCAxLCBpbnB1dHNBcnJheS5sZW5ndGgpXG4gICAgY29uc3Qgb3V0cHV0UmF3ID0gaW5wdXRzTWF0cml4XG4gICAgICAvLyBjb25zdCBzcGVlZHMgPSBpbnB1dHNcbiAgICAgIC5tdWwodGhpcy53ZWlnaHRzWzBdKVxuICAgICAgLmFkZCh0aGlzLmJpYXNlc1swXSlcbiAgICAgIC8vIC5yZWx1KClcbiAgICAgIC8vIC5sZWFreVJlbHUoKVxuICAgICAgLmxlYWt5RWx1KClcbiAgICAgIC5tdWwodGhpcy53ZWlnaHRzWzFdKVxuICAgICAgLmFkZCh0aGlzLmJpYXNlc1sxXSlcbiAgICAgIC8vIC5yZWx1KClcbiAgICAgIC8vIC5sZWFreVJlbHUoKVxuICAgICAgLmxlYWt5RWx1KClcbiAgICAgIC5tdWwodGhpcy53ZWlnaHRzWzJdKVxuICAgICAgLmFkZCh0aGlzLmJpYXNlc1syXSkuZGF0YVswXVxuXG4gICAgLy8gY29uc3QgcmV2ZXJzZSA9IHRhcmdldCAhPSAwID8gTWF0aC5zaWduKHRhcmdldCkgOiAxLFxuICAgIGNvbnN0IG91dHB1dCA9IHRoaXMucmV2ZXJzZSAqIG91dHB1dFJhd1xuICAgIHRoaXMuc2V0U3BlZWQob3V0cHV0KVxuXG4gICAgY29uc3Qgb3V0cHV0RGlmZiA9IG91dHB1dCAtIHRoaXMucHJldk91dHB1dFxuICAgIHRoaXMub3V0cHV0RGlmZlNxU3VtICs9IG91dHB1dERpZmYgKiBvdXRwdXREaWZmXG4gICAgdGhpcy5wcmV2T3V0cHV0ID0gb3V0cHV0XG4gIH1cblxuICBnZXQgZHJhd1Bvc2l0aW9uRGF0YSgpIHtcbiAgICAvLyByZXR1cm4ge1xuICAgIC8vICAgd2hlZWxQb3NDdXJyZW50OiB0aGlzLndoZWVsQm9keS5HZXRQb3NpdGlvbigpLFxuICAgIC8vICAgd2hlZWxBbmdsZUN1cnJlbnQ6IHRoaXMud2hlZWxCb2R5LkdldEFuZ2xlKCksXG4gICAgLy8gICBjaGFzc2lzUG9zQ3VycmVudDogdGhpcy5jaGFzc2lzQm9keS5HZXRQb3NpdGlvbigpLFxuICAgIC8vICAgY2hhc3Npc0FuZ2xlQ3VycmVudDogdGhpcy5jaGFzc2lzQm9keS5HZXRBbmdsZSgpLFxuICAgIC8vIH1cbiAgICBjb25zdCB3aGVlbFBvcyA9IHRoaXMud2hlZWxCb2R5LkdldFBvc2l0aW9uKCksXG4gICAgICBjaGFzc2lzUG9zID0gdGhpcy5jaGFzc2lzQm9keS5HZXRQb3NpdGlvbigpXG4gICAgcmV0dXJuIHtcbiAgICAgIHdoZWVsUG9zQ3VycmVudDogW3doZWVsUG9zLmdldF94KCksIHdoZWVsUG9zLmdldF95KCldLFxuICAgICAgd2hlZWxBbmdsZUN1cnJlbnQ6IHRoaXMud2hlZWxCb2R5LkdldEFuZ2xlKCksXG4gICAgICBjaGFzc2lzUG9zQ3VycmVudDogW2NoYXNzaXNQb3MuZ2V0X3goKSwgY2hhc3Npc1Bvcy5nZXRfeSgpXSxcbiAgICAgIGNoYXNzaXNBbmdsZUN1cnJlbnQ6IHRoaXMuY2hhc3Npc0JvZHkuR2V0QW5nbGUoKSxcbiAgICB9XG4gIH1cblxuICBnZXQgY29yckRhdGEoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIE1hdGguc2luKHRoaXMuY2hhc3Npc0JvZHkuR2V0QW5nbGUoKSksXG4gICAgICB0aGlzLndoZWVsQWNjWCxcbiAgICAgIHRoaXMuY2hhc3Npc0FjY1gsXG4gICAgXVxuICB9XG5cbiAgLy8gc2xlZXAoKSB7XG4gIC8vICAgZm9yIChsZXQgYm9keSBvZiBbXG4gIC8vICAgICB0aGlzLmNoYXNzaXNCb2R5LFxuICAvLyAgICAgdGhpcy51cHBlckZvcmVsZWdCb2R5LFxuICAvLyAgICAgdGhpcy5sb3dlckZvcmVsZWdCb2R5LFxuICAvLyAgICAgdGhpcy51cHBlckhpbmRsZWdCb2R5LFxuICAvLyAgICAgdGhpcy5sb3dlckhpbmRsZWdCb2R5LFxuICAvLyAgIF0pIHtcbiAgLy8gICAgIGJvZHkuU2V0QXdha2UoMClcbiAgLy8gICAgIC8vIGJvZHkuU2V0RW5hYmxlZCgwKVxuICAvLyAgIH1cbiAgLy8gfVxufVxuXG5jbGFzcyBNYXRyaXgge1xuICBjb25zdHJ1Y3RvcihkYXRhLCBtLCBuKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YVxuICAgIHRoaXMubSA9IG1cbiAgICB0aGlzLm4gPSBuXG4gIH1cblxuICBtdWwob3RoZXIpIHtcbiAgICBjb25zdCBhID0gdGhpcy5kYXRhLFxuICAgICAgYiA9IG90aGVyLmRhdGEsXG4gICAgICBtID0gdGhpcy5tLFxuICAgICAgbiA9IHRoaXMubixcbiAgICAgIHAgPSBvdGhlci5uLFxuICAgICAgYyA9IG5ldyBGbG9hdDMyQXJyYXkobmV3IEFycmF5QnVmZmVyKDQgKiBtICogcCkpXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwOyBqKyspIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgIGxldCBzdW0gPSAwXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICAgICAgc3VtICs9IGFbaSAqIG4gKyBrXSAqIGJbayAqIHAgKyBqXVxuICAgICAgICB9XG4gICAgICAgIGNbaSAqIHAgKyBqXSA9IHN1bVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdHJpeChjLCBtLCBwKVxuICB9XG5cbiAgYWRkKG90aGVyKSB7XG4gICAgY29uc3QgYSA9IHRoaXMuZGF0YSxcbiAgICAgIGIgPSBvdGhlci5kYXRhLFxuICAgICAgbCA9IGEubGVuZ3RoLFxuICAgICAgYyA9IG5ldyBGbG9hdDMyQXJyYXkobmV3IEFycmF5QnVmZmVyKDQgKiBsKSlcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgY1tpXSA9IGFbaV0gKyBiW2ldXG4gICAgfVxuICAgIHJldHVybiBuZXcgTWF0cml4KGMsIHRoaXMubSwgdGhpcy5uKVxuICB9XG5cbiAgcmVsdSgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5kYXRhLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IE1hdGgubWF4KDAsIHJlc3VsdFtpXSlcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgocmVzdWx0LCB0aGlzLm0sIHRoaXMubilcbiAgfVxuXG4gIGxlYWt5UmVsdSgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5kYXRhLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IE1hdGgubWF4KDAuMSAqIHJlc3VsdFtpXSwgcmVzdWx0W2ldKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdHJpeChyZXN1bHQsIHRoaXMubSwgdGhpcy5uKVxuICB9XG5cbiAgZWx1KCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLmRhdGEubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gdGhpcy5kYXRhLnNsaWNlKClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgaWYgKHJlc3VsdFtpXSA8IDApIHtcbiAgICAgICAgcmVzdWx0W2ldID0gTWF0aC5leHBtMShyZXN1bHRbaV0pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTWF0cml4KHJlc3VsdCwgdGhpcy5tLCB0aGlzLm4pXG4gIH1cblxuICBsZWFreUVsdSgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5kYXRhLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgIGlmIChyZXN1bHRbaV0gPCAwKSB7XG4gICAgICAgIHJlc3VsdFtpXSA9IE1hdGguZXhwbTEocmVzdWx0W2ldKSArIDAuMSAqIHJlc3VsdFtpXVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdHJpeChyZXN1bHQsIHRoaXMubSwgdGhpcy5uKVxuICB9XG59XG5cbmZ1bmN0aW9uIHZlY3Rvck5vcm1zKHZlY3RvcnMpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheSh2ZWN0b3JzLmxlbmd0aCkuZmlsbCgwKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB2ZWN0b3IgPSB2ZWN0b3JzW2ldLmRhdGFcbiAgICBmb3IgKGxldCB4IG9mIHZlY3Rvcikge1xuICAgICAgcmVzdWx0W2ldICs9IHggKiB4XG4gICAgfVxuICAgIC8vIHJlc3VsdFtpXSA9IE1hdGguc3FydChyZXN1bHRbaV0pXG4gICAgcmVzdWx0W2ldIC89IHZlY3Rvci5sZW5ndGhcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHJvd05vcm1UaGluZ3kobWF0KSB7XG4gIC8vIG06IHJvdyBjb3VudCwgbjogY29sdW1uIGNvdW50XG4gIGNvbnN0IHJvd0NvdW50ID0gbWF0Lm0sXG4gICAgY29sQ291bnQgPSBtYXQublxuICBsZXQgc3VtQWxsID0gMFxuICBjb25zdCByb3dTdW1zID0gbmV3IEZsb2F0MzJBcnJheShyb3dDb3VudCkuZmlsbCgwKSxcbiAgICBjb2xTdW1zID0gbmV3IEZsb2F0MzJBcnJheShjb2xDb3VudCkuZmlsbCgwKVxuICAvLyByb3cgaWR4XG4gIGZvciAobGV0IHJvd0lkeCA9IDA7IHJvd0lkeCA8IHJvd0NvdW50OyByb3dJZHgrKykge1xuICAgIC8vIGNvbCBpZHhcbiAgICBmb3IgKGxldCBjb2xJZHggPSAwOyBjb2xJZHggPCBjb2xDb3VudDsgY29sSWR4KyspIHtcbiAgICAgIGNvbnN0IHZhbCA9IG1hdC5kYXRhW3Jvd0lkeCAqIGNvbENvdW50ICsgY29sSWR4XSxcbiAgICAgICAgdmFsU3EgPSB2YWwgKiB2YWxcbiAgICAgIC8vIHJvd1N1bXNbcm93SWR4XSArPSBNYXRoLmFicyh2YWwpXG4gICAgICByb3dTdW1zW3Jvd0lkeF0gKz0gdmFsU3FcbiAgICAgIC8vIGNvbFN1bXNbY29sSWR4XSArPSBNYXRoLmFicyh2YWwpXG4gICAgICBjb2xTdW1zW2NvbElkeF0gKz0gdmFsU3FcbiAgICAgIHN1bUFsbCArPSB2YWxTcVxuICAgIH1cbiAgfVxuICBzdW1BbGwgLz0gcm93Q291bnQgKiBjb2xDb3VudFxuICBsZXQgc3VtUm93cyA9IDBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dDb3VudDsgaSsrKSB7XG4gICAgY29uc3QgdmFsID0gcm93U3Vtc1tpXSAvIGNvbENvdW50XG4gICAgc3VtUm93cyArPSB2YWwgKiB2YWxcbiAgfVxuICBzdW1Sb3dzIC89IHJvd0NvdW50XG4gIGxldCBzdW1Db2xzID0gMFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbENvdW50OyBpKyspIHtcbiAgICBjb25zdCB2YWwgPSBjb2xTdW1zW2ldIC8gcm93Q291bnRcbiAgICBzdW1Db2xzICs9IHZhbCAqIHZhbFxuICB9XG4gIHN1bUNvbHMgLz0gY29sQ291bnRcblxuICAvLyByZXR1cm4gc3VtQWxsICsgMC4xICogc3VtUm93cyArIDEuMCAqIHN1bUNvbHNcbiAgcmV0dXJuIHN1bUFsbFxufVxuXG5leHBvcnQgY2xhc3MgUG9wdWxhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHdoZWVsUG9zSW5pdCwgblRpcHB5cywgdGVycmFpblB0cywgYjIpIHtcbiAgICB0aGlzLndoZWVsUG9zSW5pdCA9IHdoZWVsUG9zSW5pdC5zbGljZSgpXG5cbiAgICB7XG4gICAgICBjb25zdCBncmF2aXR5ID0gbmV3IGIyLmIyVmVjMigwLCA5LjgxKVxuICAgICAgdGhpcy53b3JsZCA9IG5ldyBiMi5iMldvcmxkKGdyYXZpdHkpXG4gICAgfVxuXG4gICAgdGhpcy5iMiA9IGIyXG4gICAgdGhpcy50ZXJyYWluUHRzID0gdGVycmFpblB0c1xuXG4gICAgLy8gYWRkIGdyb3VuZFxuICAgIHtcbiAgICAgIGNvbnN0IGdyb3VuZEJvZHkgPSB0aGlzLndvcmxkLkNyZWF0ZUJvZHkobmV3IGIyLmIyQm9keURlZigpKVxuXG4gICAgICBjb25zdCB0ZXJyYWluUHRzRmlsdGVyZWQgPSBbXVxuICAgICAgbGV0IHlEaWZmUHJldlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnbG9iYWxzLm5UZXJyYWluUHRzOyBpKyspIHtcbiAgICAgICAgY29uc3QgeURpZmZDdXJyID0gdGVycmFpblB0c1tpICsgMV0gLSB0ZXJyYWluUHRzW2ldLFxuICAgICAgICAgIHNhbWVTbG9wZSA9IHlEaWZmQ3VyciA9PSB5RGlmZlByZXZcbiAgICAgICAgeURpZmZQcmV2ID0geURpZmZDdXJyXG4gICAgICAgIGlmIChzYW1lU2xvcGUgJiYgaSAhPSBnbG9iYWxzLm5UZXJyYWluUHRzIC0gMSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgdGVycmFpblB0c0ZpbHRlcmVkLnB1c2goW3RlcnJhaW5JZHhUb1hQb3MoaSksIHRlcnJhaW5QdHNbaV1dKVxuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2codGVycmFpblB0c0ZpbHRlcmVkLmxlbmd0aCwgZ2xvYmFscy5uVGVycmFpblB0cylcbiAgICAgIC8vIHJldmVyc2VkIGxvb3AgZm9yIENDVyB3aW5kaW5nIG9yZGVyIChCb3gyRClcbiAgICAgIGZvciAobGV0IGkgPSB0ZXJyYWluUHRzRmlsdGVyZWQubGVuZ3RoIC0gMTsgaSA+PSAxOyBpLS0pIHtcbiAgICAgICAgY29uc3QgZWRnZVNoYXBlID0gbmV3IGIyLmIyRWRnZVNoYXBlKClcbiAgICAgICAgZWRnZVNoYXBlLlNldFR3b1NpZGVkKFxuICAgICAgICAgIG5ldyBiMi5iMlZlYzIodGVycmFpblB0c0ZpbHRlcmVkW2ldWzBdLCB0ZXJyYWluUHRzRmlsdGVyZWRbaV1bMV0pLFxuICAgICAgICAgIG5ldyBiMi5iMlZlYzIoXG4gICAgICAgICAgICB0ZXJyYWluUHRzRmlsdGVyZWRbaSAtIDFdWzBdLFxuICAgICAgICAgICAgdGVycmFpblB0c0ZpbHRlcmVkW2kgLSAxXVsxXVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBncm91bmRGRCA9IG5ldyBiMi5iMkZpeHR1cmVEZWYoKVxuICAgICAgICBncm91bmRGRC5zZXRfc2hhcGUoZWRnZVNoYXBlKVxuICAgICAgICBncm91bmRGRC5zZXRfZnJpY3Rpb24oMC45KVxuICAgICAgICBncm91bmRGRC5zZXRfcmVzdGl0dXRpb24oMC4xKVxuICAgICAgICBjb25zdCBncm91bmRGaXh0dXJlID0gYjIuY2FzdE9iamVjdChcbiAgICAgICAgICBncm91bmRCb2R5LkNyZWF0ZUZpeHR1cmUoZ3JvdW5kRkQpLFxuICAgICAgICAgIGIyLmIyRml4dHVyZVxuICAgICAgICApXG4gICAgICB9XG4gICAgICAvLyBhZGQgd2FsbHNcbiAgICAgIGZvciAoY29uc3QgaWR4IG9mIFswLCBnbG9iYWxzLm5UZXJyYWluUHRzIC0gMV0pIHtcbiAgICAgICAgY29uc3QgW3gsIHldID0gW3RlcnJhaW5JZHhUb1hQb3MoaWR4KSwgdGVycmFpblB0c1tpZHhdXVxuICAgICAgICBjb25zdCBlZGdlU2hhcGUgPSBuZXcgYjIuYjJFZGdlU2hhcGUoKVxuICAgICAgICBlZGdlU2hhcGUuU2V0VHdvU2lkZWQoXG4gICAgICAgICAgbmV3IGIyLmIyVmVjMih4LCB5KSxcbiAgICAgICAgICBuZXcgYjIuYjJWZWMyKHgsIHkgLSBnbG9iYWxzLndhbGxIKVxuICAgICAgICApXG4gICAgICAgIGNvbnN0IGdyb3VuZEZEID0gbmV3IGIyLmIyRml4dHVyZURlZigpXG4gICAgICAgIGdyb3VuZEZELnNldF9zaGFwZShlZGdlU2hhcGUpXG4gICAgICAgIGdyb3VuZEZELnNldF9mcmljdGlvbigwLjkpXG4gICAgICAgIGdyb3VuZEZELnNldF9yZXN0aXR1dGlvbigwLjEpXG4gICAgICAgIGNvbnN0IGdyb3VuZEZpeHR1cmUgPSBiMi5jYXN0T2JqZWN0KFxuICAgICAgICAgIGdyb3VuZEJvZHkuQ3JlYXRlRml4dHVyZShncm91bmRGRCksXG4gICAgICAgICAgYjIuYjJGaXh0dXJlXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50aXBweXMgPSBbXVxuICAgIHRoaXMuYWRkVGlwcHlzKG5UaXBweXMpXG4gICAgdGhpcy5uX2RpbSA9IHRoaXMudGlwcHlzWzBdLm5fZGltXG4gIH1cblxuICByZXNldCgpIHtcbiAgICBmb3IgKGxldCB0aXBweSBvZiB0aGlzLnRpcHB5cykge1xuICAgICAgdGlwcHkucmVzZXQodGhpcy5iMilcbiAgICB9XG4gIH1cblxuICBhZGRUaXBweXMoblRpcHB5cykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgblRpcHB5czsgaSsrKSB7XG4gICAgICB0aGlzLnRpcHB5cy5wdXNoKG5ldyBUaXBweSh0aGlzLndoZWVsUG9zSW5pdCwgdGhpcy53b3JsZCwgdGhpcy5iMiwgdGhpcykpXG4gICAgfVxuICB9XG5cbiAgc2V0V3RzKGZsYXRXdHMpIHtcbiAgICBsZXQgZmxhdFd0c0lkeCA9IDBcbiAgICBmb3IgKGxldCB0aXBweSBvZiB0aGlzLnRpcHB5cykge1xuICAgICAgdGlwcHkuc2V0V3RzKGZsYXRXdHMuc2xpY2UoZmxhdFd0c0lkeCwgZmxhdFd0c0lkeCArIHRoaXMubl9kaW0pKVxuICAgICAgZmxhdFd0c0lkeCArPSB0aGlzLm5fZGltXG4gICAgfVxuICB9XG5cbiAgdHJhaW4oeyB0YXJnZXRzLCBzb2x1dGlvbnMgfSkge1xuICAgIC8vIGFzc2lnbiBzb2x1dGlvbiBhbmQgdGFyZ2V0IHRvIGVhY2ggdGlwcHlcbiAgICBjb25zdCBuU29sdXRpb25zID0gc29sdXRpb25zLmxlbmd0aCAvIHRoaXMubl9kaW1cbiAgICBpZiAodGhpcy50aXBweXMubGVuZ3RoIDwgblNvbHV0aW9ucyAqIHRhcmdldHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFkZFRpcHB5cyhuU29sdXRpb25zICogdGFyZ2V0cy5sZW5ndGggLSB0aGlzLnRpcHB5cy5sZW5ndGgpXG4gICAgfVxuICAgIGxldCBmbGF0V3RzSWR4ID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgblNvbHV0aW9uczsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRhcmdldHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgdGlwcHkgPSB0aGlzLnRpcHB5c1tpICogdGFyZ2V0cy5sZW5ndGggKyBqXVxuICAgICAgICB0aXBweS5zZXRXdHMoc29sdXRpb25zLnNsaWNlKGZsYXRXdHNJZHgsIGZsYXRXdHNJZHggKyB0aGlzLm5fZGltKSlcbiAgICAgICAgdGlwcHkudGFyZ2V0SWR4ID0galxuICAgICAgfVxuICAgICAgZmxhdFd0c0lkeCArPSB0aGlzLm5fZGltXG4gICAgfVxuICAgIC8vIHNpbXVsYXRlIHVzaW5nIG9uZSB0YXJnZXQgcGVyIHNvbHV0aW9uXG4gICAgdGhpcy5yZXNldCgpXG4gICAgZm9yIChsZXQgc3RlcCA9IDA7IHN0ZXAgPCB0YXJnZXRzWzBdLmxlbmd0aDsgc3RlcCsrKSB7XG4gICAgICBmb3IgKGxldCB0aXBweSBvZiB0aGlzLnRpcHB5cykge1xuICAgICAgICB0aXBweS51cGRhdGUodGFyZ2V0c1t0aXBweS50YXJnZXRJZHhdW3N0ZXBdKVxuICAgICAgfVxuICAgICAgdGhpcy53b3JsZC5TdGVwKGdsb2JhbHMudHMsIDgsIDMpXG4gICAgfVxuICAgIC8vIHNjb3JlIHNvbHV0aW9ucyBhZnRlciBzaW11bGF0aW9uXG4gICAgY29uc3Qgc29sdXRpb25zU2NvcmVzID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5Tb2x1dGlvbnM7IGkrKykge1xuICAgICAgY29uc3QgdGlwcHkwID0gdGhpcy50aXBweXNbaSAqIHRhcmdldHMubGVuZ3RoXSxcbiAgICAgICAgc29sdXRpb24gPSB0aXBweTAuZmxhdFd0c1xuICAgICAgbGV0IHd0c05vcm0gPSAwXG4gICAgICBmb3IgKGxldCB3dExheWVyIG9mIHRpcHB5MC53ZWlnaHRzKSB7XG4gICAgICAgIGZvciAobGV0IHd0IG9mIHd0TGF5ZXIuZGF0YSkge1xuICAgICAgICAgIHd0c05vcm0gKz0gd3QgKiB3dFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3dHNOb3JtIC89IHRpcHB5MC53ZWlnaHRDb3VudFxuICAgICAgbGV0IGJpYXNOb3JtID0gMFxuICAgICAgZm9yIChsZXQgYmlhc0xheWVyIG9mIHRpcHB5MC5iaWFzZXMpIHtcbiAgICAgICAgZm9yIChsZXQgYmlhcyBvZiBiaWFzTGF5ZXIuZGF0YSkge1xuICAgICAgICAgIGJpYXNOb3JtICs9IGJpYXMgKiBiaWFzXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJpYXNOb3JtIC89IHRpcHB5MC5iaWFzQ291bnRcbiAgICAgIGNvbnN0IHRhc2tTY29yZXMgPSBbXVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0YXJnZXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IHRhc2tUaXBweSA9IHRoaXMudGlwcHlzW2kgKiB0YXJnZXRzLmxlbmd0aCArIGpdLFxuICAgICAgICAgIG1zZSA9IHRhc2tUaXBweS50YXJnZXRTcUVyclN1bSAvIGdsb2JhbHMuZXBMZW4sXG4gICAgICAgICAgY3Jhc2hlZFJhdGlvID0gdGFza1RpcHB5LmNyYXNoU3RlcENvdW50IC8gZ2xvYmFscy5lcExlbixcbiAgICAgICAgICBkcmlmdFggPSB0YXNrVGlwcHkuZHJpZnRYU3FTdW0gLyBnbG9iYWxzLmVwTGVuXG4gICAgICAgIHRhc2tTY29yZXMucHVzaCh7IG1zZSwgY3Jhc2hlZFJhdGlvLCBkcmlmdFggfSlcbiAgICAgIH1cbiAgICAgIC8vIHNvbHV0aW9uc1Njb3Jlcy5wdXNoKHsgc29sdXRpb24sIHNjb3JlIH0pXG4gICAgICBzb2x1dGlvbnNTY29yZXMucHVzaCh7IHNvbHV0aW9uLCB3dHNOb3JtLCBiaWFzTm9ybSwgdGFza1Njb3JlcyB9KVxuICAgIH1cbiAgICByZXR1cm4gc29sdXRpb25zU2NvcmVzXG4gIH1cblxuICB1cGRhdGUodGFyZ2V0cykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50aXBweXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRpcHB5ID0gdGhpcy50aXBweXNbaV1cbiAgICAgIHRpcHB5LnVwZGF0ZSh0YXJnZXRzW2ldKVxuICAgIH1cbiAgICB0aGlzLndvcmxkLlN0ZXAoZ2xvYmFscy50cywgOCwgMylcbiAgfVxuXG4gIGRyYXcoc2NhbGUsIGNlbnRlcikge1xuICAgIGZvciAobGV0IHRpcHB5IG9mIHRoaXMudGlwcHlzKSB7XG4gICAgICB0aXBweS5kcmF3KHNjYWxlLCBjZW50ZXIpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVEaXJlY3Rpb24obGQsIHJkLCBfdGFyZ2V0U2luLCBfdGFyZ2V0VmVsKSB7XG4gIC8vIG5vIGNoYW5nZSBpZiBib3RoIGtleXMgZG93blxuICBsZXQgdGFyZ2V0U2luID0gX3RhcmdldFNpbixcbiAgICB0YXJnZXRWZWwgPSBfdGFyZ2V0VmVsXG4gIGlmIChsZCAmJiByZCkge1xuICAgIHJldHVybiBbdGFyZ2V0U2luLCB0YXJnZXRWZWxdXG4gIH1cbiAgLy8gZGVjYXkgc2luIHRvd2FyZCB6ZXJvXG4gIGlmICh0YXJnZXRTaW4gIT0gMCkge1xuICAgIGlmIChNYXRoLmFicyh0YXJnZXRTaW4pIDwgZ2xvYmFscy5zaW5EZWNheSkge1xuICAgICAgdGFyZ2V0U2luID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRTaW4gLT0gTWF0aC5zaWduKHRhcmdldFNpbikgKiBnbG9iYWxzLnNpbkRlY2F5XG4gICAgfVxuICB9XG4gIC8vIGNoYW5nZSBpZiBvbmx5IG9uZSBrZXlcbiAgLy8gYW5kIGxpbWl0IG91dHB1dFxuICBpZiAobGQpIHtcbiAgICB0YXJnZXRTaW4gLT0gZ2xvYmFscy5zaW5TdGVwXG4gICAgaWYgKHRhcmdldFNpbiA8IC1nbG9iYWxzLnNpbkxpbSkge1xuICAgICAgdGFyZ2V0U2luID0gLWdsb2JhbHMuc2luTGltXG4gICAgfVxuICB9IGVsc2UgaWYgKHJkKSB7XG4gICAgdGFyZ2V0U2luICs9IGdsb2JhbHMuc2luU3RlcFxuICAgIGlmICh0YXJnZXRTaW4gPiBnbG9iYWxzLnNpbkxpbSkge1xuICAgICAgdGFyZ2V0U2luID0gZ2xvYmFscy5zaW5MaW1cbiAgICB9XG4gIH1cbiAgLy8gZGVjYXkgdmVsIHRvd2FyZCB6ZXJvXG4gIGlmICh0YXJnZXRWZWwgIT0gMCkge1xuICAgIGlmIChNYXRoLmFicyh0YXJnZXRWZWwpIDwgZ2xvYmFscy52ZWxEZWNheSkge1xuICAgICAgdGFyZ2V0VmVsID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRWZWwgLT0gTWF0aC5zaWduKHRhcmdldFZlbCkgKiBnbG9iYWxzLnZlbERlY2F5XG4gICAgfVxuICB9XG5cbiAgdGFyZ2V0VmVsICs9IDAuMTAyICogdGFyZ2V0U2luXG4gIGlmICh0YXJnZXRWZWwgPiBnbG9iYWxzLnZlbExpbSkge1xuICAgIHRhcmdldFZlbCA9IGdsb2JhbHMudmVsTGltXG4gIH0gZWxzZSBpZiAodGFyZ2V0VmVsIDwgLWdsb2JhbHMudmVsTGltKSB7XG4gICAgdGFyZ2V0VmVsID0gLWdsb2JhbHMudmVsTGltXG4gIH1cbiAgLy8gLy8gdXBkYXRlIHRlc3QgdHJpZ29ub21ldHJ5XG4gIC8vIGlmICh0YXJnZXRTaW4gIT0gdGFyZ2V0RGlyZWN0aW9uQmVmb3JlKSB7XG4gIC8vICAgdGFyZ2V0QW5nbGUgPSBNYXRoLmFzaW4odGFyZ2V0U2luKVxuICAvLyAgIHRhcmdldENvcyA9IE1hdGguY29zKHRhcmdldEFuZ2xlKVxuICAvLyB9XG4gIHJldHVybiBbdGFyZ2V0U2luLCB0YXJnZXRWZWxdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVRlcnJhaW5QdHMoKSB7XG4gIGZ1bmN0aW9uIHRlcnJhaW5MUk9iamVjdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2xvcGVEaWZmOiAwLFxuICAgICAgc2xvcGU6IDAsXG4gICAgICB5OiAwLFxuICAgICAgeDogZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbCxcbiAgICAgIHhJZHg6IDEsXG4gICAgICAvLyByYW5kVmFsczogcmFuZF9ub3JtYWwoZ2xvYmFscy5ncm91bmRIYWxmV2lkdGggLyBnbG9iYWxzLmdyb3VuZERldGFpbEludGVydmFsIC0gMSksXG4gICAgICAvLyBpZHg6IDAsXG4gICAgICB5czogW10sXG4gICAgICB1cGRhdGVTbG9wZSgpIHtcbiAgICAgICAgaWYgKHRoaXMueCA8PSBnbG9iYWxzLmdyb3VuZEZsYXRDZW50ZXJIYWxmV2lkdGgpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnNsb3BlRGlmZiArPSBnbG9iYWxzLnNsb3BlRGlmZk1hZyAqIHRoaXMucmFuZFZhbHNbdGhpcy5pZHhdXG4gICAgICAgIHRoaXMuc2xvcGVEaWZmICs9IGdsb2JhbHMuc2xvcGVEaWZmTWFnICogcmFuZF9ub3JtYWwoMSlbMF1cbiAgICAgICAgLy8gdGhpcy5pZHgrK1xuICAgICAgICB0aGlzLnNsb3BlRGlmZiAqPSBnbG9iYWxzLnNsb3BlRGlmZkRlY2F5XG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnNsb3BlRGlmZikgPiBnbG9iYWxzLnNsb3BlRGlmZkxpbSkge1xuICAgICAgICAgIHRoaXMuc2xvcGVEaWZmID0gTWF0aC5taW4oXG4gICAgICAgICAgICBNYXRoLm1heCh0aGlzLnNsb3BlRGlmZiwgLWdsb2JhbHMuc2xvcGVEaWZmTGltKSxcbiAgICAgICAgICAgIGdsb2JhbHMuc2xvcGVEaWZmTGltXG4gICAgICAgICAgKVxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2xvcGUgZGlmZiBidW1wXCIpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldlNsb3BlID0gdGhpcy5zbG9wZVxuICAgICAgICB0aGlzLnNsb3BlICs9IHRoaXMuc2xvcGVEaWZmXG4gICAgICAgIHRoaXMuc2xvcGUgKj0gZ2xvYmFscy5zbG9wZURlY2F5XG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnNsb3BlKSA+IGdsb2JhbHMuc2xvcGVMaW0pIHtcbiAgICAgICAgICB0aGlzLnNsb3BlID0gTWF0aC5taW4oXG4gICAgICAgICAgICBNYXRoLm1heCh0aGlzLnNsb3BlLCAtZ2xvYmFscy5zbG9wZUxpbSksXG4gICAgICAgICAgICBnbG9iYWxzLnNsb3BlTGltXG4gICAgICAgICAgKVxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2xvcGUgYnVtcFwiKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2xvcGVEaWZmID0gdGhpcy5zbG9wZSAtIHByZXZTbG9wZVxuICAgICAgfSxcbiAgICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTbG9wZSgpXG4gICAgICAgIHRoaXMueSArPSB0aGlzLnNsb3BlICogZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbFxuICAgICAgICB0aGlzLnlzLnB1c2godGhpcy55KVxuICAgICAgICAvLyBwcmV2ZW50IGZsb2F0aW5nIHBvaW50IGRyaWZ0XG4gICAgICAgIHRoaXMueElkeCsrXG4gICAgICAgIHRoaXMueCA9IGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwgKiB0aGlzLnhJZHhcbiAgICAgIH0sXG4gICAgfVxuICB9XG4gIGNvbnN0IGxlZnRPYmogPSB0ZXJyYWluTFJPYmplY3QoKSxcbiAgICByaWdodE9iaiA9IHRlcnJhaW5MUk9iamVjdCgpXG5cbiAgZm9yIChcbiAgICBsZXQgXyA9IDA7XG4gICAgXyA8IGdsb2JhbHMuZ3JvdW5kSGFsZldpZHRoIC8gZ2xvYmFscy5ncm91bmREZXRhaWxJbnRlcnZhbDtcbiAgICBfKytcbiAgKSB7XG4gICAgbGVmdE9iai51cGRhdGUoKVxuICAgIHJpZ2h0T2JqLnVwZGF0ZSgpXG4gIH1cbiAgbGVmdE9iai55cy5yZXZlcnNlKClcblxuICByZXR1cm4gbGVmdE9iai55cy5jb25jYXQoWzBdKS5jb25jYXQocmlnaHRPYmoueXMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB4UG9zVG9UZXJyYWluSWR4KHgpIHtcbiAgeCA9IE1hdGgubWluKE1hdGgubWF4KHgsIC1nbG9iYWxzLmdyb3VuZEhhbGZXaWR0aCksIGdsb2JhbHMuZ3JvdW5kSGFsZldpZHRoKVxuICByZXR1cm4gKFxuICAgIE1hdGgucm91bmQoeCAvIGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwpICsgKGdsb2JhbHMublRlcnJhaW5QdHMgLSAxKSAvIDJcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVycmFpbklkeFRvWFBvcyhpZHgpIHtcbiAgcmV0dXJuIChpZHggLSAoZ2xvYmFscy5uVGVycmFpblB0cyAtIDEpIC8gMikgKiBnbG9iYWxzLmdyb3VuZERldGFpbEludGVydmFsXG59XG5cbmZ1bmN0aW9uIGludGVycFRlcnJhaW5ZKHgsIHRlcnJhaW5QdHMpIHtcbiAgeCA9IE1hdGgubWluKE1hdGgubWF4KHgsIC1nbG9iYWxzLmdyb3VuZEhhbGZXaWR0aCksIGdsb2JhbHMuZ3JvdW5kSGFsZldpZHRoKVxuICBjb25zdCB4U2NhbGVkID0geCAvIGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwsXG4gICAgaWR4T2Zmc2V0ID0gKGdsb2JhbHMublRlcnJhaW5QdHMgLSAxKSAvIDIsXG4gICAgY2xpcHBlZCA9IFtNYXRoLmZsb29yKHhTY2FsZWQpLCBNYXRoLmNlaWwoeFNjYWxlZCldLFxuICAgIHhzID0gY2xpcHBlZC5tYXAoKHYpID0+IGdsb2JhbHMuZ3JvdW5kRGV0YWlsSW50ZXJ2YWwgKiB2KSxcbiAgICB5cyA9IGNsaXBwZWQubWFwKCh2KSA9PiB0ZXJyYWluUHRzW3YgKyBpZHhPZmZzZXRdKVxuXG4gIGlmICh4c1sxXSA9PSB4c1swXSkge1xuICAgIHJldHVybiB5c1swXVxuICB9XG4gIGNvbnN0IHNsb3BlID0gKHlzWzFdIC0geXNbMF0pIC8gKHhzWzFdIC0geHNbMF0pLFxuICAgIHhEaWZmID0geCAtIHhzWzBdLFxuICAgIHlEaWZmID0gc2xvcGUgKiB4RGlmZlxuICByZXR1cm4geXNbMF0gKyB5RGlmZlxufVxuIiwiLy8gaW1wb3J0U2NyaXB0cyhcIi4uL0JveDJELWpzL0JveDJEX3YyLjMuMV9taW4uanNcIiwgXCIuLi9nbG9iYWxzLmpzXCIsIFwiLi4vdGlwcHkuanNcIilcblxuaW1wb3J0IEJveDJERmFjdG9yeSBmcm9tIFwiYm94MmQtd2FzbS9kaXN0L2VzL0JveDJEXCJcbmltcG9ydCB7IGdsb2JhbHMgfSBmcm9tIFwiLi8uLi9nbG9iYWxzLmpzXCJcbmltcG9ydCB7IFBvcHVsYXRpb24gfSBmcm9tIFwiLi8uLi90aXBweS5qc1wiXG5cbmxldCBwb3B1bGF0aW9uID0gbnVsbFxuXG5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICBjb25zdCBbaW5mbywgbXNnXSA9IGUuZGF0YVxuICBpZiAoaW5mbyA9PSBcInRlcnJhaW5QdHNcIikge1xuICAgIEJveDJERmFjdG9yeSgpLnRoZW4oKGIyKSA9PiB7XG4gICAgICBwb3B1bGF0aW9uID0gbmV3IFBvcHVsYXRpb24oWzAsIDBdLCAxLCBtc2csIGIyKVxuICAgIH0pXG4gIH0gZWxzZSBpZiAoaW5mbyA9PSBcInRhcmdldHNTb2x1dGlvbnNcIikge1xuICAgIGNvbnN0IHNvbHV0aW9uc1Njb3JlcyA9IHBvcHVsYXRpb24udHJhaW4obXNnKVxuICAgIHBvc3RNZXNzYWdlKFtcInNvbHV0aW9uc1Njb3Jlc1wiLCBzb2x1dGlvbnNTY29yZXNdKVxuICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIHRoZSBzdGFydHVwIGZ1bmN0aW9uXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnggPSAoKSA9PiB7XG5cdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuXHQvLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcblx0dmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMzM3XSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oMzA0MSkpKVxuXHRfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbn07XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3MgYW5kIHNpYmxpbmcgY2h1bmtzIGZvciB0aGUgZW50cnlwb2ludFxuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgXCIzY2Q0MWQ2YTVhOGY5YzUwYTk0NlwiICsgXCIuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IHNlbGYubG9jYXRpb24gKyBcIlwiO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGNodW5rc1xuLy8gXCIxXCIgbWVhbnMgXCJhbHJlYWR5IGxvYWRlZFwiXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ3OTU6IDFcbn07XG5cbi8vIGltcG9ydFNjcmlwdHMgY2h1bmsgbG9hZGluZ1xudmFyIGluc3RhbGxDaHVuayA9IChkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0d2hpbGUoY2h1bmtJZHMubGVuZ3RoKVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkcy5wb3AoKV0gPSAxO1xuXHRwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaSA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHQvLyBcIjFcIiBpcyB0aGUgc2lnbmFsIGZvciBcImFscmVhZHkgbG9hZGVkXCJcblx0aWYoIWluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRpbXBvcnRTY3JpcHRzKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKSk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua3RpcHB5X3Byb2plY3Rfd2Vic2l0ZVwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt0aXBweV9wcm9qZWN0X3dlYnNpdGVcIl0gfHwgW107XG52YXIgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24gPSBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IGluc3RhbGxDaHVuaztcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdCIsIi8vIHJ1biBzdGFydHVwXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18ueCgpO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibmV4dCIsImdsb2JhbHMiLCJ3IiwiaCIsImxJbnB1dENvZGVzIiwicklucHV0Q29kZXMiLCJ4T2ZmcyIsInRzIiwic2luTGltIiwic2luU3RlcCIsInNpbkRlY2F5IiwidmVsTGltIiwidmVsRGVjYXkiLCJncm91bmRIYWxmV2lkdGgiLCJncm91bmRGbGF0Q2VudGVySGFsZldpZHRoIiwiZ3JvdW5kRGV0YWlsSW50ZXJ2YWwiLCJuVGVycmFpblB0cyIsInRoaXMiLCJ3YWxsSCIsIndhbGxXIiwic2xvcGVEZWNheSIsInNsb3BlTGltIiwic2xvcGVEaWZmTWFnIiwic2xvcGVEaWZmRGVjYXkiLCJzbG9wZURpZmZMaW0iLCJiYXJNYXgiLCJsaW0iLCJ0YXJnZXRUeXBlIiwiYmFySGVpZ2h0Iiwic2NvcmVEZW5vbUVwcyIsImNyYXNoU2luTGltaXQiLCJtYXhUb3JxdWUiLCJuV29ya2VycyIsIm11bHRpcGxpZXIiLCJlcExlbiIsInR3aXRjaGluZXNzZXMiLCJjbWFTaWdtYSIsIlRpcHB5Iiwid2hlZWxQb3NJbml0Iiwid29ybGQiLCJiMiIsInBvcHVsYXRpb24iLCJjb25zb2xlIiwiYXNzZXJ0IiwibGVuZ3RoIiwid2hlZWxSIiwiY2hhc3Npc0giLCJjaGFzc2lzVyIsImF4bGVPZmZzZXRZIiwiYmQiLCJiMkJvZHlEZWYiLCJzZXRfdHlwZSIsImIyX2R5bmFtaWNCb2R5Iiwic2V0X3Bvc2l0aW9uIiwiYjJWZWMyIiwid2hlZWxCb2R5IiwiQ3JlYXRlQm9keSIsInNoYXBlIiwiYjJDaXJjbGVTaGFwZSIsInNldF9tX3JhZGl1cyIsImZkIiwiYjJGaXh0dXJlRGVmIiwic2V0X3NoYXBlIiwic2V0X2RlbnNpdHkiLCJzZXRfZnJpY3Rpb24iLCJzZXRfcmVzdGl0dXRpb24iLCJmaWx0ZXIiLCJnZXRfZmlsdGVyIiwic2V0X2NhdGVnb3J5Qml0cyIsInNldF9tYXNrQml0cyIsInNldF9maWx0ZXIiLCJmaXh0dXJlIiwiY2FzdE9iamVjdCIsIkNyZWF0ZUZpeHR1cmUiLCJiMkZpeHR1cmUiLCJwYXJ0VHlwZSIsInNwb3QiLCJ3aGVlbE1hc3MiLCJHZXRNYXNzIiwiZWRnZVgiLCJlZGdlWSIsImN1dG91dFgiLCJjdXRvdXRZIiwiY2hhc3Npc1ZlcnRpY2VzIiwiYjJDaGFzc2lzVmVydGljZXMiLCJ2ZXJ0ZXgiLCJwdXNoIiwiY2hhc3Npc1Bvc0luaXQiLCJjaGFzc2lzQm9keSIsImIyQ3JlYXRlUG9seWdvblNoYXBlIiwiY2hhc3Npc01hc3MiLCJqZCIsImIyUmV2b2x1dGVKb2ludERlZiIsIkluaXRpYWxpemUiLCJzZXRfZW5hYmxlTW90b3IiLCJzZXRfbWF4TW90b3JUb3JxdWUiLCJheGxlIiwiQ3JlYXRlSm9pbnQiLCJiMlJldm9sdXRlSm9pbnQiLCJpbnB1dERpbSIsImdldElucHV0cyIsInNoYXBlcyIsIm5fZGltIiwid2VpZ2h0Q291bnQiLCJiaWFzQ291bnQiLCJpIiwibiIsIm0iLCJyZXNldCIsInZlcnRpY2VzIiwiYjJQb2x5Z29uU2hhcGUiLCJidWZmZXIiLCJfbWFsbG9jIiwib2Zmc2V0IiwiSEVBUEYzMiIsImdldF94IiwiZ2V0X3kiLCJwdHJfd3JhcHBlZCIsIndyYXBQb2ludGVyIiwiU2V0IiwiZmxhdFd0cyIsImZsYXRXdElkeCIsIndlaWdodHMiLCJuZXdXZWlnaHQiLCJGbG9hdDMyQXJyYXkiLCJmcm9tIiwic2xpY2UiLCJNYXRyaXgiLCJiaWFzZXMiLCJuZXdCaWFzIiwiU2V0VHJhbnNmb3JtIiwiU2V0TGluZWFyVmVsb2NpdHkiLCJTZXRBbmd1bGFyVmVsb2NpdHkiLCJTZXRBd2FrZSIsInRhcmdldFNxRXJyU3VtIiwidGFyZ2V0UHJldiIsInByZXZPdXRwdXQiLCJvdXRwdXREaWZmU3FTdW0iLCJwcmV2V2hlZWxWZWxYIiwid2hlZWxBY2NYIiwicHJldkNoYXNzaXNWZWxYIiwiY2hhc3Npc0FjY1giLCJkcmlmdFhTcVN1bSIsImNyYXNoU3RlcENvdW50IiwidGFyZ2V0IiwiY3VycmVudCIsImRpZmYiLCJkaWZmU3EiLCJNYXRoIiwiYWJzIiwic3BlZWQiLCJTZXRNb3RvclNwZWVkIiwiaW5wdXRzIiwicmV2ZXJzZSIsInNpZ24iLCJ3aGVlbFBvcyIsIkdldFBvc2l0aW9uIiwid2hlZWxYIiwid2hlZWxZIiwibGlkYXJZcyIsInhPZmYiLCJsaWRhclkiLCJpbnRlcnBUZXJyYWluWSIsInRlcnJhaW5QdHMiLCJjaGFzc2lzU2luIiwic2luIiwiR2V0QW5nbGUiLCJjaGFzc2lzVmVsWCIsIkdldExpbmVhclZlbG9jaXR5IiwiY2hhc3Npc0FuZ1ZlbCIsIkdldEFuZ3VsYXJWZWxvY2l0eSIsIndoZWVsVmVsIiwid2hlZWxWZWxYIiwid2hlZWxBbmdWZWwiLCJheGxlUnhuIiwiR2V0UmVhY3Rpb25Gb3JjZSIsInVwZGF0ZVRhcmdldFNjb3JlIiwiaW5wdXRzQXJyYXkiLCJvdXRwdXRSYXciLCJtdWwiLCJhZGQiLCJsZWFreUVsdSIsImRhdGEiLCJvdXRwdXQiLCJzZXRTcGVlZCIsIm91dHB1dERpZmYiLCJjaGFzc2lzUG9zIiwid2hlZWxQb3NDdXJyZW50Iiwid2hlZWxBbmdsZUN1cnJlbnQiLCJjaGFzc2lzUG9zQ3VycmVudCIsImNoYXNzaXNBbmdsZUN1cnJlbnQiLCJvdGhlciIsImEiLCJiIiwicCIsImMiLCJBcnJheUJ1ZmZlciIsImoiLCJzdW0iLCJrIiwibCIsInJlc3VsdCIsIm1heCIsImV4cG0xIiwiUG9wdWxhdGlvbiIsIm5UaXBweXMiLCJncmF2aXR5IiwiYjJXb3JsZCIsInlEaWZmUHJldiIsImdyb3VuZEJvZHkiLCJ0ZXJyYWluUHRzRmlsdGVyZWQiLCJ5RGlmZkN1cnIiLCJzYW1lU2xvcGUiLCJ0ZXJyYWluSWR4VG9YUG9zIiwiZWRnZVNoYXBlIiwiYjJFZGdlU2hhcGUiLCJTZXRUd29TaWRlZCIsImdyb3VuZEZEIiwiaWR4IiwieCIsInkiLCJ0aXBweXMiLCJhZGRUaXBweXMiLCJmbGF0V3RzSWR4Iiwic2V0V3RzIiwidGFyZ2V0cyIsInNvbHV0aW9ucyIsIm5Tb2x1dGlvbnMiLCJ0aXBweSIsInRhcmdldElkeCIsInN0ZXAiLCJ1cGRhdGUiLCJTdGVwIiwic29sdXRpb25zU2NvcmVzIiwidGlwcHkwIiwic29sdXRpb24iLCJ3dHNOb3JtIiwid3QiLCJiaWFzTm9ybSIsImJpYXMiLCJ0YXNrU2NvcmVzIiwidGFza1RpcHB5IiwibXNlIiwiY3Jhc2hlZFJhdGlvIiwiZHJpZnRYIiwic2NhbGUiLCJjZW50ZXIiLCJkcmF3IiwieFNjYWxlZCIsIm1pbiIsImlkeE9mZnNldCIsImNsaXBwZWQiLCJmbG9vciIsImNlaWwiLCJ4cyIsIm1hcCIsInYiLCJ5cyIsInlEaWZmIiwib25tZXNzYWdlIiwiZSIsImluZm8iLCJtc2ciLCJCb3gyREZhY3RvcnkiLCJ0aGVuIiwidHJhaW4iLCJwb3N0TWVzc2FnZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIk8iLCJjaHVua0lkcyIsImZuIiwicHJpb3JpdHkiLCJub3RGdWxmaWxsZWQiLCJJbmZpbml0eSIsImZ1bGZpbGxlZCIsIk9iamVjdCIsImtleXMiLCJldmVyeSIsImtleSIsInNwbGljZSIsInIiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJtaW5pQ3NzRiIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiRXJyb3IiLCJyZXBsYWNlIiwic2VsZiIsImluc3RhbGxlZENodW5rcyIsImNodW5rTG9hZGluZ0dsb2JhbCIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiYmluZCIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=