"use strict";(self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[]).push([[969],{969:(t,i,r)=>{r.d(i,{V:()=>_,k:()=>d});var e=r(1373);function s(t){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s(t)}function n(t,i){return function(t){if(Array.isArray(t))return t}(t)||function(t,i){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var e,s,n,a,o=[],h=!0,u=!1;try{if(n=(r=r.call(t)).next,0===i){if(Object(r)!==r)return;h=!1}else for(;!(h=(e=n.call(r)).done)&&(o.push(e.value),o.length!==i);h=!0);}catch(t){u=!0,s=t}finally{try{if(!h&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(u)throw s}}return o}}(t,i)||function(t,i){if(t){if("string"==typeof t)return a(t,i);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?a(t,i):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,i){(null==i||i>t.length)&&(i=t.length);for(var r=0,e=new Array(i);r<i;r++)e[r]=t[r];return e}function o(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}function h(t,i){for(var r=0;r<i.length;r++){var e=i[r];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,f(e.key),e)}}function u(t,i,r){return i&&h(t.prototype,i),r&&h(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function f(t){var i=function(t,i){if("object"!=s(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var e=r.call(t,"string");if("object"!=s(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==s(i)?i:String(i)}var m=1e8,c=1e16,l=Math.fround(977e-6),d=function(){function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,n=arguments.length>4?arguments[4]:void 0;o(this,t),console.assert(i.length>1,"mean array length must be greater than 1."),console.assert(i.every((function(t){return Math.abs(t)<1e32})),"all mean value magnitudes must be less than 1e32."),this.mean=i,this.n_dim=i.length,null==e&&(e=4+Math.floor(3*Math.log(this.n_dim))),console.assert(e>0,"popsize must be non-zero positive value."),this.popsize=e,this.mu=Math.floor(e/2),console.assert(r>0,"sigma must be non-zero positive value");for(var a=new Float32Array(this.popsize),h=0;h<this.popsize;h++)a[h]=Math.log((e+1)/2)-Math.log(h+1);function u(t){return Math.pow(t.reduce((function(t,i){return t+i})),2)/t.map((function(t){return t*t})).reduce((function(t,i){return t+i}))}this.mu_eff=u(a.slice(0,this.mu));var f=u(a.slice(this.mu));this.c1=2/(Math.pow(this.n_dim+1.3,2)+this.mu_eff),this.cmu=Math.min(1-this.c1-1e-8,2*(this.mu_eff-2+1/this.mu_eff)/(Math.pow(this.n_dim+2,2)+2*this.mu_eff/2)),console.assert(this.c1<=1-this.cmu,"invalid learning rate for the rank-one update"),console.assert(this.cmu<=1-this.c1,"invalid learning rate for the rank-Î¼ update");var m,c=Math.min(1+this.c1/this.cmu,1+2*f/(this.mu_eff+2),(1-this.c1-this.cmu)/(this.n_dim*this.cmu)),l=a.filter((function(t){return t>0})).reduce((function(t,i){return t+i})),d=Math.abs(a.filter((function(t){return t<0})).reduce((function(t,i){return t+i})));this.weights=a.map((function(t){return t>=0?1/l*t:c/d*t})),this.cm=1,this.c_sigma=(this.mu_eff+2)/(this.n_dim+this.mu_eff+5),this.d_sigma=1+2*Math.max(0,Math.sqrt((this.mu_eff-1)/(this.n_dim+1))-1)+this.c_sigma,console.assert(this.c_sigma<1,"invalid learning rate for cumulation for the step-size control"),this.cc=(4+this.mu_eff/this.n_dim)/(this.n_dim+4+2*this.mu_eff/this.n_dim),console.assert(this.cc<=1,"invalid learning rate for cumulation for the rank-one update"),this.chi_n=Math.sqrt(this.n_dim)*(1-1/(4*this.n_dim)+1/(21*Math.pow(this.n_dim,2))),this.p_sigma=new Float32Array(this.n_dim).fill(0),this.pc=new Float32Array(this.n_dim).fill(0),null==s?this.C=(m=this.n_dim,function(t){for(var i=t.length,r=new Float32Array(i*i).fill(0),e=0;e<i;e++)r[e*(1+i)]=t[e];return new v(r)}(new Float32Array(m).fill(1))):(console.assert(s.shape==(n_dim,n_dim),"Invalid shape of covariance matrix"),this.C=s),this.sigma=r,this.g=0,this.needs_decomp=!0,null!=n&&(this.rng=n)}return u(t,[{key:"_eigen_decomposition",value:function(){if(!this.needs_decomp)return!0;this.C.avgSymmeric();var t=function(t){var i=!0,r=n(function(t){if(!(t instanceof v))return console.error("tred2 requires a SqMatrix"),null;var i,r,e,s,n,a,o,h,u,f=t.copy(),m=f.dim,c=new Float32Array(m).fill(0),l=new Float32Array(m).fill(0);for(i=m-1;i>=1;i--){if(o=0,u=0,(s=i-1)>0){for(e=0;e<=s;e++)u+=Math.abs(f.get(e,i));if(0==u)l[i]=f.get(s,i);else{for(e=0;e<=s;e++){var d=f.get(e,i)/u;f.set(e,i,d),o+=d*d}for(n=f.get(s,i),a=-Math.sign(n)*Math.abs(Math.sqrt(o)),l[i]=u*a,o-=n*a,f.set(s,i,n-a),n=0,r=0;r<=s;r++){for(f.set(i,r,f.get(r,i)/o),a=0,e=0;e<=r;e++)a+=f.get(e,r)*f.get(e,i);for(e=r+1;e<=s;e++)a+=f.get(r,e)*f.get(e,i);l[r]=a/o,n+=l[r]*f.get(r,i)}for(h=n/(o+o),r=0;r<=s;r++){n=f.get(r,i),a=l[r]-h*n,l[r]=a;for(var g=0;g<=r;g++)f.set(g,r,f.get(g,r)-n*l[g]-a*f.get(g,i))}}}else l[i]=f.get(s,i);c[i]=o}for(c[0]=0,l[0]=0,i=0;i<m;i++){if(s=i-1,0!=c[i])for(r=0;r<=s;r++){for(a=0,e=0;e<=s;e++)a+=f.get(e,i)*f.get(r,e);for(e=0;e<=s;e++)f.set(r,e,f.get(r,e)-a*f.get(i,e))}for(c[i]=f.get(i,i),f.set(i,i,1),r=0;r<=s;r++)f.set(r,i,0),f.set(i,r,0)}return[f,c,l,!0]}(t),4),e=r[0],s=r[1],a=r[2];if(!r[3])return{eig_vals:h,eig_vecs:u,eig_sym_success:i=!1};var o=n(function(t,i,r){var e,s,n,a,o,h,u,f,m,c,d,v,_=!0,p=r.dim;for(e=1;e<p;e++)i[e-1]=i[e];for(a=0;a<p;a++){for(s=0;s<30;){var y=!1;for(o=a;o<p-1;o++){var M=Math.fround(Math.abs(t[o])+Math.abs(t[o+1]));if(Math.abs(i[o])<=l*M){y=!0;break}}if(y||(o=p-1),o==a)break;s++,d=g(m=(t[a+1]-t[a])/(2*i[a]),1),m=t[o]-t[a]+i[a]/(m+Math.sign(m)*Math.abs(d)),v=1,u=1,c=0;var b=!1;for(e=o-1;e>=a;e--){if(f=v*i[e],h=u*i[e],d=g(f,m),i[e+1]=d,0==d){t[e+1]-=c,i[o]=0,b=!0;break}for(v=f/d,u=m/d,m=t[e+1]-c,c=v*(d=(t[e]-m)*v+2*u*h),t[e+1]=m+c,m=u*d-h,n=0;n<p;n++)f=r.get(e+1,n),r.set(e+1,n,v*r.get(e,n)+u*f),r.set(e,n,u*r.get(e,n)-v*f)}b||(t[a]-=c,i[a]=m,i[o]=0)}if(s>20)return console.log("iter",s),[t,r,_=!1]}return[t,r,_]}(s,a,e),3),h=o[0],u=o[1];return o[2]?{eig_vals:h,eig_vecs:u=u.transpose(),eig_sym_success:i}:{eig_vals:h,eig_vecs:u,eig_sym_success:i=!1}}(this.C);if(!t.eig_sym_success)return!1;var i=t.eig_vals.map((function(t){return t<0?1e-8:t}));this.D=i.map((function(t){return Math.sqrt(t)})),this.B=t.eig_vecs.copy();for(var r=this.B.copy(),e=0;e<this.n_dim;e++)for(var s=0;s<this.n_dim;s++)r.set(e,s,r.get(e,s)*i[s]);this.C=r.mulMat(this.B.transpose()),this.BD=this.B.copy();for(var a=0;a<this.n_dim;a++)for(var o=0;o<this.n_dim;o++)this.BD.set(a,o,this.BD.get(a,o)*this.D[o]);return this.needs_decomp=!1,!0}},{key:"_sample_solution",value:function(){if(!this._eigen_decomposition())return!1;for(var t=null==this.rng?(0,e.K)(this.n_dim):this.rng.get(this.n_dim),i=this.BD.mulVec(t),r=new Float32Array(this.n_dim),s=0;s<this.n_dim;s++){var n=this.mean[s]+this.sigma*i[s];n=Math.min(Math.max(n,-c),c),r[s]=n}return r}},{key:"ask",value:function(){return this._sample_solution()}},{key:"tell",value:function(t){if(this.g++,t.sort((function(t,i){return t.score-i.score})),!this._eigen_decomposition())return!1;this.needs_decomp=!0;for(var i=[],r=0;r<this.popsize;r++)for(var e=t[r].solution,s=0;s<this.n_dim;s++)i.push((e[s]-this.mean[s])/this.sigma);for(var n=new Float32Array(this.n_dim).fill(0),a=0;a<this.mu;a++)for(var o=0;o<this.n_dim;o++)n[o]+=i[a*this.n_dim+o]*this.weights[a];for(var h=0;h<this.n_dim;h++)this.mean[h]+=this.cm*this.sigma*n[h],this.mean[h]>m?(console.log("mean too high"),this.mean[h]=m):this.mean[h]<-1e8&&(console.log("mean too low"),this.mean[h]=-1e8);for(var u=this.B.copy(),f=0;f<this.n_dim;f++)for(var c=0;c<this.n_dim;c++)u.set(f,c,u.get(f,c)/this.D[c]);for(var l=u.mulMat(this.B.transpose()),d=l.mulVec(n),v=1-this.c_sigma,g=Math.sqrt(this.c_sigma*(2-this.c_sigma)*this.mu_eff),_=0;_<this.n_dim;_++)this.p_sigma[_]=v*this.p_sigma[_]+g*d[_];var p=Math.sqrt(this.p_sigma.map((function(t){return t*t})).reduce((function(t,i){return t+i})));this.sigma*=Math.exp(this.c_sigma/this.d_sigma*(p/this.chi_n-1)),this.sigma=Math.min(this.sigma,1e8);var y=p/Math.sqrt(1-Math.pow(1-this.c_sigma,2*(this.g+1)))<(1.4+2/(this.n_dim+1))*this.chi_n?1:0;v=1-this.cc,g=y*Math.sqrt(this.cc*(2-this.cc)*this.mu_eff);for(var M=0;M<this.n_dim;M++)this.pc[M]=v*this.pc[M]+g*n[M];for(var b=new Float32Array(this.n_dim*this.popsize),w=0;w<this.n_dim;w++)for(var k=0;k<this.popsize;k++){for(var A=0,S=0;S<this.n_dim;S++)A+=l.get(w,S)*i[k*this.n_dim+S];b[w*this.popsize+k]=A}for(var F=[],q=0;q<this.popsize;q++){for(var z=0,C=0;C<this.n_dim;C++){var j=b[C*this.popsize+q];z+=j*j}F.push(this.n_dim/(Math.abs(z)+1e-8))}for(var B=[],x=0;x<this.popsize;x++){var D=this.weights[x]>=0?1:F[x];B.push(this.weights[x]*D)}for(var O=(1-y)*this.cc*(2-this.cc),I=new Float32Array(this.n_dim*this.n_dim),P=0;P<this.n_dim;P++)for(var V=P;V<this.n_dim;V++)I[P*this.n_dim+V]=this.pc[P]*this.pc[V];for(var E=new Float32Array(this.n_dim*this.n_dim).fill(0),T=0;T<this.popsize;T++)for(var K=0;K<this.n_dim;K++)for(var U=K;U<this.n_dim;U++)E[K*this.n_dim+U]+=B[T]*i[T*this.n_dim+K]*i[T*this.n_dim+U];var $=this.weights.reduce((function(t,i){return t+i}));v=1+this.c1*O-this.c1-this.cmu*$;for(var G=0;G<this.n_dim;G++)for(var H=G;H<this.n_dim;H++){var J=G*this.n_dim+H;this.C.data[J]=v*this.C.data[J]+this.c1*I[J]+this.cmu*E[J]}for(var L=0;L<this.n_dim;L++)for(var N=L+1;N<this.n_dim;N++)this.C.set(N,L,this.C.get(L,N));return!0}}]),t}(),v=function(){function t(i){o(this,t);var r=Math.sqrt(i.length);this.dim=r,this.data=Float32Array.from(i)}return u(t,[{key:"get",value:function(t,i){return this.data[t*this.dim+i]}},{key:"set",value:function(t,i,r){this.data[t*this.dim+i]=r}},{key:"addMat",value:function(i){if(!(i instanceof t))return console.error("Must add with SqMatrix."),null;for(var r=this.data.slice(),e=0;e<r.length;e++)r[e]+=i.data[e];return new t(r)}},{key:"mulVec",value:function(t){for(var i=new Float32Array(this.dim).fill(0),r=0;r<this.dim;r++)for(var e=0;e<this.dim;e++)i[r]+=this.get(r,e)*t[e];return i}},{key:"mulMat",value:function(i){for(var r=this.data,e=i.data,s=this.dim,n=this.dim,a=i.dim,o=new Float32Array(s*a),h=0;h<a;h++)for(var u=0;u<s;u++){for(var f=0,m=0;m<n;m++)f+=r[u*n+m]*e[m*a+h];o[u*a+h]=f}return new t(o)}},{key:"transpose",value:function(){for(var i=new t(new Float32Array(this.dim*this.dim)),r=0;r<this.dim;r++)for(var e=0;e<this.dim;e++)i.set(r,e,this.get(e,r));return i}},{key:"avgSymmeric",value:function(){for(var t=0;t<this.dim-1;t++)for(var i=t+1;i<this.dim;i++){var r=.5*(this.get(t,i)+this.get(i,t));this.set(t,i,r),this.set(i,t,r)}}},{key:"copy",value:function(){return new t(this.data.slice())}},{key:"toString",value:function(){for(var t="",i=0;i<this.dim*this.dim;i++){var r=(i+1)%this.dim==0?"\n":" ";t+=this.data[i].toString().padStart(2," ")+r}return t}}]),t}();function g(t,i){var r=Math.abs(t),e=Math.abs(i),s=r/e,n=s*s;return r>e?r*Math.sqrt(1+1/n):0==e?0:e*Math.sqrt(1+n)}function _(t){return 4+Math.floor(3*Math.log(t))}},1373:(t,i,r)=>{function e(t){for(var i,r,e,s,n,a,o=new Float32Array(t),h=0;h<t;h++){var u=(void 0,void 0,void 0,void 0,void 0,void 0,i=Math.random(),r=Math.random(),e=Math.sqrt(-2*Math.log(i)),s=2*Math.PI*r,n=e*Math.cos(s),a=e*Math.sin(s),Float32Array.from([n,a]));if(o[h]=u[0],h+1>=t)break;o[++h]=u[1]}return o}r.d(i,{K:()=>e})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,