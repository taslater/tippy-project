"use strict";(self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[]).push([[234],{3721:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{K:()=>a});var n=e(5991),o=t([n]);n=(o.then?(await o)():o)[0];var a=function(){function t(t){this.raw=t||new n.LE}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t}();i()}catch(t){i(t)}}))},3118:(t,r,e)=>{var i;e.d(r,{j:()=>i}),function(t){t[t.Average=0]="Average",t[t.Min=1]="Min",t[t.Multiply=2]="Multiply",t[t.Max=3]="Max"}(i||(i={}))},4754:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{ib:()=>n.ib,xr:()=>n.xr,Jj:()=>n.Jj,rF:()=>o.r,RT:()=>a.R,y6:()=>s.y6,Pu:()=>s.Pu,d9:()=>s.d9,nT:()=>s.nT,dl:()=>s.dl,tQ:()=>s.tQ,Bd:()=>s.Bd,yd:()=>s.yd,NQ:()=>c.N,jK:()=>p.j,Kd:()=>l.K,yB:()=>u.y});var n=e(5759),o=e(5164),a=e(8597),s=e(9355),c=e(4824),p=e(3118),l=e(3721),u=e(4563),h=t([n,o,a,s,c,l,u]);[n,o,a,s,c,l,u]=h.then?(await h)():h,i()}catch(t){i(t)}}))},8597:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{R:()=>a});var n=e(5991),o=t([n]);n=(o.then?(await o)():o)[0];var a=function(){function t(t){this.raw=t||new n.zu}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},Object.defineProperty(t.prototype,"dt",{get:function(){return this.raw.dt},set:function(t){this.raw.dt=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"erp",{get:function(){return this.raw.erp},set:function(t){this.raw.erp=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"jointErp",{get:function(){return this.raw.jointErp},set:function(t){this.raw.jointErp=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"warmstartCoeff",{get:function(){return this.raw.warmstartCoeff},set:function(t){this.raw.warmstartCoeff=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"allowedLinearError",{get:function(){return this.raw.allowedLinearError},set:function(t){this.raw.allowedLinearError=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"predictionDistance",{get:function(){return this.raw.predictionDistance},set:function(t){this.raw.predictionDistance=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"allowedAngularError",{get:function(){return this.raw.allowedAngularError},set:function(t){this.raw.allowedAngularError=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxLinearCorrection",{get:function(){return this.raw.maxLinearCorrection},set:function(t){this.raw.maxLinearCorrection=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxAngularCorrection",{get:function(){return this.raw.maxAngularCorrection},set:function(t){this.raw.maxAngularCorrection=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxVelocityIterations",{get:function(){return this.raw.maxVelocityIterations},set:function(t){this.raw.maxVelocityIterations=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxPositionIterations",{get:function(){return this.raw.maxPositionIterations},set:function(t){this.raw.maxPositionIterations=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"minIslandSize",{get:function(){return this.raw.minIslandSize},set:function(t){this.raw.minIslandSize=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxCcdSubsteps",{get:function(){return this.raw.maxCcdSubsteps},set:function(t){this.raw.maxCcdSubsteps=t},enumerable:!1,configurable:!0}),t}();i()}catch(t){i(t)}}))},4563:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{y:()=>a});var n=e(5991),o=t([n]);n=(o.then?(await o)():o)[0];var a=function(){function t(t){this.raw=t||new n.Is}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.forEachActiveRigidBodyHandle=function(t){this.raw.forEachActiveRigidBodyHandle(t)},t}();i()}catch(t){i(t)}}))},9355:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{dl:()=>s,Bd:()=>c,d9:()=>l,yd:()=>u,Pu:()=>h,tQ:()=>d,y6:()=>_,nT:()=>w});var n=e(8461),o=e(5991),a=t([n,o]);[n,o]=a.then?(await a)():a;var s,c,p=(f=function(t,r){return f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])},f(t,r)},function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=t}f(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)});!function(t){t[t.Ball=0]="Ball",t[t.Fixed=1]="Fixed",t[t.Prismatic=2]="Prismatic"}(s||(s={})),function(t){t[t.Disabled=0]="Disabled",t[t.VelocityBased=1]="VelocityBased",t[t.AccelerationBased=2]="AccelerationBased",t[t.ForceBased=3]="ForceBased"}(c||(c={}));var l=function(){function t(t,r){this.rawSet=t,this.handle=r}return t.prototype.isValid=function(){return this.rawSet.contains(this.handle)},t.prototype.bodyHandle1=function(){return this.rawSet.jointBodyHandle1(this.handle)},t.prototype.bodyHandle2=function(){return this.rawSet.jointBodyHandle2(this.handle)},t.prototype.type=function(){return this.rawSet.jointType(this.handle)},t.prototype.anchor1=function(){return n.ut.fromRaw(this.rawSet.jointAnchor1(this.handle))},t.prototype.anchor2=function(){return n.ut.fromRaw(this.rawSet.jointAnchor2(this.handle))},t.prototype.axis1=function(){return n.ut.fromRaw(this.rawSet.jointAxis1(this.handle))},t.prototype.axis2=function(){return n.ut.fromRaw(this.rawSet.jointAxis2(this.handle))},t}(),u=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return p(r,t),r.prototype.limitsEnabled=function(){return this.rawSet.jointLimitsEnabled(this.handle)},r.prototype.limitsMin=function(){return this.rawSet.jointLimitsMin(this.handle)},r.prototype.limitsMax=function(){return this.rawSet.jointLimitsMax(this.handle)},r.prototype.configureMotorModel=function(t){this.rawSet.jointConfigureMotorModel(this.handle,t)},r.prototype.configureMotorVelocity=function(t,r){this.rawSet.jointConfigureUnitMotorVelocity(this.handle,t,r)},r.prototype.configureMotorPosition=function(t,r,e){this.rawSet.jointConfigureUnitMotorPosition(this.handle,t,r,e)},r.prototype.configureMotor=function(t,r,e,i){this.rawSet.jointConfigureUnitMotor(this.handle,t,r,e,i)},r}(l),h=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return p(r,t),r}(l),d=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return p(r,t),r}(u),_=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return p(r,t),r}(u),w=function(){function t(){}return t.ball=function(r,e){var i=new t;return i.anchor1=r,i.anchor2=e,i.jointType=s.Ball,i},t.fixed=function(r,e,i,n){var o=new t;return o.anchor1=r,o.anchor2=i,o.frame1=e,o.frame2=n,o.jointType=s.Fixed,o},t.prismatic=function(r,e,i,n){var o=new t;return o.anchor1=r,o.axis1=e,o.anchor2=i,o.axis2=n,o.jointType=s.Prismatic,o},t.prototype.intoRaw=function(){var t,r,e,i=n.ut.intoRaw(this.anchor1),a=n.ut.intoRaw(this.anchor2),c=!1,p=0,l=0;switch(this.jointType){case s.Ball:e=o.of.ball(i,a);break;case s.Fixed:var u=n.T3.intoRaw(this.frame1),h=n.T3.intoRaw(this.frame2);e=o.of.fixed(i,u,a,h),u.free(),h.free();break;case s.Prismatic:t=n.ut.intoRaw(this.axis1),r=n.ut.intoRaw(this.axis2),this.limitsEnabled&&(c=!0,p=this.limits[0],l=this.limits[1]),e=o.of.prismatic(i,t,a,r,c,p,l),t.free(),r.free()}return i.free(),a.free(),e},t}();i()}catch(t){i(t)}var f}))},4824:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{N:()=>s});var n=e(5991),o=e(9355),a=t([n,o]);[n,o]=a.then?(await a)():a;var s=function(){function t(t){this.raw=t||new n.Xu}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.createJoint=function(t,r,e,i){var n=r.intoRaw(),o=this.raw.createJoint(t.raw,n,e,i);return n.free(),o},t.prototype.remove=function(t,r,e,i){this.raw.remove(t,r.raw,e.raw,i)},t.prototype.len=function(){return this.raw.len()},t.prototype.contains=function(t){return this.raw.contains(t)},t.prototype.get=function(t){if(!this.raw.contains(t))return null;switch(this.raw.jointType(t)){case o.dl.Ball:return new o.y6(this.raw,t);case o.dl.Prismatic:return new o.tQ(this.raw,t);case o.dl.Fixed:return new o.Pu(this.raw,t)}},t.prototype.forEachJoint=function(t){var r=this;this.raw.forEachJointHandle((function(e){t(new o.d9(r.raw,e))}))},t.prototype.forEachJointHandle=function(t){this.raw.forEachJointHandle(t)},t}();i()}catch(t){i(t)}}))},5759:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{Jj:()=>n,ib:()=>s,xr:()=>c});var n,o=e(8461),a=t([o]);o=(a.then?(await a)():a)[0],function(t){t[t.Dynamic=0]="Dynamic",t[t.Static=1]="Static",t[t.KinematicPositionBased=2]="KinematicPositionBased",t[t.KinematicVelocityBased=3]="KinematicVelocityBased"}(n||(n={}));var s=function(){function t(t,r){this.rawSet=t,this.handle=r}return t.prototype.isValid=function(){return this.rawSet.contains(this.handle)},t.prototype.lockTranslations=function(t,r){return this.rawSet.rbLockTranslations(this.handle,t,r)},t.prototype.lockRotations=function(t,r){return this.rawSet.rbLockRotations(this.handle,t,r)},t.prototype.dominanceGroup=function(){return this.rawSet.rbDominanceGroup(this.handle)},t.prototype.setDominanceGroup=function(t){this.rawSet.rbSetDominanceGroup(this.handle,t)},t.prototype.enableCcd=function(t){this.rawSet.rbEnableCcd(this.handle,t)},t.prototype.translation=function(){var t=this.rawSet.rbTranslation(this.handle);return o.ut.fromRaw(t)},t.prototype.rotation=function(){var t=this.rawSet.rbRotation(this.handle);return o.T3.fromRaw(t)},t.prototype.nextTranslation=function(){var t=this.rawSet.rbNextTranslation(this.handle);return o.ut.fromRaw(t)},t.prototype.nextRotation=function(){var t=this.rawSet.rbNextRotation(this.handle);return o.T3.fromRaw(t)},t.prototype.setTranslation=function(t,r){this.rawSet.rbSetTranslation(this.handle,t.x,t.y,r)},t.prototype.setLinvel=function(t,r){var e=o.ut.intoRaw(t);this.rawSet.rbSetLinvel(this.handle,e,r),e.free()},t.prototype.gravityScale=function(){return this.rawSet.rbGravityScale(this.handle)},t.prototype.setGravityScale=function(t,r){this.rawSet.rbSetGravityScale(this.handle,t,r)},t.prototype.setRotation=function(t,r){this.rawSet.rbSetRotation(this.handle,t,r)},t.prototype.setAngvel=function(t,r){this.rawSet.rbSetAngvel(this.handle,t,r)},t.prototype.setNextKinematicTranslation=function(t){this.rawSet.rbSetNextKinematicTranslation(this.handle,t.x,t.y)},t.prototype.setNextKinematicRotation=function(t){this.rawSet.rbSetNextKinematicRotation(this.handle,t)},t.prototype.linvel=function(){return o.ut.fromRaw(this.rawSet.rbLinvel(this.handle))},t.prototype.angvel=function(){return this.rawSet.rbAngvel(this.handle)},t.prototype.mass=function(){return this.rawSet.rbMass(this.handle)},t.prototype.sleep=function(){this.rawSet.rbSleep(this.handle)},t.prototype.wakeUp=function(){this.rawSet.rbWakeUp(this.handle)},t.prototype.isCcdEnabled=function(){this.rawSet.rbIsCcdEnabled(this.handle)},t.prototype.numColliders=function(){return this.rawSet.rbNumColliders(this.handle)},t.prototype.collider=function(t){return this.rawSet.rbCollider(this.handle,t)},t.prototype.bodyType=function(){return this.rawSet.rbBodyType(this.handle)},t.prototype.isSleeping=function(){return this.rawSet.rbIsSleeping(this.handle)},t.prototype.isMoving=function(){return this.rawSet.rbIsMoving(this.handle)},t.prototype.isStatic=function(){return this.rawSet.rbIsStatic(this.handle)},t.prototype.isKinematic=function(){return this.rawSet.rbIsKinematic(this.handle)},t.prototype.isDynamic=function(){return this.rawSet.rbIsDynamic(this.handle)},t.prototype.linearDamping=function(){return this.rawSet.rbLinearDamping(this.handle)},t.prototype.angularDamping=function(){return this.rawSet.rbAngularDamping(this.handle)},t.prototype.setLinearDamping=function(t){this.rawSet.rbSetLinearDamping(this.handle,t)},t.prototype.setAngularDamping=function(t){this.rawSet.rbSetAngularDamping(this.handle,t)},t.prototype.applyForce=function(t,r){var e=o.ut.intoRaw(t);this.rawSet.rbApplyForce(this.handle,e,r),e.free()},t.prototype.applyImpulse=function(t,r){var e=o.ut.intoRaw(t);this.rawSet.rbApplyImpulse(this.handle,e,r),e.free()},t.prototype.applyTorque=function(t,r){this.rawSet.rbApplyTorque(this.handle,t,r)},t.prototype.applyTorqueImpulse=function(t,r){this.rawSet.rbApplyTorqueImpulse(this.handle,t,r)},t.prototype.applyForceAtPoint=function(t,r,e){var i=o.ut.intoRaw(t),n=o.ut.intoRaw(r);this.rawSet.rbApplyForceAtPoint(this.handle,i,n,e),i.free(),n.free()},t.prototype.applyImpulseAtPoint=function(t,r,e){var i=o.ut.intoRaw(t),n=o.ut.intoRaw(r);this.rawSet.rbApplyImpulseAtPoint(this.handle,i,n,e),i.free(),n.free()},t}(),c=function(){function t(t){this.status=t,this.translation=o.ut.zeros(),this.rotation=o.T3.identity(),this.gravityScale=1,this.linvel=o.ut.zeros(),this.mass=0,this.translationsEnabled=!0,this.centerOfMass=o.ut.zeros(),this.angvel=0,this.principalAngularInertia=0,this.rotationsEnabled=!0,this.linearDamping=0,this.angularDamping=0,this.canSleep=!0,this.ccdEnabled=!1,this.dominanceGroup=0}return t.newDynamic=function(){return new t(n.Dynamic)},t.newKinematicPositionBased=function(){return new t(n.KinematicPositionBased)},t.newKinematicVelocityBased=function(){return new t(n.KinematicVelocityBased)},t.newStatic=function(){return new t(n.Static)},t.prototype.setDominanceGroup=function(t){return this.dominanceGroup=t,this},t.prototype.setTranslation=function(t,r){if("number"!=typeof t||"number"!=typeof r)throw TypeError("The translation components must be numbers.");return this.translation={x:t,y:r},this},t.prototype.setRotation=function(t){return this.rotation=t,this},t.prototype.setGravityScale=function(t){return this.gravityScale=t,this},t.prototype.setAdditionalMass=function(t){return this.mass=t,this},t.prototype.lockTranslations=function(){return this.translationsEnabled=!1,this},t.prototype.setLinvel=function(t,r){if("number"!=typeof t||"number"!=typeof r)throw TypeError("The linvel components must be numbers.");return this.linvel={x:t,y:r},this},t.prototype.setAngvel=function(t){return this.angvel=t,this},t.prototype.setAdditionalMassProperties=function(t,r,e){return this.mass=t,this.centerOfMass=r,this.principalAngularInertia=e,this},t.prototype.setAdditionalPrincipalAngularInertia=function(t){return this.principalAngularInertia=t,this},t.prototype.lockRotations=function(){return this.rotationsEnabled=!1,this},t.prototype.setLinearDamping=function(t){return this.linearDamping=t,this},t.prototype.setAngularDamping=function(t){return this.angularDamping=t,this},t.prototype.setCanSleep=function(t){return this.canSleep=t,this},t.prototype.setCcdEnabled=function(t){return this.ccdEnabled=t,this},t}();i()}catch(t){i(t)}}))},5164:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{r:()=>c});var n=e(5991),o=e(8461),a=e(5759),s=t([n,o,a]);[n,o,a]=s.then?(await s)():s;var c=function(){function t(t){this.raw=t||new n.fY}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.createRigidBody=function(t){var r=o.ut.intoRaw(t.translation),e=o.T3.intoRaw(t.rotation),i=o.ut.intoRaw(t.linvel),n=o.ut.intoRaw(t.centerOfMass),a=this.raw.createRigidBody(r,e,t.gravityScale,t.mass,t.translationsEnabled,n,i,t.angvel,t.principalAngularInertia,t.rotationsEnabled,t.linearDamping,t.angularDamping,t.status,t.canSleep,t.ccdEnabled,t.dominanceGroup);return r.free(),e.free(),i.free(),n.free(),a},t.prototype.remove=function(t,r,e,i){this.raw.remove(t,r.raw,e.raw,i.raw)},t.prototype.len=function(){return this.raw.len()},t.prototype.contains=function(t){return this.raw.contains(t)},t.prototype.get=function(t){return this.raw.contains(t)?new a.ib(this.raw,t):null},t.prototype.forEachRigidBody=function(t){var r=this;this.forEachRigidBodyHandle((function(e){t(new a.ib(r.raw,e))}))},t.prototype.forEachRigidBodyHandle=function(t){this.raw.forEachRigidBodyHandle(t)},t.prototype.forEachActiveRigidBody=function(t,r){var e=this;t.forEachActiveRigidBodyHandle((function(t){r(new a.ib(e.raw,t))}))},t}();i()}catch(t){i(t)}}))},3903:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.r(r),e.d(r,{version:()=>l,RotationOps:()=>o.T3,Vector2:()=>o.FM,VectorOps:()=>o.ut,BallJoint:()=>a.y6,CCDSolver:()=>a.Kd,CoefficientCombineRule:()=>a.jK,FixedJoint:()=>a.Pu,IntegrationParameters:()=>a.RT,IslandManager:()=>a.yB,Joint:()=>a.d9,JointParams:()=>a.nT,JointSet:()=>a.NQ,JointType:()=>a.dl,PrismaticJoint:()=>a.tQ,RigidBody:()=>a.ib,RigidBodyDesc:()=>a.xr,RigidBodySet:()=>a.rF,RigidBodyType:()=>a.Jj,SpringModel:()=>a.Bd,UnitJoint:()=>a.yd,ActiveCollisionTypes:()=>s.vq,Ball:()=>s.ec,BroadPhase:()=>s.NT,Capsule:()=>s.sw,Collider:()=>s.YM,ColliderDesc:()=>s.ic,ColliderSet:()=>s.zY,ConvexPolygon:()=>s.to,Cuboid:()=>s.jv,Heightfield:()=>s.f4,NarrowPhase:()=>s.L4,PointColliderProjection:()=>s.Vl,Polyline:()=>s.aH,Ray:()=>s.zH,RayColliderIntersection:()=>s.No,RayColliderToi:()=>s.cu,RoundConvexPolygon:()=>s.DM,RoundCuboid:()=>s.iA,RoundTriangle:()=>s.$R,Segment:()=>s.XX,ShapeColliderTOI:()=>s.mB,ShapeType:()=>s.DY,TempContactManifold:()=>s.eL,TriMesh:()=>s.az,Triangle:()=>s.CJ,ActiveEvents:()=>c.Md,ActiveHooks:()=>c.iX,EventQueue:()=>c.NH,PhysicsPipeline:()=>c.DJ,SerializationPipeline:()=>c.y9,SolverFlags:()=>c.Nv,World:()=>c.q3});var n=e(5991),o=e(8461),a=e(4754),s=e(2002),c=e(2069),p=t([n,o,a,s,c]);function l(){return(0,n.i8)()}[n,o,a,s,c]=p.then?(await p)():p,i()}catch(t){i(t)}}))},3717:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{N:()=>a});var n=e(5991),o=t([n]);n=(o.then?(await o)():o)[0];var a=function(){function t(t){this.raw=t||new n.FU}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t}();i()}catch(t){i(t)}}))},276:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{vq:()=>n,YM:()=>p,ic:()=>l});var n,o=e(8461),a=e(3118),s=e(3810),c=t([o,s]);[o,s]=c.then?(await c)():c,function(t){t[t.DYNAMIC_DYNAMIC=1]="DYNAMIC_DYNAMIC",t[t.DYNAMIC_KINEMATIC=12]="DYNAMIC_KINEMATIC",t[t.DYNAMIC_STATIC=2]="DYNAMIC_STATIC",t[t.KINEMATIC_KINEMATIC=52224]="KINEMATIC_KINEMATIC",t[t.KINEMATIC_STATIC=8704]="KINEMATIC_STATIC",t[t.STATIC_STATIC=32]="STATIC_STATIC",t[t.DEFAULT=15]="DEFAULT",t[t.ALL=60943]="ALL"}(n||(n={}));var p=function(){function t(t,r){this.rawSet=t,this.handle=r}return t.prototype.isValid=function(){return this.rawSet.contains(this.handle)},t.prototype.translation=function(){return o.ut.fromRaw(this.rawSet.coTranslation(this.handle))},t.prototype.rotation=function(){return o.T3.fromRaw(this.rawSet.coRotation(this.handle))},t.prototype.isSensor=function(){return this.rawSet.coIsSensor(this.handle)},t.prototype.setSensor=function(t){this.rawSet.coSetSensor(this.handle,t)},t.prototype.setShape=function(t){var r=t.intoRaw();this.rawSet.coSetShape(this.handle,r),r.free()},t.prototype.setRestitution=function(t){this.rawSet.coSetRestitution(this.handle,t)},t.prototype.setFriction=function(t){this.rawSet.coSetFriction(this.handle,t)},t.prototype.frictionCombineRule=function(){return this.rawSet.coFrictionCombineRule(this.handle)},t.prototype.setFrictionCombineRule=function(t){this.rawSet.coSetFrictionCombineRule(this.handle,t)},t.prototype.restitutionCombineRule=function(){return this.rawSet.coRestitutionCombineRule(this.handle)},t.prototype.setRestitutionCombineRule=function(t){this.rawSet.coSetRestitutionCombineRule(this.handle,t)},t.prototype.setCollisionGroups=function(t){this.rawSet.coSetCollisionGroups(this.handle,t)},t.prototype.setSolverGroups=function(t){this.rawSet.coSetSolverGroups(this.handle,t)},t.prototype.activeHooks=function(){this.rawSet.coActiveHooks(this.handle)},t.prototype.setActiveHooks=function(t){this.rawSet.coSetActiveHooks(this.handle,t)},t.prototype.activeEvents=function(){return this.rawSet.coActiveEvents(this.handle)},t.prototype.setActiveEvents=function(t){this.rawSet.coSetActiveEvents(this.handle,t)},t.prototype.activeCollisionTypes=function(){return this.rawSet.coActiveCollisionTypes(this.handle)},t.prototype.setActiveCollisionTypes=function(t){this.rawSet.coSetActiveCollisionTypes(this.handle,t)},t.prototype.setTranslation=function(t){this.rawSet.coSetTranslation(this.handle,t.x,t.y)},t.prototype.setTranslationWrtParent=function(t){this.rawSet.coSetTranslationWrtParent(this.handle,t.x,t.y)},t.prototype.setRotation=function(t){this.rawSet.coSetRotation(this.handle,t)},t.prototype.setRotationWrtParent=function(t){this.rawSet.coSetRotationWrtParent(this.handle,t)},t.prototype.shapeType=function(){return this.rawSet.coShapeType(this.handle)},t.prototype.halfExtents=function(){return o.ut.fromRaw(this.rawSet.coHalfExtents(this.handle))},t.prototype.radius=function(){return this.rawSet.coRadius(this.handle)},t.prototype.roundRadius=function(){return this.rawSet.coRoundRadius(this.handle)},t.prototype.halfHeight=function(){return this.rawSet.coHalfHeight(this.handle)},t.prototype.vertices=function(){return this.rawSet.coVertices(this.handle)},t.prototype.indices=function(){return this.rawSet.coIndices(this.handle)},t.prototype.heightfieldHeights=function(){return this.rawSet.coHeightfieldHeights(this.handle)},t.prototype.heightfieldScale=function(){var t=this.rawSet.coHeightfieldScale(this.handle);return o.ut.fromRaw(t)},t.prototype.parent=function(){return this.rawSet.coParent(this.handle)},t.prototype.friction=function(){return this.rawSet.coFriction(this.handle)},t.prototype.density=function(){return this.rawSet.coDensity(this.handle)},t.prototype.collisionGroups=function(){return this.rawSet.coCollisionGroups(this.handle)},t.prototype.solverGroups=function(){return this.rawSet.coSolverGroups(this.handle)},t}(),l=function(){function t(t){this.shape=t,this.useMassProps=!1,this.density=1,this.friction=.5,this.restitution=0,this.rotation=o.T3.identity(),this.translation=o.ut.zeros(),this.isSensor=!1,this.collisionGroups=4294967295,this.solverGroups=4294967295,this.frictionCombineRule=a.j.Average,this.restitutionCombineRule=a.j.Average,this.activeCollisionTypes=n.DEFAULT,this.activeEvents=0,this.activeHooks=0,this.mass=0,this.centerOfMass=o.ut.zeros(),this.principalAngularInertia=0,this.rotationsEnabled=!0}return t.ball=function(r){return new t(new s.ec(r))},t.capsule=function(r,e){return new t(new s.sw(r,e))},t.segment=function(r,e){return new t(new s.XX(r,e))},t.triangle=function(r,e,i){return new t(new s.CJ(r,e,i))},t.roundTriangle=function(r,e,i,n){return new t(new s.$R(r,e,i,n))},t.polyline=function(r,e){return new t(new s.aH(r,e))},t.trimesh=function(r,e){return new t(new s.az(r,e))},t.cuboid=function(r,e){return new t(new s.jv(r,e))},t.roundCuboid=function(r,e,i){return new t(new s.iA(r,e,i))},t.heightfield=function(r,e){return new t(new s.f4(r,e))},t.convexHull=function(r){return new t(new s.to(r,!1))},t.convexPolyline=function(r){return new t(new s.to(r,!0))},t.roundConvexHull=function(r,e){return new t(new s.DM(r,e,!1))},t.roundConvexPolyline=function(r,e){return new t(new s.DM(r,e,!0))},t.prototype.setTranslation=function(t,r){if("number"!=typeof t||"number"!=typeof r)throw TypeError("The translation components must be numbers.");return this.translation={x:t,y:r},this},t.prototype.setRotation=function(t){return this.rotation=t,this},t.prototype.setSensor=function(t){return this.isSensor=t,this},t.prototype.setDensity=function(t){return this.useMassProps=!1,this.density=t,this},t.prototype.setMassProperties=function(t,r,e){return this.useMassProps=!0,this.mass=t,this.centerOfMass=r,this.principalAngularInertia=e,this},t.prototype.setRestitution=function(t){return this.restitution=t,this},t.prototype.setFriction=function(t){return this.friction=t,this},t.prototype.setFrictionCombineRule=function(t){return this.frictionCombineRule=t,this},t.prototype.setRestitutionCombineRule=function(t){return this.restitutionCombineRule=t,this},t.prototype.setCollisionGroups=function(t){return this.collisionGroups=t,this},t.prototype.setSolverGroups=function(t){return this.solverGroups=t,this},t.prototype.setActiveHooks=function(t){return this.activeHooks=t,this},t.prototype.setActiveEvents=function(t){return this.activeEvents=t,this},t.prototype.setActiveCollisionTypes=function(t){return this.activeCollisionTypes=t,this},t}();i()}catch(t){i(t)}}))},2156:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{z:()=>c});var n=e(5991),o=e(8461),a=e(276),s=t([n,o,a]);[n,o,a]=s.then?(await s)():s;var c=function(){function t(t){this.raw=t||new n.IQ}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.createCollider=function(t,r,e){var i=null!=e&&null!=e;if(i&&isNaN(e))throw Error("Cannot create a collider with a parent rigid-body handle that is not a number.");var n=r.shape.intoRaw(),a=o.ut.intoRaw(r.translation),s=o.T3.intoRaw(r.rotation),c=o.ut.intoRaw(r.centerOfMass),p=this.raw.createCollider(n,a,s,r.useMassProps,r.mass,c,r.principalAngularInertia,r.density,r.friction,r.restitution,r.frictionCombineRule,r.restitutionCombineRule,r.isSensor,r.collisionGroups,r.solverGroups,r.activeCollisionTypes,r.activeHooks,r.activeEvents,i,i?e:0,t.raw);return n.free(),a.free(),s.free(),c.free(),p},t.prototype.remove=function(t,r,e,i){this.raw.remove(t,r.raw,e.raw,i)},t.prototype.get=function(t){return this.raw.contains(t)?new a.YM(this.raw,t):null},t.prototype.len=function(){return this.raw.len()},t.prototype.contains=function(t){return this.raw.contains(t)},t.prototype.forEachCollider=function(t){var r=this;this.forEachColliderHandle((function(e){t(new a.YM(r.raw,e))}))},t.prototype.forEachColliderHandle=function(t){this.raw.forEachColliderHandle(t)},t}();i()}catch(t){i(t)}}))},2002:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{NT:()=>n.N,L4:()=>o.L,eL:()=>o.e,ec:()=>a.ec,sw:()=>a.sw,to:()=>a.to,jv:()=>a.jv,f4:()=>a.f4,aH:()=>a.aH,DM:()=>a.DM,iA:()=>a.iA,$R:()=>a.$R,XX:()=>a.XX,DY:()=>a.DY,az:()=>a.az,CJ:()=>a.CJ,vq:()=>s.vq,YM:()=>s.YM,ic:()=>s.ic,zY:()=>c.z,zH:()=>p.zH,No:()=>p.No,cu:()=>p.cu,Vl:()=>l.V,mB:()=>u.m});var n=e(3717),o=e(9179),a=e(3810),s=e(276),c=e(2156),p=e(483),l=e(832),u=e(3204),h=t([n,o,a,s,c,p,l,u]);[n,o,a,s,c,p,l,u]=h.then?(await h)():h,i()}catch(t){i(t)}}))},9179:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{L:()=>s,e:()=>c});var n=e(5991),o=e(8461),a=t([n,o]);[n,o]=a.then?(await a)():a;var s=function(){function t(t){this.raw=t||new n.uU,this.tempManifold=new c(null)}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.contactsWith=function(t,r){this.raw.contacts_with(t,r)},t.prototype.intersectionsWith=function(t,r){this.raw.intersections_with(t,r)},t.prototype.contactPair=function(t,r,e){var i=this.raw.contact_pair(t,r);if(i){var n=i.collider1()!=t,o=void 0;for(o=0;o<i.numContactManifolds();++o)this.tempManifold.raw=i.contactManifold(o),this.tempManifold.raw&&e(this.tempManifold,n),this.tempManifold.free();i.free()}},t.prototype.intersectionPair=function(t,r){return this.raw.intersection_pair(t,r)},t}(),c=function(){function t(t){this.raw=t}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.normal=function(){return o.ut.fromRaw(this.raw.normal())},t.prototype.localNormal1=function(){return o.ut.fromRaw(this.raw.local_n1())},t.prototype.localNormal2=function(){return o.ut.fromRaw(this.raw.local_n2())},t.prototype.subshape1=function(){return this.raw.subshape1()},t.prototype.subshape2=function(){return this.raw.subshape2()},t.prototype.numContacts=function(){return this.raw.num_contacts()},t.prototype.localContactPoint1=function(t){return o.ut.fromRaw(this.raw.contact_local_p1(t))},t.prototype.localContactPoint2=function(t){return o.ut.fromRaw(this.raw.contact_local_p2(t))},t.prototype.contactDist=function(t){return this.raw.contact_dist(t)},t.prototype.contactFid1=function(t){return this.raw.contact_fid1(t)},t.prototype.contactFid2=function(t){return this.raw.contact_fid2(t)},t.prototype.contactImpulse=function(t){return this.raw.contact_impulse(t)},t.prototype.contactTangentImpulse=function(t){return this.raw.contact_tangent_impulse(t)},t.prototype.numSolverContacts=function(){return this.raw.num_solver_contacts()},t.prototype.solverContactPoint=function(t){return o.ut.fromRaw(this.raw.solver_contact_point(t))},t.prototype.solverContactDist=function(t){return this.raw.solver_contact_dist(t)},t.prototype.solverContactFriction=function(t){return this.raw.solver_contact_friction(t)},t.prototype.solverContactRestitution=function(t){return this.raw.solver_contact_restitution(t)},t.prototype.solverContactTangentVelocity=function(t){return o.ut.fromRaw(this.raw.solver_contact_tangent_velocity(t))},t}();i()}catch(t){i(t)}}))},832:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{V:()=>a});var n=e(8461),o=t([n]);n=(o.then?(await o)():o)[0];var a=function(){function t(t,r,e){this.colliderHandle=t,this.point=r,this.isInside=e}return t.fromRaw=function(r){if(!r)return null;var e=new t(r.colliderHandle(),n.ut.fromRaw(r.point()),r.isInside());return r.free(),e},t}();i()}catch(t){i(t)}}))},483:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{zH:()=>a,No:()=>s,cu:()=>c});var n=e(8461),o=t([n]);n=(o.then?(await o)():o)[0];var a=function(){function t(t,r){this.origin=t,this.dir=r}return t.prototype.pointAt=function(t){return{x:this.origin.x+this.dir.x*t,y:this.origin.y+this.dir.y*t}},t}(),s=function(){function t(t,r,e){this.colliderHandle=t,this.toi=r,this.normal=e}return t.fromRaw=function(r){if(!r)return null;var e=new t(r.colliderHandle(),r.toi(),n.ut.fromRaw(r.normal()));return r.free(),e},t}(),c=function(){function t(t,r){this.colliderHandle=t,this.toi=r}return t.fromRaw=function(r){if(!r)return null;var e=new t(r.colliderHandle(),r.toi());return r.free(),e},t}();i()}catch(t){i(t)}}))},3810:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{DY:()=>n,ec:()=>c,jv:()=>p,iA:()=>l,sw:()=>u,XX:()=>h,CJ:()=>d,$R:()=>_,aH:()=>w,az:()=>f,to:()=>y,DM:()=>b,f4:()=>g});var n,o=e(8461),a=e(5991),s=t([a,o]);[a,o]=s.then?(await s)():s,function(t){t[t.Ball=0]="Ball",t[t.Cuboid=1]="Cuboid",t[t.Capsule=2]="Capsule",t[t.Segment=3]="Segment",t[t.Polyline=4]="Polyline",t[t.Triangle=5]="Triangle",t[t.TriMesh=6]="TriMesh",t[t.HeightField=7]="HeightField",t[t.ConvexPolygon=9]="ConvexPolygon",t[t.RoundCuboid=10]="RoundCuboid",t[t.RoundTriangle=11]="RoundTriangle",t[t.RoundConvexPolygon=12]="RoundConvexPolygon"}(n||(n={}));var c=function(){function t(t){this.radius=t}return t.prototype.intoRaw=function(){return a.X7.ball(this.radius)},t}(),p=function(){function t(t,r){this.halfExtents=o.ut.new(t,r)}return t.prototype.intoRaw=function(){return a.X7.cuboid(this.halfExtents.x,this.halfExtents.y)},t}(),l=function(){function t(t,r,e){this.halfExtents=o.ut.new(t,r),this.borderRadius=e}return t.prototype.intoRaw=function(){return a.X7.roundCuboid(this.halfExtents.x,this.halfExtents.y,this.borderRadius)},t}(),u=function(){function t(t,r){this.halfHeight=t,this.radius=r}return t.prototype.intoRaw=function(){return a.X7.capsule(this.halfHeight,this.radius)},t}(),h=function(){function t(t,r){this.a=t,this.b=r}return t.prototype.intoRaw=function(){var t=o.ut.intoRaw(this.a),r=o.ut.intoRaw(this.b),e=a.X7.segment(t,r);return t.free(),r.free(),e},t}(),d=function(){function t(t,r,e){this.a=t,this.b=r,this.c=e}return t.prototype.intoRaw=function(){var t=o.ut.intoRaw(this.a),r=o.ut.intoRaw(this.b),e=o.ut.intoRaw(this.c),i=a.X7.triangle(t,r,e);return t.free(),r.free(),e.free(),i},t}(),_=function(){function t(t,r,e,i){this.a=t,this.b=r,this.c=e,this.borderRadius=i}return t.prototype.intoRaw=function(){var t=o.ut.intoRaw(this.a),r=o.ut.intoRaw(this.b),e=o.ut.intoRaw(this.c),i=a.X7.roundTriangle(t,r,e,this.borderRadius);return t.free(),r.free(),e.free(),i},t}(),w=function(){function t(t,r){this.vertices=t,this.indices=r||new Uint32Array(0)}return t.prototype.intoRaw=function(){return a.X7.polyline(this.vertices,this.indices)},t}(),f=function(){function t(t,r){this.vertices=t,this.indices=r}return t.prototype.intoRaw=function(){return a.X7.trimesh(this.vertices,this.indices)},t}(),y=function(){function t(t,r){this.vertices=t,this.skipConvexHullComputation=!!r}return t.prototype.intoRaw=function(){return this.skipConvexHullComputation?a.X7.convexPolyline(this.vertices):a.X7.convexHull(this.vertices)},t}(),b=function(){function t(t,r,e){this.vertices=t,this.borderRadius=r,this.skipConvexHullComputation=!!e}return t.prototype.intoRaw=function(){return this.skipConvexHullComputation?a.X7.roundConvexPolyline(this.vertices,this.borderRadius):a.X7.roundConvexHull(this.vertices,this.borderRadius)},t}(),g=function(){function t(t,r){this.heights=t,this.scale=r}return t.prototype.intoRaw=function(){var t=o.ut.intoRaw(this.scale),r=a.X7.heightfield(this.heights,t);return t.free(),r},t}();i()}catch(t){i(t)}}))},3204:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{m:()=>a});var n=e(8461),o=t([n]);n=(o.then?(await o)():o)[0];var a=function(){function t(t,r,e,i,n,o){this.colliderHandle=t,this.toi=r,this.witness1=e,this.witness2=i,this.normal1=n,this.normal2=o}return t.fromRaw=function(r){if(!r)return null;var e=new t(r.colliderHandle(),r.toi(),n.ut.fromRaw(r.witness1()),n.ut.fromRaw(r.witness2()),n.ut.fromRaw(r.normal1()),n.ut.fromRaw(r.normal2()));return r.free(),e},t}();i()}catch(t){i(t)}}))},8461:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{FM:()=>a,ut:()=>s,T3:()=>c});var n=e(5991),o=t([n]);n=(o.then?(await o)():o)[0];var a=function(t,r){this.x=t,this.y=r},s=function(){function t(){}return t.new=function(t,r){return new a(t,r)},t.zeros=function(){return t.new(0,0)},t.fromRaw=function(r){if(!r)return null;var e=t.new(r.x,r.y);return r.free(),e},t.intoRaw=function(t){return new n.WF(t.x,t.y)},t}(),c=function(){function t(){}return t.identity=function(){return 0},t.fromRaw=function(t){if(!t)return null;var r=t.angle;return t.free(),r},t.intoRaw=function(t){return n.$Z.fromAngle(t)},t}();i()}catch(t){i(t)}}))},5023:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{M:()=>n,N:()=>s});var n,o=e(5991),a=t([o]);o=(a.then?(await a)():a)[0],function(t){t[t.INTERSECTION_EVENTS=1]="INTERSECTION_EVENTS",t[t.CONTACT_EVENTS=2]="CONTACT_EVENTS"}(n||(n={}));var s=function(){function t(t,r){this.raw=r||new o.we(t)}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.drainContactEvents=function(t){this.raw.drainContactEvents(t)},t.prototype.drainIntersectionEvents=function(t){this.raw.drainIntersectionEvents(t)},t.prototype.clear=function(){this.raw.clear()},t}();i()}catch(t){i(t)}}))},2069:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{q3:()=>n.q,DJ:()=>o.D,y9:()=>a.y,Md:()=>s.M,NH:()=>s.N,iX:()=>c.i,Nv:()=>c.N});var n=e(5088),o=e(4288),a=e(6447),s=e(5023),c=e(7021),p=t([n,o,a,s]);[n,o,a,s]=p.then?(await p)():p,i()}catch(t){i(t)}}))},7021:(t,r,e)=>{var i,n;e.d(r,{i:()=>i,N:()=>n}),function(t){t[t.FILTER_CONTACT_PAIRS=1]="FILTER_CONTACT_PAIRS",t[t.FILTER_INTERSECTION_PAIRS=2]="FILTER_INTERSECTION_PAIRS"}(i||(i={})),function(t){t[t.EMPTY=0]="EMPTY",t[t.COMPUTE_IMPULSE=1]="COMPUTE_IMPULSE"}(n||(n={}))},4288:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{D:()=>s});var n=e(5991),o=e(8461),a=t([n,o]);[n,o]=a.then?(await a)():a;var s=function(){function t(t){this.raw=t||new n._q}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.step=function(t,r,e,i,n,a,s,c,p,l,u){var h=o.ut.intoRaw(t);l?this.raw.stepWithEvents(h,r.raw,e.raw,i.raw,n.raw,a.raw,s.raw,c.raw,p.raw,l.raw,u,u?u.filterContactPair:null,u?u.filterIntersectionPair:null):this.raw.step(h,r.raw,e.raw,i.raw,n.raw,a.raw,s.raw,c.raw,p.raw),h.free()},t}();i()}catch(t){i(t)}}))},3796:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{V:()=>l});var n=e(5991),o=e(483),a=e(832),s=e(3204),c=e(8461),p=t([n,c,o,a,s]);[n,c,o,a,s]=p.then?(await p)():p;var l=function(){function t(t){this.raw=t||new n.nv}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.update=function(t,r,e){this.raw.update(t.raw,r.raw,e.raw)},t.prototype.castRay=function(t,r,e,i,n){var a=c.ut.intoRaw(r.origin),s=c.ut.intoRaw(r.dir),p=o.cu.fromRaw(this.raw.castRay(t.raw,a,s,e,i,n));return a.free(),s.free(),p},t.prototype.castRayAndGetNormal=function(t,r,e,i,n){var a=c.ut.intoRaw(r.origin),s=c.ut.intoRaw(r.dir),p=o.No.fromRaw(this.raw.castRayAndGetNormal(t.raw,a,s,e,i,n));return a.free(),s.free(),p},t.prototype.intersectionsWithRay=function(t,r,e,i,n,a){var s=c.ut.intoRaw(r.origin),p=c.ut.intoRaw(r.dir);this.raw.intersectionsWithRay(t.raw,s,p,e,i,n,(function(t){return a(o.No.fromRaw(t))})),s.free(),p.free()},t.prototype.intersectionWithShape=function(t,r,e,i,n){var o=c.ut.intoRaw(r),a=c.T3.intoRaw(e),s=i.intoRaw(),p=this.raw.intersectionWithShape(t.raw,o,a,s,n);return o.free(),a.free(),s.free(),p},t.prototype.projectPoint=function(t,r,e,i){var n=c.ut.intoRaw(r),o=a.V.fromRaw(this.raw.projectPoint(t.raw,n,e,i));return n.free(),o},t.prototype.intersectionsWithPoint=function(t,r,e,i){var n=c.ut.intoRaw(r);this.raw.intersectionsWithPoint(t.raw,n,e,i),n.free()},t.prototype.castShape=function(t,r,e,i,n,o,a){var p=c.ut.intoRaw(r),l=c.T3.intoRaw(e),u=c.ut.intoRaw(i),h=n.intoRaw(),d=s.m.fromRaw(this.raw.castShape(t.raw,p,l,u,h,o,a));return p.free(),l.free(),u.free(),h.free(),d},t.prototype.intersectionsWithShape=function(t,r,e,i,n,o){var a=c.ut.intoRaw(r),s=c.T3.intoRaw(e),p=i.intoRaw();this.raw.intersectionsWithShape(t.raw,a,s,p,n,o),a.free(),s.free(),p.free()},t.prototype.collidersWithAabbIntersectingAabb=function(t,r,e){var i=c.ut.intoRaw(t),n=c.ut.intoRaw(r);this.raw.collidersWithAabbIntersectingAabb(i,n,e),i.free(),n.free()},t}();i()}catch(t){i(t)}}))},6447:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{y:()=>c});var n=e(5991),o=e(8461),a=e(5088),s=t([n,o,a]);[n,o,a]=s.then?(await s)():s;var c=function(){function t(t){this.raw=t||new n.w0}return t.prototype.free=function(){this.raw.free(),this.raw=void 0},t.prototype.serializeAll=function(t,r,e,i,n,a,s,c){var p=o.ut.intoRaw(t),l=this.raw.serializeAll(p,r.raw,e.raw,i.raw,n.raw,a.raw,s.raw,c.raw);return p.free(),l},t.prototype.deserializeAll=function(t){return a.q.fromRaw(this.raw.deserializeAll(t))},t}();i()}catch(t){i(t)}}))},5088:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.d(r,{q:()=>y});var n=e(3717),o=e(9179),a=e(2156),s=e(8597),c=e(4563),p=e(5164),l=e(4824),u=e(3721),h=e(8461),d=e(4288),_=e(3796),w=e(6447),f=t([s,c,n,o,p,a,l,u,_,d,w,h]);[s,c,n,o,p,a,l,u,_,d,w,h]=f.then?(await f)():f;var y=function(){function t(t,r,e,i,h,f,y,b,g,v,m,S){this.gravity=t,this.integrationParameters=new s.R(r),this.islands=new c.y(e),this.broadPhase=new n.N(i),this.narrowPhase=new o.L(h),this.bodies=new p.r(f),this.colliders=new a.z(y),this.joints=new l.N(b),this.ccdSolver=new u.K(g),this.queryPipeline=new _.V(v),this.physicsPipeline=new d.D(m),this.serializationPipeline=new w.y(S)}return t.prototype.free=function(){this.integrationParameters.free(),this.islands.free(),this.broadPhase.free(),this.narrowPhase.free(),this.bodies.free(),this.colliders.free(),this.joints.free(),this.ccdSolver.free(),this.queryPipeline.free(),this.physicsPipeline.free(),this.serializationPipeline.free(),this.integrationParameters=void 0,this.islands=void 0,this.broadPhase=void 0,this.narrowPhase=void 0,this.bodies=void 0,this.colliders=void 0,this.ccdSolver=void 0,this.joints=void 0,this.queryPipeline=void 0,this.physicsPipeline=void 0,this.serializationPipeline=void 0},t.fromRaw=function(r){return r?new t(h.ut.fromRaw(r.takeGravity()),r.takeIntegrationParameters(),r.takeIslandManager(),r.takeBroadPhase(),r.takeNarrowPhase(),r.takeBodies(),r.takeColliders(),r.takeJoints()):null},t.prototype.takeSnapshot=function(){return this.serializationPipeline.serializeAll(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.joints)},t.restoreSnapshot=function(t){return(new w.y).deserializeAll(t)},t.prototype.step=function(t,r){this.physicsPipeline.step(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.joints,this.ccdSolver,t,r),this.queryPipeline.update(this.islands,this.bodies,this.colliders)},Object.defineProperty(t.prototype,"timestep",{get:function(){return this.integrationParameters.dt},set:function(t){this.integrationParameters.dt=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxVelocityIterations",{get:function(){return this.integrationParameters.maxVelocityIterations},set:function(t){this.integrationParameters.maxVelocityIterations=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxPositionIterations",{get:function(){return this.integrationParameters.maxPositionIterations},set:function(t){this.integrationParameters.maxPositionIterations=t},enumerable:!1,configurable:!0}),t.prototype.createRigidBody=function(t){return this.bodies.get(this.bodies.createRigidBody(t))},t.prototype.createCollider=function(t,r){return this.colliders.get(this.colliders.createCollider(this.bodies,t,r))},t.prototype.createJoint=function(t,r,e){return this.joints.get(this.joints.createJoint(this.bodies,t,r.handle,e.handle))},t.prototype.getRigidBody=function(t){return this.bodies.get(t)},t.prototype.getCollider=function(t){return this.colliders.get(t)},t.prototype.getJoint=function(t){return this.joints.get(t)},t.prototype.removeRigidBody=function(t){this.bodies.remove(t.handle,this.islands,this.colliders,this.joints)},t.prototype.removeCollider=function(t,r){this.colliders.remove(t.handle,this.islands,this.bodies,r)},t.prototype.removeJoint=function(t,r){this.joints.remove(t.handle,this.islands,this.bodies,r)},t.prototype.forEachCollider=function(t){this.colliders.forEachCollider(t)},t.prototype.forEachColliderHandle=function(t){this.colliders.forEachColliderHandle(t)},t.prototype.forEachRigidBody=function(t){this.bodies.forEachRigidBody(t)},t.prototype.forEachRigidBodyHandle=function(t){this.bodies.forEachRigidBodyHandle(t)},t.prototype.forEachActiveRigidBody=function(t){this.bodies.forEachActiveRigidBody(this.islands,t)},t.prototype.forEachActiveRigidBodyHandle=function(t){this.islands.forEachActiveRigidBodyHandle(t)},t.prototype.castRay=function(t,r,e,i){return this.queryPipeline.castRay(this.colliders,t,r,e,i)},t.prototype.castRayAndGetNormal=function(t,r,e,i){return this.queryPipeline.castRayAndGetNormal(this.colliders,t,r,e,i)},t.prototype.intersectionsWithRay=function(t,r,e,i,n){this.queryPipeline.intersectionsWithRay(this.colliders,t,r,e,i,n)},t.prototype.intersectionWithShape=function(t,r,e,i){return this.queryPipeline.intersectionWithShape(this.colliders,t,r,e,i)},t.prototype.projectPoint=function(t,r,e){return this.queryPipeline.projectPoint(this.colliders,t,r,e)},t.prototype.intersectionsWithPoint=function(t,r,e){this.queryPipeline.intersectionsWithPoint(this.colliders,t,r,e)},t.prototype.castShape=function(t,r,e,i,n,o){return this.queryPipeline.castShape(this.colliders,t,r,e,i,n,o)},t.prototype.intersectionsWithShape=function(t,r,e,i,n){this.queryPipeline.intersectionsWithShape(this.colliders,t,r,e,i,n)},t.prototype.collidersWithAabbIntersectingAabb=function(t,r,e){this.queryPipeline.collidersWithAabbIntersectingAabb(t,r,e)},t.prototype.contactsWith=function(t,r){this.narrowPhase.contactsWith(t,r)},t.prototype.intersectionsWith=function(t,r){this.narrowPhase.intersectionsWith(t,r)},t.prototype.contactPair=function(t,r,e){this.narrowPhase.contactPair(t,r,e)},t.prototype.intersectionPair=function(t,r){return this.narrowPhase.intersectionPair(t,r)},t}();i()}catch(t){i(t)}}))},8234:(t,r,e)=>{e.a(t,(async(t,i)=>{try{e.r(r),e.d(r,{ActiveCollisionTypes:()=>n.ActiveCollisionTypes,ActiveEvents:()=>n.ActiveEvents,ActiveHooks:()=>n.ActiveHooks,Ball:()=>n.Ball,BallJoint:()=>n.BallJoint,BroadPhase:()=>n.BroadPhase,CCDSolver:()=>n.CCDSolver,Capsule:()=>n.Capsule,CoefficientCombineRule:()=>n.CoefficientCombineRule,Collider:()=>n.Collider,ColliderDesc:()=>n.ColliderDesc,ColliderSet:()=>n.ColliderSet,ConvexPolygon:()=>n.ConvexPolygon,Cuboid:()=>n.Cuboid,EventQueue:()=>n.EventQueue,FixedJoint:()=>n.FixedJoint,Heightfield:()=>n.Heightfield,IntegrationParameters:()=>n.IntegrationParameters,IslandManager:()=>n.IslandManager,Joint:()=>n.Joint,JointParams:()=>n.JointParams,JointSet:()=>n.JointSet,JointType:()=>n.JointType,NarrowPhase:()=>n.NarrowPhase,PhysicsPipeline:()=>n.PhysicsPipeline,PointColliderProjection:()=>n.PointColliderProjection,Polyline:()=>n.Polyline,PrismaticJoint:()=>n.PrismaticJoint,Ray:()=>n.Ray,RayColliderIntersection:()=>n.RayColliderIntersection,RayColliderToi:()=>n.RayColliderToi,RigidBody:()=>n.RigidBody,RigidBodyDesc:()=>n.RigidBodyDesc,RigidBodySet:()=>n.RigidBodySet,RigidBodyType:()=>n.RigidBodyType,RotationOps:()=>n.RotationOps,RoundConvexPolygon:()=>n.RoundConvexPolygon,RoundCuboid:()=>n.RoundCuboid,RoundTriangle:()=>n.RoundTriangle,Segment:()=>n.Segment,SerializationPipeline:()=>n.SerializationPipeline,ShapeColliderTOI:()=>n.ShapeColliderTOI,ShapeType:()=>n.ShapeType,SolverFlags:()=>n.SolverFlags,SpringModel:()=>n.SpringModel,TempContactManifold:()=>n.TempContactManifold,TriMesh:()=>n.TriMesh,Triangle:()=>n.Triangle,UnitJoint:()=>n.UnitJoint,Vector2:()=>n.Vector2,VectorOps:()=>n.VectorOps,World:()=>n.World,version:()=>n.version,default:()=>a});var n=e(3903),o=t([n]);const a=n=(o.then?(await o)():o)[0];i()}catch(t){i(t)}}))},5991:(t,r,e)=>{e.a(t,(async(i,n)=>{try{e.d(r,{i8:()=>A,FU:()=>O,LE:()=>L,IQ:()=>F,we:()=>J,zu:()=>q,Is:()=>V,of:()=>K,Xu:()=>X,uU:()=>U,_q:()=>Y,nv:()=>Q,fY:()=>rt,$Z:()=>et,w0:()=>it,X7:()=>nt,WF:()=>at,ug:()=>st,pT:()=>ct,Ne:()=>pt,h4:()=>lt,NQ:()=>ut,Ex:()=>ht,nG:()=>dt,A$:()=>_t,m_:()=>wt,xL:()=>ft,ek:()=>yt,JX:()=>bt,Ld:()=>gt,Ww:()=>vt,QO:()=>mt,PL:()=>St,cG:()=>Rt,C:()=>Ct,XP:()=>Pt,jx:()=>At,g4:()=>Tt,_O:()=>jt,Cr:()=>xt,M1:()=>Et,HT:()=>It,RA:()=>Mt,Or:()=>Ht,oH:()=>Bt});var o=e(8500);t=e.hmd(t);var a=i([o]);o=(a.then?(await a)():a)[0];const s=new Array(32).fill(void 0);function c(t){return s[t]}s.push(void 0,null,!0,!1);let p=s.length;function l(t){t<36||(s[t]=p,p=t)}function u(t){const r=c(t);return l(t),r}function h(t){p===s.length&&s.push(s.length+1);const r=p;return p=s[r],s[r]=t,r}let d=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});d.decode();let _=null;function w(){return null!==_&&_.buffer===o.memory.buffer||(_=new Uint8Array(o.memory.buffer)),_}function f(t,r){return d.decode(w().subarray(t,t+r))}function y(t){return null==t}let b=null,g=null;function v(){return null!==g&&g.buffer===o.memory.buffer||(g=new Int32Array(o.memory.buffer)),g}function m(t){const r=typeof t;if("number"==r||"boolean"==r||null==t)return`${t}`;if("string"==r)return`"${t}"`;if("symbol"==r){const r=t.description;return null==r?"Symbol":`Symbol(${r})`}if("function"==r){const r=t.name;return"string"==typeof r&&r.length>0?`Function(${r})`:"Function"}if(Array.isArray(t)){const r=t.length;let e="[";r>0&&(e+=m(t[0]));for(let i=1;i<r;i++)e+=", "+m(t[i]);return e+="]",e}const e=/\[object ([^\]]+)\]/.exec(toString.call(t));let i;if(!(e.length>1))return toString.call(t);if(i=e[1],"Object"==i)try{return"Object("+JSON.stringify(t)+")"}catch(t){return"Object"}return t instanceof Error?`${t.name}: ${t.message}\n${t.stack}`:i}let S=0,R=new("undefined"==typeof TextEncoder?(0,t.require)("util").TextEncoder:TextEncoder)("utf-8");const C="function"==typeof R.encodeInto?function(t,r){return R.encodeInto(t,r)}:function(t,r){const e=R.encode(t);return r.set(e),{read:t.length,written:e.length}};function P(t,r,e){if(void 0===e){const e=R.encode(t),i=r(e.length);return w().subarray(i,i+e.length).set(e),S=e.length,i}let i=t.length,n=r(i);const o=w();let a=0;for(;a<i;a++){const r=t.charCodeAt(a);if(r>127)break;o[n+a]=r}if(a!==i){0!==a&&(t=t.slice(a)),n=e(n,i,i=a+3*t.length);const r=w().subarray(n+a,n+i);a+=C(t,r).written}return S=a,n}function A(){try{const e=o.__wbindgen_add_to_stack_pointer(-16);o.version(e);var t=v()[e/4+0],r=v()[e/4+1];return f(t,r)}finally{o.__wbindgen_add_to_stack_pointer(16),o.__wbindgen_free(t,r)}}let T=32;function j(t){if(1==T)throw new Error("out of js stack");return s[--T]=t,T}function x(t,r){if(!(t instanceof r))throw new Error(`expected instance of ${r.name}`);return t.ptr}let E=null;function I(){return null!==E&&E.buffer===o.memory.buffer||(E=new Float32Array(o.memory.buffer)),E}function M(t,r){return I().subarray(t/4,t/4+r)}let H=null;function B(){return null!==H&&H.buffer===o.memory.buffer||(H=new Uint32Array(o.memory.buffer)),H}function D(t,r){const e=r(4*t.length);return I().set(t,e/4),S=t.length,e}function N(t,r){const e=r(4*t.length);return B().set(t,e/4),S=t.length,e}function k(t,r){try{return t.apply(this,r)}catch(t){o.__wbindgen_exn_store(h(t))}}Object.freeze({Ball:0,0:"Ball",Fixed:1,1:"Fixed",Prismatic:2,2:"Prismatic",Revolute:3,3:"Revolute"}),Object.freeze({Disabled:0,0:"Disabled",VelocityBased:1,1:"VelocityBased",AccelerationBased:2,2:"AccelerationBased",ForceBased:3,3:"ForceBased"}),Object.freeze({Dynamic:0,0:"Dynamic",Static:1,1:"Static",KinematicPositionBased:2,2:"KinematicPositionBased",KinematicVelocityBased:3,3:"KinematicVelocityBased"}),Object.freeze({Ball:0,0:"Ball",Cuboid:1,1:"Cuboid",Capsule:2,2:"Capsule",Segment:3,3:"Segment",Polyline:4,4:"Polyline",Triangle:5,5:"Triangle",TriMesh:6,6:"TriMesh",HeightField:7,7:"HeightField",Compound:8,8:"Compound",ConvexPolygon:9,9:"ConvexPolygon",RoundCuboid:10,10:"RoundCuboid",RoundTriangle:11,11:"RoundTriangle",RoundConvexPolygon:12,12:"RoundConvexPolygon"});class O{static __wrap(t){const r=Object.create(O.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawbroadphase_free(t)}constructor(){var t=o.rawbroadphase_new();return O.__wrap(t)}}class L{static __wrap(t){const r=Object.create(L.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawccdsolver_free(t)}constructor(){var t=o.rawccdsolver_new();return L.__wrap(t)}}class F{static __wrap(t){const r=Object.create(F.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawcolliderset_free(t)}coTranslation(t){var r=o.rawcolliderset_coTranslation(this.ptr,t);return at.__wrap(r)}coRotation(t){var r=o.rawcolliderset_coRotation(this.ptr,t);return et.__wrap(r)}coSetTranslation(t,r,e){o.rawcolliderset_coSetTranslation(this.ptr,t,r,e)}coSetTranslationWrtParent(t,r,e){o.rawcolliderset_coSetTranslationWrtParent(this.ptr,t,r,e)}coSetRotation(t,r){o.rawcolliderset_coSetRotation(this.ptr,t,r)}coSetRotationWrtParent(t,r){o.rawcolliderset_coSetRotationWrtParent(this.ptr,t,r)}coIsSensor(t){return 0!==o.rawcolliderset_coIsSensor(this.ptr,t)}coShapeType(t){return o.rawcolliderset_coShapeType(this.ptr,t)>>>0}coHalfExtents(t){var r=o.rawcolliderset_coHalfExtents(this.ptr,t);return 0===r?void 0:at.__wrap(r)}coRadius(t){try{const i=o.__wbindgen_add_to_stack_pointer(-16);o.rawcolliderset_coRadius(i,this.ptr,t);var r=v()[i/4+0],e=I()[i/4+1];return 0===r?void 0:e}finally{o.__wbindgen_add_to_stack_pointer(16)}}coHalfHeight(t){try{const i=o.__wbindgen_add_to_stack_pointer(-16);o.rawcolliderset_coHalfHeight(i,this.ptr,t);var r=v()[i/4+0],e=I()[i/4+1];return 0===r?void 0:e}finally{o.__wbindgen_add_to_stack_pointer(16)}}coRoundRadius(t){try{const i=o.__wbindgen_add_to_stack_pointer(-16);o.rawcolliderset_coRoundRadius(i,this.ptr,t);var r=v()[i/4+0],e=I()[i/4+1];return 0===r?void 0:e}finally{o.__wbindgen_add_to_stack_pointer(16)}}coVertices(t){try{const i=o.__wbindgen_add_to_stack_pointer(-16);o.rawcolliderset_coVertices(i,this.ptr,t);var r=v()[i/4+0],e=v()[i/4+1];let n;return 0!==r&&(n=M(r,e).slice(),o.__wbindgen_free(r,4*e)),n}finally{o.__wbindgen_add_to_stack_pointer(16)}}coIndices(t){try{const a=o.__wbindgen_add_to_stack_pointer(-16);o.rawcolliderset_coIndices(a,this.ptr,t);var r=v()[a/4+0],e=v()[a/4+1];let s;return 0!==r&&(s=(i=r,n=e,B().subarray(i/4,i/4+n)).slice(),o.__wbindgen_free(r,4*e)),s}finally{o.__wbindgen_add_to_stack_pointer(16)}var i,n}coHeightfieldHeights(t){try{const i=o.__wbindgen_add_to_stack_pointer(-16);o.rawcolliderset_coHeightfieldHeights(i,this.ptr,t);var r=v()[i/4+0],e=v()[i/4+1];let n;return 0!==r&&(n=M(r,e).slice(),o.__wbindgen_free(r,4*e)),n}finally{o.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldScale(t){var r=o.rawcolliderset_coHeightfieldScale(this.ptr,t);return 0===r?void 0:at.__wrap(r)}coParent(t){return o.rawcolliderset_coParent(this.ptr,t)>>>0}coFriction(t){return o.rawcolliderset_coFriction(this.ptr,t)}coDensity(t){try{const i=o.__wbindgen_add_to_stack_pointer(-16);o.rawcolliderset_coDensity(i,this.ptr,t);var r=v()[i/4+0],e=I()[i/4+1];return 0===r?void 0:e}finally{o.__wbindgen_add_to_stack_pointer(16)}}coCollisionGroups(t){return o.rawcolliderset_coCollisionGroups(this.ptr,t)>>>0}coSolverGroups(t){return o.rawcolliderset_coSolverGroups(this.ptr,t)>>>0}coActiveHooks(t){return o.rawcolliderset_coActiveHooks(this.ptr,t)>>>0}coActiveCollisionTypes(t){return o.rawcolliderset_coActiveCollisionTypes(this.ptr,t)}coActiveEvents(t){return o.rawcolliderset_coActiveEvents(this.ptr,t)>>>0}coSetSensor(t,r){o.rawcolliderset_coSetSensor(this.ptr,t,r)}coSetRestitution(t,r){o.rawcolliderset_coSetRestitution(this.ptr,t,r)}coSetFriction(t,r){o.rawcolliderset_coSetFriction(this.ptr,t,r)}coFrictionCombineRule(t){return o.rawcolliderset_coFrictionCombineRule(this.ptr,t)>>>0}coSetFrictionCombineRule(t,r){o.rawcolliderset_coSetFrictionCombineRule(this.ptr,t,r)}coRestitutionCombineRule(t){return o.rawcolliderset_coRestitutionCombineRule(this.ptr,t)>>>0}coSetRestitutionCombineRule(t,r){o.rawcolliderset_coSetRestitutionCombineRule(this.ptr,t,r)}coSetCollisionGroups(t,r){o.rawcolliderset_coSetCollisionGroups(this.ptr,t,r)}coSetSolverGroups(t,r){o.rawcolliderset_coSetSolverGroups(this.ptr,t,r)}coSetActiveHooks(t,r){o.rawcolliderset_coSetActiveHooks(this.ptr,t,r)}coSetActiveEvents(t,r){o.rawcolliderset_coSetActiveEvents(this.ptr,t,r)}coSetActiveCollisionTypes(t,r){o.rawcolliderset_coSetActiveCollisionTypes(this.ptr,t,r)}coSetShape(t,r){x(r,nt);var e=r.ptr;r.ptr=0,o.rawcolliderset_coSetShape(this.ptr,t,e)}constructor(){var t=o.rawcolliderset_new();return F.__wrap(t)}len(){return o.rawcolliderset_len(this.ptr)>>>0}contains(t){return 0!==o.rawcolliderset_contains(this.ptr,t)}createCollider(t,r,e,i,n,a,s,c,p,l,u,h,d,_,w,f,y,b,g,m,S){try{const P=o.__wbindgen_add_to_stack_pointer(-16);x(t,nt),x(r,at),x(e,et),x(a,at),x(S,rt),o.rawcolliderset_createCollider(P,this.ptr,t.ptr,r.ptr,e.ptr,i,n,a.ptr,s,c,p,l,u,h,d,_,w,f,y,b,g,m,S.ptr);var R=v()[P/4+0],C=v()[P/4+1];return 0===R?void 0:C>>>0}finally{o.__wbindgen_add_to_stack_pointer(16)}}remove(t,r,e,i){x(r,V),x(e,rt),o.rawcolliderset_remove(this.ptr,t,r.ptr,e.ptr,i)}isHandleValid(t){return 0!==o.rawcolliderset_contains(this.ptr,t)}forEachColliderHandle(t){try{o.rawcolliderset_forEachColliderHandle(this.ptr,j(t))}finally{s[T++]=void 0}}}class z{static __wrap(t){const r=Object.create(z.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawcontactmanifold_free(t)}normal(){var t=o.rawcontactmanifold_normal(this.ptr);return at.__wrap(t)}local_n1(){var t=o.rawcontactmanifold_local_n1(this.ptr);return at.__wrap(t)}local_n2(){var t=o.rawcontactmanifold_local_n1(this.ptr);return at.__wrap(t)}subshape1(){return o.rawcontactmanifold_subshape1(this.ptr)>>>0}subshape2(){return o.rawcontactmanifold_subshape1(this.ptr)>>>0}num_contacts(){return o.rawcontactmanifold_num_contacts(this.ptr)>>>0}contact_local_p1(t){var r=o.rawcontactmanifold_contact_local_p1(this.ptr,t);return 0===r?void 0:at.__wrap(r)}contact_local_p2(t){var r=o.rawcontactmanifold_contact_local_p1(this.ptr,t);return 0===r?void 0:at.__wrap(r)}contact_dist(t){return o.rawcontactmanifold_contact_dist(this.ptr,t)}contact_fid1(t){return o.rawcontactmanifold_contact_fid1(this.ptr,t)>>>0}contact_fid2(t){return o.rawcontactmanifold_contact_fid2(this.ptr,t)>>>0}contact_impulse(t){return o.rawcontactmanifold_contact_impulse(this.ptr,t)}contact_tangent_impulse(t){return o.rawcontactmanifold_contact_tangent_impulse(this.ptr,t)}num_solver_contacts(){return o.rawcontactmanifold_num_solver_contacts(this.ptr)>>>0}solver_contact_point(t){var r=o.rawcontactmanifold_solver_contact_point(this.ptr,t);return 0===r?void 0:at.__wrap(r)}solver_contact_dist(t){return o.rawcontactmanifold_solver_contact_dist(this.ptr,t)}solver_contact_friction(t){return o.rawcontactmanifold_solver_contact_friction(this.ptr,t)}solver_contact_restitution(t){return o.rawcontactmanifold_solver_contact_restitution(this.ptr,t)}solver_contact_tangent_velocity(t){var r=o.rawcontactmanifold_solver_contact_tangent_velocity(this.ptr,t);return at.__wrap(r)}}class G{static __wrap(t){const r=Object.create(G.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawcontactpair_free(t)}collider1(){return o.rawcontactpair_collider1(this.ptr)>>>0}collider2(){return o.rawcontactpair_collider2(this.ptr)>>>0}numContactManifolds(){return o.rawcontactpair_numContactManifolds(this.ptr)>>>0}contactManifold(t){var r=o.rawcontactpair_contactManifold(this.ptr,t);return 0===r?void 0:z.__wrap(r)}}class W{static __wrap(t){const r=Object.create(W.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawdeserializedworld_free(t)}takeGravity(){var t=o.rawdeserializedworld_takeGravity(this.ptr);return 0===t?void 0:at.__wrap(t)}takeIntegrationParameters(){var t=o.rawdeserializedworld_takeIntegrationParameters(this.ptr);return 0===t?void 0:q.__wrap(t)}takeIslandManager(){var t=o.rawdeserializedworld_takeIslandManager(this.ptr);return 0===t?void 0:V.__wrap(t)}takeBroadPhase(){var t=o.rawdeserializedworld_takeBroadPhase(this.ptr);return 0===t?void 0:O.__wrap(t)}takeNarrowPhase(){var t=o.rawdeserializedworld_takeNarrowPhase(this.ptr);return 0===t?void 0:U.__wrap(t)}takeBodies(){var t=o.rawdeserializedworld_takeBodies(this.ptr);return 0===t?void 0:rt.__wrap(t)}takeColliders(){var t=o.rawdeserializedworld_takeColliders(this.ptr);return 0===t?void 0:F.__wrap(t)}takeJoints(){var t=o.rawdeserializedworld_takeJoints(this.ptr);return 0===t?void 0:X.__wrap(t)}}class J{static __wrap(t){const r=Object.create(J.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_raweventqueue_free(t)}constructor(t){var r=o.raweventqueue_new(t);return J.__wrap(r)}drainContactEvents(t){try{o.raweventqueue_drainContactEvents(this.ptr,j(t))}finally{s[T++]=void 0}}drainIntersectionEvents(t){try{o.raweventqueue_drainIntersectionEvents(this.ptr,j(t))}finally{s[T++]=void 0}}clear(){o.raweventqueue_clear(this.ptr)}}class q{static __wrap(t){const r=Object.create(q.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawintegrationparameters_free(t)}constructor(){var t=o.rawintegrationparameters_new();return q.__wrap(t)}get dt(){return o.rawintegrationparameters_dt(this.ptr)}get erp(){return o.rawintegrationparameters_erp(this.ptr)}get jointErp(){return o.rawintegrationparameters_jointErp(this.ptr)}get warmstartCoeff(){return o.rawintegrationparameters_warmstartCoeff(this.ptr)}get allowedLinearError(){return o.rawintegrationparameters_allowedLinearError(this.ptr)}get predictionDistance(){return o.rawintegrationparameters_predictionDistance(this.ptr)}get allowedAngularError(){return o.rawintegrationparameters_allowedAngularError(this.ptr)}get maxLinearCorrection(){return o.rawintegrationparameters_maxLinearCorrection(this.ptr)}get maxAngularCorrection(){return o.rawintegrationparameters_maxAngularCorrection(this.ptr)}get maxVelocityIterations(){return o.rawintegrationparameters_maxVelocityIterations(this.ptr)>>>0}get maxPositionIterations(){return o.rawintegrationparameters_maxPositionIterations(this.ptr)>>>0}get minIslandSize(){return o.rawintegrationparameters_minIslandSize(this.ptr)>>>0}get maxCcdSubsteps(){return o.rawintegrationparameters_maxCcdSubsteps(this.ptr)>>>0}set dt(t){o.rawintegrationparameters_set_dt(this.ptr,t)}set erp(t){o.rawintegrationparameters_set_erp(this.ptr,t)}set jointErp(t){o.rawintegrationparameters_set_jointErp(this.ptr,t)}set warmstartCoeff(t){o.rawintegrationparameters_set_warmstartCoeff(this.ptr,t)}set allowedLinearError(t){o.rawintegrationparameters_set_allowedLinearError(this.ptr,t)}set predictionDistance(t){o.rawintegrationparameters_set_predictionDistance(this.ptr,t)}set allowedAngularError(t){o.rawintegrationparameters_set_allowedAngularError(this.ptr,t)}set maxLinearCorrection(t){o.rawintegrationparameters_set_maxLinearCorrection(this.ptr,t)}set maxAngularCorrection(t){o.rawintegrationparameters_set_maxAngularCorrection(this.ptr,t)}set maxVelocityIterations(t){o.rawintegrationparameters_set_maxVelocityIterations(this.ptr,t)}set maxPositionIterations(t){o.rawintegrationparameters_set_maxPositionIterations(this.ptr,t)}set minIslandSize(t){o.rawintegrationparameters_set_minIslandSize(this.ptr,t)}set maxCcdSubsteps(t){o.rawintegrationparameters_set_maxCcdSubsteps(this.ptr,t)}}class V{static __wrap(t){const r=Object.create(V.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawislandmanager_free(t)}constructor(){var t=o.rawislandmanager_new();return V.__wrap(t)}forEachActiveRigidBodyHandle(t){try{o.rawislandmanager_forEachActiveRigidBodyHandle(this.ptr,j(t))}finally{s[T++]=void 0}}}class K{static __wrap(t){const r=Object.create(K.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawjointparams_free(t)}static ball(t,r){x(t,at),x(r,at);var e=o.rawjointparams_ball(t.ptr,r.ptr);return K.__wrap(e)}static prismatic(t,r,e,i,n,a,s){x(t,at),x(r,at),x(e,at),x(i,at);var c=o.rawjointparams_prismatic(t.ptr,r.ptr,e.ptr,i.ptr,n,a,s);return 0===c?void 0:K.__wrap(c)}static fixed(t,r,e,i){x(t,at),x(r,et),x(e,at),x(i,et);var n=o.rawjointparams_fixed(t.ptr,r.ptr,e.ptr,i.ptr);return K.__wrap(n)}}class X{static __wrap(t){const r=Object.create(X.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawjointset_free(t)}jointBodyHandle1(t){return o.rawjointset_jointBodyHandle1(this.ptr,t)>>>0}jointBodyHandle2(t){return o.rawjointset_jointBodyHandle2(this.ptr,t)>>>0}jointType(t){return o.rawjointset_jointType(this.ptr,t)>>>0}jointAnchor1(t){var r=o.rawjointset_jointAnchor1(this.ptr,t);return at.__wrap(r)}jointAnchor2(t){var r=o.rawjointset_jointAnchor2(this.ptr,t);return at.__wrap(r)}jointAxis1(t){var r=o.rawjointset_jointAxis1(this.ptr,t);return 0===r?void 0:at.__wrap(r)}jointAxis2(t){var r=o.rawjointset_jointAxis2(this.ptr,t);return 0===r?void 0:at.__wrap(r)}jointLimitsEnabled(t){return 0!==o.rawjointset_jointLimitsEnabled(this.ptr,t)}jointLimitsMin(t){return o.rawjointset_jointLimitsMin(this.ptr,t)}jointLimitsMax(t){return o.rawjointset_jointLimitsMax(this.ptr,t)}jointConfigureMotorModel(t,r){o.rawjointset_jointConfigureMotorModel(this.ptr,t,r)}jointConfigureUnitMotorVelocity(t,r,e){o.rawjointset_jointConfigureUnitMotorVelocity(this.ptr,t,r,e)}jointConfigureUnitMotorPosition(t,r,e,i){o.rawjointset_jointConfigureUnitMotorPosition(this.ptr,t,r,e,i)}jointConfigureUnitMotor(t,r,e,i,n){o.rawjointset_jointConfigureUnitMotor(this.ptr,t,r,e,i,n)}constructor(){var t=o.rawjointset_new();return X.__wrap(t)}createJoint(t,r,e,i){return x(t,rt),x(r,K),o.rawjointset_createJoint(this.ptr,t.ptr,r.ptr,e,i)>>>0}remove(t,r,e,i){x(r,V),x(e,rt),o.rawjointset_remove(this.ptr,t,r.ptr,e.ptr,i)}len(){return o.rawjointset_len(this.ptr)>>>0}contains(t){return 0!==o.rawjointset_contains(this.ptr,t)}forEachJointHandle(t){try{o.rawjointset_forEachJointHandle(this.ptr,j(t))}finally{s[T++]=void 0}}}class U{static __wrap(t){const r=Object.create(U.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawnarrowphase_free(t)}constructor(){var t=o.rawnarrowphase_new();return U.__wrap(t)}contacts_with(t,r){o.rawnarrowphase_contacts_with(this.ptr,t,h(r))}contact_pair(t,r){var e=o.rawnarrowphase_contact_pair(this.ptr,t,r);return 0===e?void 0:G.__wrap(e)}intersections_with(t,r){o.rawnarrowphase_intersections_with(this.ptr,t,h(r))}intersection_pair(t,r){return 0!==o.rawnarrowphase_intersection_pair(this.ptr,t,r)}}class Y{static __wrap(t){const r=Object.create(Y.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawphysicspipeline_free(t)}constructor(){var t=o.rawphysicspipeline_new();return Y.__wrap(t)}step(t,r,e,i,n,a,s,c,p){x(t,at),x(r,q),x(e,V),x(i,O),x(n,U),x(a,rt),x(s,F),x(c,X),x(p,L),o.rawphysicspipeline_step(this.ptr,t.ptr,r.ptr,e.ptr,i.ptr,n.ptr,a.ptr,s.ptr,c.ptr,p.ptr)}stepWithEvents(t,r,e,i,n,a,s,c,p,l,u,d,_){x(t,at),x(r,q),x(e,V),x(i,O),x(n,U),x(a,rt),x(s,F),x(c,X),x(p,L),x(l,J),o.rawphysicspipeline_stepWithEvents(this.ptr,t.ptr,r.ptr,e.ptr,i.ptr,n.ptr,a.ptr,s.ptr,c.ptr,p.ptr,l.ptr,h(u),h(d),h(_))}}class ${static __wrap(t){const r=Object.create($.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawpointcolliderprojection_free(t)}colliderHandle(){return o.rawpointcolliderprojection_colliderHandle(this.ptr)>>>0}point(){var t=o.rawpointcolliderprojection_point(this.ptr);return at.__wrap(t)}isInside(){return 0!==o.rawpointcolliderprojection_isInside(this.ptr)}}class Q{static __wrap(t){const r=Object.create(Q.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawquerypipeline_free(t)}constructor(){var t=o.rawquerypipeline_new();return Q.__wrap(t)}update(t,r,e){x(t,V),x(r,rt),x(e,F),o.rawquerypipeline_update(this.ptr,t.ptr,r.ptr,e.ptr)}castRay(t,r,e,i,n,a){x(t,F),x(r,at),x(e,at);var s=o.rawquerypipeline_castRay(this.ptr,t.ptr,r.ptr,e.ptr,i,n,a);return 0===s?void 0:tt.__wrap(s)}castRayAndGetNormal(t,r,e,i,n,a){x(t,F),x(r,at),x(e,at);var s=o.rawquerypipeline_castRayAndGetNormal(this.ptr,t.ptr,r.ptr,e.ptr,i,n,a);return 0===s?void 0:Z.__wrap(s)}intersectionsWithRay(t,r,e,i,n,a,c){try{x(t,F),x(r,at),x(e,at),o.rawquerypipeline_intersectionsWithRay(this.ptr,t.ptr,r.ptr,e.ptr,i,n,a,j(c))}finally{s[T++]=void 0}}intersectionWithShape(t,r,e,i,n){try{const c=o.__wbindgen_add_to_stack_pointer(-16);x(t,F),x(r,at),x(e,et),x(i,nt),o.rawquerypipeline_intersectionWithShape(c,this.ptr,t.ptr,r.ptr,e.ptr,i.ptr,n);var a=v()[c/4+0],s=v()[c/4+1];return 0===a?void 0:s>>>0}finally{o.__wbindgen_add_to_stack_pointer(16)}}projectPoint(t,r,e,i){x(t,F),x(r,at);var n=o.rawquerypipeline_projectPoint(this.ptr,t.ptr,r.ptr,e,i);return 0===n?void 0:$.__wrap(n)}intersectionsWithPoint(t,r,e,i){try{x(t,F),x(r,at),o.rawquerypipeline_intersectionsWithPoint(this.ptr,t.ptr,r.ptr,e,j(i))}finally{s[T++]=void 0}}castShape(t,r,e,i,n,a,s){x(t,F),x(r,at),x(e,et),x(i,at),x(n,nt);var c=o.rawquerypipeline_castShape(this.ptr,t.ptr,r.ptr,e.ptr,i.ptr,n.ptr,a,s);return 0===c?void 0:ot.__wrap(c)}intersectionsWithShape(t,r,e,i,n,a){try{x(t,F),x(r,at),x(e,et),x(i,nt),o.rawquerypipeline_intersectionsWithShape(this.ptr,t.ptr,r.ptr,e.ptr,i.ptr,n,j(a))}finally{s[T++]=void 0}}collidersWithAabbIntersectingAabb(t,r,e){try{x(t,at);var i=t.ptr;t.ptr=0,x(r,at);var n=r.ptr;r.ptr=0,o.rawquerypipeline_collidersWithAabbIntersectingAabb(this.ptr,i,n,j(e))}finally{s[T++]=void 0}}}class Z{static __wrap(t){const r=Object.create(Z.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawraycolliderintersection_free(t)}colliderHandle(){return o.rawpointcolliderprojection_colliderHandle(this.ptr)>>>0}normal(){var t=o.rawraycolliderintersection_normal(this.ptr);return at.__wrap(t)}toi(){return o.rawraycolliderintersection_toi(this.ptr)}}class tt{static __wrap(t){const r=Object.create(tt.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawraycollidertoi_free(t)}colliderHandle(){return o.rawpointcolliderprojection_colliderHandle(this.ptr)>>>0}toi(){return o.rawraycolliderintersection_toi(this.ptr)}}class rt{static __wrap(t){const r=Object.create(rt.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawrigidbodyset_free(t)}rbTranslation(t){var r=o.rawrigidbodyset_rbTranslation(this.ptr,t);return at.__wrap(r)}rbRotation(t){var r=o.rawrigidbodyset_rbRotation(this.ptr,t);return et.__wrap(r)}rbSleep(t){o.rawrigidbodyset_rbSleep(this.ptr,t)}rbIsSleeping(t){return 0!==o.rawrigidbodyset_rbIsSleeping(this.ptr,t)}rbIsMoving(t){return 0!==o.rawrigidbodyset_rbIsMoving(this.ptr,t)}rbNextTranslation(t){var r=o.rawrigidbodyset_rbNextTranslation(this.ptr,t);return at.__wrap(r)}rbNextRotation(t){var r=o.rawrigidbodyset_rbNextRotation(this.ptr,t);return et.__wrap(r)}rbSetTranslation(t,r,e,i){o.rawrigidbodyset_rbSetTranslation(this.ptr,t,r,e,i)}rbSetRotation(t,r,e){o.rawrigidbodyset_rbSetRotation(this.ptr,t,r,e)}rbSetLinvel(t,r,e){x(r,at),o.rawrigidbodyset_rbSetLinvel(this.ptr,t,r.ptr,e)}rbSetAngvel(t,r,e){o.rawrigidbodyset_rbSetAngvel(this.ptr,t,r,e)}rbSetNextKinematicTranslation(t,r,e){o.rawrigidbodyset_rbSetNextKinematicTranslation(this.ptr,t,r,e)}rbSetNextKinematicRotation(t,r){o.rawrigidbodyset_rbSetNextKinematicRotation(this.ptr,t,r)}rbLinvel(t){var r=o.rawrigidbodyset_rbLinvel(this.ptr,t);return at.__wrap(r)}rbAngvel(t){return o.rawrigidbodyset_rbAngvel(this.ptr,t)}rbLockTranslations(t,r,e){o.rawrigidbodyset_rbLockRotations(this.ptr,t,r,e)}rbLockRotations(t,r,e){o.rawrigidbodyset_rbLockRotations(this.ptr,t,r,e)}rbDominanceGroup(t){return o.rawrigidbodyset_rbDominanceGroup(this.ptr,t)}rbSetDominanceGroup(t,r){o.rawrigidbodyset_rbSetDominanceGroup(this.ptr,t,r)}rbEnableCcd(t,r){o.rawrigidbodyset_rbEnableCcd(this.ptr,t,r)}rbMass(t){return o.rawrigidbodyset_rbMass(this.ptr,t)}rbWakeUp(t){o.rawrigidbodyset_rbWakeUp(this.ptr,t)}rbIsCcdEnabled(t){return 0!==o.rawrigidbodyset_rbIsCcdEnabled(this.ptr,t)}rbNumColliders(t){return o.rawrigidbodyset_rbNumColliders(this.ptr,t)>>>0}rbCollider(t,r){return o.rawrigidbodyset_rbCollider(this.ptr,t,r)>>>0}rbBodyType(t){return o.rawrigidbodyset_rbBodyType(this.ptr,t)>>>0}rbIsStatic(t){return 0!==o.rawrigidbodyset_rbIsStatic(this.ptr,t)}rbIsKinematic(t){return 0!==o.rawrigidbodyset_rbIsKinematic(this.ptr,t)}rbIsDynamic(t){return 0!==o.rawrigidbodyset_rbIsDynamic(this.ptr,t)}rbLinearDamping(t){return o.rawrigidbodyset_rbLinearDamping(this.ptr,t)}rbAngularDamping(t){return o.rawrigidbodyset_rbAngularDamping(this.ptr,t)}rbSetLinearDamping(t,r){o.rawrigidbodyset_rbSetLinearDamping(this.ptr,t,r)}rbSetAngularDamping(t,r){o.rawrigidbodyset_rbSetAngularDamping(this.ptr,t,r)}rbGravityScale(t){return o.rawrigidbodyset_rbGravityScale(this.ptr,t)}rbSetGravityScale(t,r,e){o.rawrigidbodyset_rbSetGravityScale(this.ptr,t,r,e)}rbApplyForce(t,r,e){x(r,at),o.rawrigidbodyset_rbApplyForce(this.ptr,t,r.ptr,e)}rbApplyImpulse(t,r,e){x(r,at),o.rawrigidbodyset_rbApplyImpulse(this.ptr,t,r.ptr,e)}rbApplyTorque(t,r,e){o.rawrigidbodyset_rbApplyTorque(this.ptr,t,r,e)}rbApplyTorqueImpulse(t,r,e){o.rawrigidbodyset_rbApplyTorqueImpulse(this.ptr,t,r,e)}rbApplyForceAtPoint(t,r,e,i){x(r,at),x(e,at),o.rawrigidbodyset_rbApplyForceAtPoint(this.ptr,t,r.ptr,e.ptr,i)}rbApplyImpulseAtPoint(t,r,e,i){x(r,at),x(e,at),o.rawrigidbodyset_rbApplyImpulseAtPoint(this.ptr,t,r.ptr,e.ptr,i)}constructor(){var t=o.rawrigidbodyset_new();return rt.__wrap(t)}createRigidBody(t,r,e,i,n,a,s,c,p,l,u,h,d,_,w,f){return x(t,at),x(r,et),x(a,at),x(s,at),o.rawrigidbodyset_createRigidBody(this.ptr,t.ptr,r.ptr,e,i,n,a.ptr,s.ptr,c,p,l,u,h,d,_,w,f)>>>0}remove(t,r,e,i){x(r,V),x(e,F),x(i,X),o.rawrigidbodyset_remove(this.ptr,t,r.ptr,e.ptr,i.ptr)}len(){return o.rawrigidbodyset_len(this.ptr)>>>0}contains(t){return 0!==o.rawrigidbodyset_contains(this.ptr,t)}forEachRigidBodyHandle(t){try{o.rawrigidbodyset_forEachRigidBodyHandle(this.ptr,j(t))}finally{s[T++]=void 0}}}class et{static __wrap(t){const r=Object.create(et.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawrotation_free(t)}static identity(){var t=o.rawrotation_identity();return et.__wrap(t)}static fromAngle(t){var r=o.rawrotation_fromAngle(t);return et.__wrap(r)}get im(){return o.rawrotation_im(this.ptr)}get re(){return o.rawintegrationparameters_dt(this.ptr)}get angle(){return o.rawrotation_angle(this.ptr)}}class it{static __wrap(t){const r=Object.create(it.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawserializationpipeline_free(t)}constructor(){var t=o.rawserializationpipeline_new();return it.__wrap(t)}serializeAll(t,r,e,i,n,a,s,c){return x(t,at),x(r,q),x(e,V),x(i,O),x(n,U),x(a,rt),x(s,F),x(c,X),u(o.rawserializationpipeline_serializeAll(this.ptr,t.ptr,r.ptr,e.ptr,i.ptr,n.ptr,a.ptr,s.ptr,c.ptr))}deserializeAll(t){var r=o.rawserializationpipeline_deserializeAll(this.ptr,h(t));return 0===r?void 0:W.__wrap(r)}}class nt{static __wrap(t){const r=Object.create(nt.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawshape_free(t)}static cuboid(t,r){var e=o.rawshape_cuboid(t,r);return nt.__wrap(e)}static roundCuboid(t,r,e){var i=o.rawshape_roundCuboid(t,r,e);return nt.__wrap(i)}static ball(t){var r=o.rawshape_ball(t);return nt.__wrap(r)}static capsule(t,r){var e=o.rawshape_capsule(t,r);return nt.__wrap(e)}static polyline(t,r){var e=D(t,o.__wbindgen_malloc),i=S,n=N(r,o.__wbindgen_malloc),a=S,s=o.rawshape_polyline(e,i,n,a);return nt.__wrap(s)}static trimesh(t,r){var e=D(t,o.__wbindgen_malloc),i=S,n=N(r,o.__wbindgen_malloc),a=S,s=o.rawshape_trimesh(e,i,n,a);return nt.__wrap(s)}static heightfield(t,r){var e=D(t,o.__wbindgen_malloc),i=S;x(r,at);var n=o.rawshape_heightfield(e,i,r.ptr);return nt.__wrap(n)}static segment(t,r){x(t,at),x(r,at);var e=o.rawshape_segment(t.ptr,r.ptr);return nt.__wrap(e)}static triangle(t,r,e){x(t,at),x(r,at),x(e,at);var i=o.rawshape_triangle(t.ptr,r.ptr,e.ptr);return nt.__wrap(i)}static roundTriangle(t,r,e,i){x(t,at),x(r,at),x(e,at);var n=o.rawshape_roundTriangle(t.ptr,r.ptr,e.ptr,i);return nt.__wrap(n)}static convexHull(t){var r=D(t,o.__wbindgen_malloc),e=S,i=o.rawshape_convexHull(r,e);return 0===i?void 0:nt.__wrap(i)}static roundConvexHull(t,r){var e=D(t,o.__wbindgen_malloc),i=S,n=o.rawshape_roundConvexHull(e,i,r);return 0===n?void 0:nt.__wrap(n)}static convexPolyline(t){var r=D(t,o.__wbindgen_malloc),e=S,i=o.rawshape_convexPolyline(r,e);return 0===i?void 0:nt.__wrap(i)}static roundConvexPolyline(t,r){var e=D(t,o.__wbindgen_malloc),i=S,n=o.rawshape_roundConvexPolyline(e,i,r);return 0===n?void 0:nt.__wrap(n)}}class ot{static __wrap(t){const r=Object.create(ot.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawshapecollidertoi_free(t)}colliderHandle(){return o.rawpointcolliderprojection_colliderHandle(this.ptr)>>>0}toi(){return o.rawraycolliderintersection_toi(this.ptr)}witness1(){var t=o.rawraycolliderintersection_normal(this.ptr);return at.__wrap(t)}witness2(){var t=o.rawraycolliderintersection_normal(this.ptr);return at.__wrap(t)}normal1(){var t=o.rawshapecollidertoi_normal1(this.ptr);return at.__wrap(t)}normal2(){var t=o.rawshapecollidertoi_normal1(this.ptr);return at.__wrap(t)}}class at{static __wrap(t){const r=Object.create(at.prototype);return r.ptr=t,r}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();o.__wbg_rawvector_free(t)}static zero(){var t=o.rawvector_zero();return at.__wrap(t)}constructor(t,r){var e=o.rawvector_new(t,r);return at.__wrap(e)}get x(){return o.rawintegrationparameters_dt(this.ptr)}set x(t){o.rawintegrationparameters_set_dt(this.ptr,t)}get y(){return o.rawrotation_im(this.ptr)}set y(t){o.rawvector_set_y(this.ptr,t)}xy(){var t=o.rawvector_xy(this.ptr);return at.__wrap(t)}yx(){var t=o.rawvector_yx(this.ptr);return at.__wrap(t)}}function st(t){u(t)}function ct(t){return h(t)}function pt(t){return h(Z.__wrap(t))}function lt(t,r){return h(f(t,r))}function ut(t){return c(t).now()}function ht(t,r){return h(new Function(f(t,r)))}function dt(){return k((function(t,r){return h(Reflect.get(c(t),c(r)))}),arguments)}function _t(){return k((function(t,r){return h(c(t).call(c(r)))}),arguments)}function wt(t){return h(c(t))}function ft(){return k((function(t,r,e){return h(c(t).call(c(r),c(e)))}),arguments)}function yt(){return k((function(t,r,e,i){return h(c(t).call(c(r),c(e),c(i)))}),arguments)}function bt(){return k((function(t,r,e,i,n){return h(c(t).call(c(r),c(e),c(i),c(n)))}),arguments)}function gt(t,r,e,i){return h(c(t).bind(c(r),c(e),c(i)))}function vt(t){return h(c(t).buffer)}function mt(){return k((function(){return h(self.self)}),arguments)}function St(){return k((function(){return h(window.window)}),arguments)}function Rt(){return k((function(){return h(globalThis.globalThis)}),arguments)}function Ct(){return k((function(){return h(e.g.global)}),arguments)}function Pt(t){return void 0===c(t)}function At(t,r,e){return h(new Uint8Array(c(t),r>>>0,e>>>0))}function Tt(t){return h(new Uint8Array(c(t)))}function jt(t,r,e){c(t).set(c(r),e>>>0)}function xt(t){return c(t).length}function Et(t,r){const e=c(r);var i="number"==typeof e?e:void 0;(null!==b&&b.buffer===o.memory.buffer||(b=new Float64Array(o.memory.buffer)),b)[t/8+1]=y(i)?0:i,v()[t/4+0]=!y(i)}function It(t){const r=c(t);return"boolean"==typeof r?r?1:0:2}function Mt(t,r){var e=P(m(c(r)),o.__wbindgen_malloc,o.__wbindgen_realloc),i=S;v()[t/4+1]=i,v()[t/4+0]=e}function Ht(t,r){throw new Error(f(t,r))}function Bt(){return h(o.memory)}n()}catch(t){n(t)}}))},8500:(t,r,e)=>{e.a(t,(async(i,n)=>{try{var o,a=i([o=e(5991)]),[o]=a.then?(await a)():a;await e.v(r,t.id,"70754f683db4aace4ea9",{"./rapier_wasm2d_bg.js":{__wbindgen_object_drop_ref:o.ug,__wbindgen_number_new:o.pT,__wbg_rawraycolliderintersection_new:o.Ne,__wbindgen_string_new:o.h4,__wbg_now_885ca88fafee0fd1:o.NQ,__wbg_newnoargs_1a11e7e8c906996c:o.Ex,__wbg_get_6d26c712aa73c8b2:o.nG,__wbg_call_e91f71ddf1f45cff:o.A$,__wbindgen_object_clone_ref:o.m_,__wbg_call_e3c72355d091d5d4:o.xL,__wbg_call_c143b19d87139944:o.ek,__wbg_call_72facd37dbc97ddb:o.JX,__wbg_bind_07839579f523aa89:o.Ld,__wbg_buffer_79a3294266d4e783:o.Ww,__wbg_self_b4546ea7b590539e:o.QO,__wbg_window_c279fea81f426a68:o.PL,__wbg_globalThis_038a6ea0ff17789f:o.cG,__wbg_global_4f93ce884bcee597:o.C,__wbindgen_is_undefined:o.XP,__wbg_newwithbyteoffsetandlength_22a36e6023ad3cd0:o.jx,__wbg_new_945397fb09fec0b8:o.g4,__wbg_set_223873223acf6d07:o._O,__wbg_length_68e13e7bbd918464:o.Cr,__wbindgen_number_get:o.M1,__wbindgen_boolean_get:o.HT,__wbindgen_debug_string:o.RA,__wbindgen_throw:o.Or,__wbindgen_memory:o.oH}}),n()}catch(t){n(t)}}),1)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,