(()=>{var e,r,t,o,n={},i={};function a(e){var r=i[e];if(void 0!==r)return r.exports;var t=i[e]={id:e,loaded:!1,exports:{}};return n[e](t,t.exports,a),t.loaded=!0,t.exports}a.m=n,e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",r="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",o=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(n,i,a)=>{var s;a&&((s=[]).d=-1);var c,p,l,d=new Set,u=n.exports,b=new Promise(((e,r)=>{l=r,p=e}));b[r]=u,b[e]=e=>(s&&e(s),d.forEach(e),b.catch((e=>{}))),n.exports=b,i((n=>{var i;c=(n=>n.map((n=>{if(null!==n&&"object"==typeof n){if(n[e])return n;if(n.then){var i=[];i.d=0,n.then((e=>{a[r]=e,o(i)}),(e=>{a[t]=e,o(i)}));var a={};return a[e]=e=>e(i),a}}var s={};return s[e]=e=>{},s[r]=n,s})))(n);var a=()=>c.map((e=>{if(e[t])throw e[t];return e[r]})),p=new Promise((r=>{(i=()=>r(a)).r=0;var t=e=>e!==s&&!d.has(e)&&(d.add(e),e&&!e.d&&(i.r++,e.push(i)));c.map((r=>r[e](t)))}));return i.r?p:a()}),(e=>(e?l(b[t]=e):p(u),o(s)))),s&&s.d<0&&(s.d=0)},a.d=(e,r)=>{for(var t in r)a.o(r,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((r,t)=>(a.f[t](e,r),r)),[])),a.u=e=>e+".0b684feae4baf8eee059.js",a.miniCssF=e=>{},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),a.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.v=(e,r,t,o)=>{var n=fetch(a.p+""+t+".module.wasm"),i=()=>n.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,o))).then((r=>Object.assign(e,r.instance.exports)));return n.then((r=>"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(r,o).then((r=>Object.assign(e,r.instance.exports)),(e=>{if("application/wasm"!==r.headers.get("Content-Type"))return console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",e),i();throw e})):i()))},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var r=a.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=t[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={891:1};a.f.i=(r,t)=>{e[r]||importScripts(a.p+a.u(r))};var r=self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[],t=r.push.bind(r);r.push=r=>{var[o,n,i]=r;for(var s in n)a.o(n,s)&&(a.m[s]=n[s]);for(i&&i(a);o.length;)e[o.pop()]=1;t(r)}})(),a.e(727).then(a.bind(a,9727)).then((function(e){var r=new e.World({x:0,y:-9.81}),t=e.ColliderDesc.cuboid(10,.1);r.createCollider(t);var o=e.RigidBodyDesc.newDynamic().setTranslation(0,1),n=r.createRigidBody(o),i=e.ColliderDesc.cuboid(.5,.5),a=(r.createCollider(i,n.handle),0);!function e(){r.step();var t=n.translation();console.log("Rigid-body position: ",t.x,t.y),++a<20&&setTimeout(e,16)}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,