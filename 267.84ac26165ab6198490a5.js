(()=>{var e,t,r,o,n,i={},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={id:e,loaded:!1,exports:{}};return i[e](r,r.exports,s),r.loaded=!0,r.exports}s.m=i,e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},o=e=>!--e.r&&e(),n=(e,t)=>e?e.push(t):o(t),s.a=(i,a,s)=>{var c,p,l,u=s&&[],b=i.exports,d=!0,f=!1,h=(t,r,o)=>{f||(f=!0,r.r+=t.length,t.map(((t,n)=>t[e](r,o))),f=!1)},y=new Promise(((e,t)=>{l=t,p=()=>(e(b),r(u),u=0)}));y[t]=b,y[e]=(e,t)=>{if(d)return o(e);c&&h(c,e,t),n(u,e),y.catch(t)},i.exports=y,a((i=>{if(!i)return p();var a,s;c=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var a=[];i.then((e=>{s[t]=e,r(a),a=0}));var s={};return s[e]=(e,t)=>(n(a,e),i.catch(t)),s}}var c={};return c[e]=e=>o(e),c[t]=i,c})))(i);var l=new Promise(((e,r)=>{(a=()=>e(s=c.map((e=>e[t])))).r=0,h(c,a,r)}));return a.r?l:s})).then(p,l),d=!1},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,r)=>(s.f[r](e,t),t)),[])),s.u=e=>e+".81fdcb664f849bfc3959.js",s.miniCssF=e=>{},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.v=(e,t,r,o)=>{var n=fetch(s.p+""+r+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(n,o).then((t=>Object.assign(e,t.instance.exports))):n.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,o))).then((t=>Object.assign(e,t.instance.exports)))},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e={267:1};s.f.i=(t,r)=>{e[t]||importScripts(s.p+s.u(t))};var t=self.webpackChunktippy_project_website=self.webpackChunktippy_project_website||[],r=t.push.bind(t);t.push=t=>{var[o,n,i]=t;for(var a in n)s.o(n,a)&&(s.m[a]=n[a]);for(i&&i(s);o.length;)e[o.pop()]=1;r(t)}})(),s.e(234).then(s.bind(s,8234)).then((function(e){var t=new e.World({x:0,y:-9.81}),r=e.ColliderDesc.cuboid(10,.1);t.createCollider(r);var o=e.RigidBodyDesc.newDynamic().setTranslation(0,1),n=t.createRigidBody(o),i=e.ColliderDesc.cuboid(.5,.5),a=(t.createCollider(i,n.handle),0);!function e(){t.step();var r=n.translation();console.log("Rigid-body position: ",r.x,r.y),++a<20&&setTimeout(e,16)}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,